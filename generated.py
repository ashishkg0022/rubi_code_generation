# -*- coding: utf-8 -*-
from matchpy import *
from sympy import *
from sympy.integrals.rubi.utility_function import *
from sympy.integrals.rubi.constraints import *
from sympy.integrals.rubi.symbol import *
from matchpy.matching.many_to_one import CommutativeMatcher
from matchpy.utils import VariableWithCount
from collections import deque
from multiset import Multiset

class CommutativeMatcher5684(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5684._instance is None:
			CommutativeMatcher5684._instance = CommutativeMatcher5684()
		return CommutativeMatcher5684._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5683
		return
		yield


class CommutativeMatcher5669(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i3.1.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({1: 1}), [
      (VariableWithCount('i3.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5669._instance is None:
			CommutativeMatcher5669._instance = CommutativeMatcher5669()
		return CommutativeMatcher5669._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5668
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 9019
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i3.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 9020
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp5 = subjects2.popleft()
						# State 9021
						if len(subjects2) == 0:
							# State 9022
							if len(subjects) == 0:
								# 0: v**2
								yield 0, subst1
						subjects2.appendleft(tmp5)
					if len(subjects2) >= 1:
						tmp6 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i3.1.2', tmp6)
						except ValueError:
							pass
						else:
							# State 9031
							if len(subjects2) == 0:
								# State 9032
								if len(subjects) == 0:
									# 1: c**r
									yield 1, subst2
						subjects2.appendleft(tmp6)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher5665(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i3.0', 1, 1, None), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i3.0', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i3.0', 1, 1, 0), Add)
]),
    3: (3, Multiset({3: 1}), [
      (VariableWithCount('i3.0', 1, 1, None), Add)
]),
    4: (4, Multiset({4: 1}), [
      (VariableWithCount('i3.0', 1, 1, None), Add)
]),
    5: (5, Multiset({5: 1}), [
      (VariableWithCount('i3.0', 1, 1, None), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5665._instance is None:
			CommutativeMatcher5665._instance = CommutativeMatcher5665()
		return CommutativeMatcher5665._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5664
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 5666
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 5667
					if len(subjects) == 0:
						# 0: x*b /; (cons_f2) and (cons_f3) and (cons_f67)
						yield 0, subst2
						# 1: x*b /; (cons_f2) and (cons_f3) and (cons_f21)
						yield 1, subst2
						# 2: x*b /; (cons_f3) and (cons_f68) and (cons_f69)
						yield 2, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.1.0', 1)
		except ValueError:
			pass
		else:
			# State 9014
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 9015
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i3.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 9016
						if len(subjects6) >= 1 and subjects6[0] == 2:
							tmp9 = subjects6.popleft()
							# State 9017
							if len(subjects6) == 0:
								# State 9018
								if len(subjects) == 0:
									# 3: b*v**2 /; (cons_f3) and (cons_f67)
									yield 3, subst2
							subjects6.appendleft(tmp9)
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i3.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 9029
								if len(subjects6) == 0:
									# State 9030
									if len(subjects) == 0:
										# 4: b*c**r /; (cons_f3) and (cons_f1479) and (cons_f744)
										yield 4, subst3
										# 5: b*c**r /; (cons_f3) and (cons_f1482) and (cons_f165)
										yield 5, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher5669.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 5670
					if len(subjects) == 0:
						# 0: x*b /; (cons_f2) and (cons_f3) and (cons_f67)
						yield 0, subst1
						# 1: x*b /; (cons_f2) and (cons_f3) and (cons_f21)
						yield 1, subst1
						# 2: x*b /; (cons_f3) and (cons_f68) and (cons_f69)
						yield 2, subst1
				if pattern_index == 1:
					# State 9023
					if len(subjects) == 0:
						# 3: b*v**2 /; (cons_f3) and (cons_f67)
						yield 3, subst1
				if pattern_index == 2:
					# State 9033
					if len(subjects) == 0:
						# 4: b*c**r /; (cons_f3) and (cons_f1479) and (cons_f744)
						yield 4, subst1
						# 5: b*c**r /; (cons_f3) and (cons_f1482) and (cons_f165)
						yield 5, subst1
			subjects.appendleft(tmp12)
		return
		yield


class CommutativeMatcher6649(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6649._instance is None:
			CommutativeMatcher6649._instance = CommutativeMatcher6649()
		return CommutativeMatcher6649._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6648
		return
		yield


class CommutativeMatcher6669(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6669._instance is None:
			CommutativeMatcher6669._instance = CommutativeMatcher6669()
		return CommutativeMatcher6669._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6668
		return
		yield


class CommutativeMatcher6685(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_3', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6685._instance is None:
			CommutativeMatcher6685._instance = CommutativeMatcher6685()
		return CommutativeMatcher6685._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6684
		return
		yield


class CommutativeMatcher6701(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_4', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6701._instance is None:
			CommutativeMatcher6701._instance = CommutativeMatcher6701()
		return CommutativeMatcher6701._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6700
		return
		yield


class CommutativeMatcher6658(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_3', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i3.2.1.0_4', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6658._instance is None:
			CommutativeMatcher6658._instance = CommutativeMatcher6658()
		return CommutativeMatcher6658._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6657
		return
		yield


class CommutativeMatcher6654(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i3.2.0_2', 1, 1, 0), Add)
]),
    3: (3, Multiset({3: 1}), [
      (VariableWithCount('i3.2.0_3', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6654._instance is None:
			CommutativeMatcher6654._instance = CommutativeMatcher6654()
		return CommutativeMatcher6654._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6653
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6655
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6656
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 6673
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 6674
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst2
				subjects.appendleft(tmp5)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.2.1.0_3', 1)
		except ValueError:
			pass
		else:
			# State 6689
			if len(subjects) >= 1:
				tmp8 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0', tmp8)
				except ValueError:
					pass
				else:
					# State 6690
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst2
				subjects.appendleft(tmp8)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3.2.1.0_4', 1)
		except ValueError:
			pass
		else:
			# State 6705
			if len(subjects) >= 1:
				tmp11 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0', tmp11)
				except ValueError:
					pass
				else:
					# State 6706
					if len(subjects) == 0:
						# 3: x*h
						yield 3, subst2
				subjects.appendleft(tmp11)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp13 = subjects.popleft()
			associative1 = tmp13
			associative_type1 = type(tmp13)
			subjects14 = deque(op_iter(tmp13))
			matcher = CommutativeMatcher6658.get()
			tmp15 = subjects14
			subjects14 = []
			for s in tmp15:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp15, subst0):
				if pattern_index == 0:
					# State 6659
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
				if pattern_index == 1:
					# State 6675
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst1
				if pattern_index == 2:
					# State 6691
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst1
				if pattern_index == 3:
					# State 6707
					if len(subjects) == 0:
						# 3: x*h
						yield 3, subst1
			subjects.appendleft(tmp13)
		return
		yield


class CommutativeMatcher6641(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1, 2: 1, 3: 1}), [
      (VariableWithCount('i3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6641._instance is None:
			CommutativeMatcher6641._instance = CommutativeMatcher6641()
		return CommutativeMatcher6641._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6640
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 6642
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 6643
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6644
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 6645
							if len(subjects2) >= 1:
								tmp7 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i3.2', tmp7)
								except ValueError:
									pass
								else:
									# State 6646
									if len(subjects2) == 0:
										# State 6647
										if len(subjects) == 0:
											# 0: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 0, subst4
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp9 = subjects2.popleft()
					associative1 = tmp9
					associative_type1 = type(tmp9)
					subjects10 = deque(op_iter(tmp9))
					matcher = CommutativeMatcher6649.get()
					tmp11 = subjects10
					subjects10 = []
					for s in tmp11:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp11, subst1):
						if pattern_index == 0:
							# State 6650
							if len(subjects2) >= 1:
								tmp12 = []
								tmp12.append(subjects2.popleft())
								while True:
									if len(tmp12) > 1:
										tmp13 = create_operation_expression(associative1, tmp12)
									elif len(tmp12) == 1:
										tmp13 = tmp12[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i3.2', tmp13)
									except ValueError:
										pass
									else:
										# State 6651
										if len(subjects2) == 0:
											# State 6652
											if len(subjects) == 0:
												# 0: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
												yield 0, subst3
									if len(subjects2) == 0:
										break
									tmp12.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp12))
					subjects2.appendleft(tmp9)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 6663
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 6664
					if len(subjects2) >= 1:
						tmp17 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i3.2.1.0', tmp17)
						except ValueError:
							pass
						else:
							# State 6665
							if len(subjects2) >= 1:
								tmp19 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i3.2_1', tmp19)
								except ValueError:
									pass
								else:
									# State 6666
									if len(subjects2) == 0:
										# State 6667
										if len(subjects) == 0:
											# 1: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 1, subst4
								subjects2.appendleft(tmp19)
						subjects2.appendleft(tmp17)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp21 = subjects2.popleft()
					associative1 = tmp21
					associative_type1 = type(tmp21)
					subjects22 = deque(op_iter(tmp21))
					matcher = CommutativeMatcher6669.get()
					tmp23 = subjects22
					subjects22 = []
					for s in tmp23:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp23, subst1):
						if pattern_index == 0:
							# State 6670
							if len(subjects2) >= 1:
								tmp24 = []
								tmp24.append(subjects2.popleft())
								while True:
									if len(tmp24) > 1:
										tmp25 = create_operation_expression(associative1, tmp24)
									elif len(tmp24) == 1:
										tmp25 = tmp24[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i3.2_1', tmp25)
									except ValueError:
										pass
									else:
										# State 6671
										if len(subjects2) == 0:
											# State 6672
											if len(subjects) == 0:
												# 1: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
												yield 1, subst3
									if len(subjects2) == 0:
										break
									tmp24.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp24))
					subjects2.appendleft(tmp21)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i3.2.0_2', 0)
			except ValueError:
				pass
			else:
				# State 6679
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 6680
					if len(subjects2) >= 1:
						tmp29 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i3.2.1.0', tmp29)
						except ValueError:
							pass
						else:
							# State 6681
							if len(subjects2) >= 1:
								tmp31 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i3.2_2', tmp31)
								except ValueError:
									pass
								else:
									# State 6682
									if len(subjects2) == 0:
										# State 6683
										if len(subjects) == 0:
											# 2: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 2, subst4
								subjects2.appendleft(tmp31)
						subjects2.appendleft(tmp29)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp33 = subjects2.popleft()
					associative1 = tmp33
					associative_type1 = type(tmp33)
					subjects34 = deque(op_iter(tmp33))
					matcher = CommutativeMatcher6685.get()
					tmp35 = subjects34
					subjects34 = []
					for s in tmp35:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp35, subst1):
						if pattern_index == 0:
							# State 6686
							if len(subjects2) >= 1:
								tmp36 = []
								tmp36.append(subjects2.popleft())
								while True:
									if len(tmp36) > 1:
										tmp37 = create_operation_expression(associative1, tmp36)
									elif len(tmp36) == 1:
										tmp37 = tmp36[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i3.2_2', tmp37)
									except ValueError:
										pass
									else:
										# State 6687
										if len(subjects2) == 0:
											# State 6688
											if len(subjects) == 0:
												# 2: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
												yield 2, subst3
									if len(subjects2) == 0:
										break
									tmp36.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp36))
					subjects2.appendleft(tmp33)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i3.2.0_3', 0)
			except ValueError:
				pass
			else:
				# State 6695
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.2.1.0_4', 1)
				except ValueError:
					pass
				else:
					# State 6696
					if len(subjects2) >= 1:
						tmp41 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i3.2.1.0', tmp41)
						except ValueError:
							pass
						else:
							# State 6697
							if len(subjects2) >= 1:
								tmp43 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i3.2_3', tmp43)
								except ValueError:
									pass
								else:
									# State 6698
									if len(subjects2) == 0:
										# State 6699
										if len(subjects) == 0:
											# 3: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 3, subst4
								subjects2.appendleft(tmp43)
						subjects2.appendleft(tmp41)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp45 = subjects2.popleft()
					associative1 = tmp45
					associative_type1 = type(tmp45)
					subjects46 = deque(op_iter(tmp45))
					matcher = CommutativeMatcher6701.get()
					tmp47 = subjects46
					subjects46 = []
					for s in tmp47:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp47, subst1):
						if pattern_index == 0:
							# State 6702
							if len(subjects2) >= 1:
								tmp48 = []
								tmp48.append(subjects2.popleft())
								while True:
									if len(tmp48) > 1:
										tmp49 = create_operation_expression(associative1, tmp48)
									elif len(tmp48) == 1:
										tmp49 = tmp48[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i3.2_3', tmp49)
									except ValueError:
										pass
									else:
										# State 6703
										if len(subjects2) == 0:
											# State 6704
											if len(subjects) == 0:
												# 3: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
												yield 3, subst3
									if len(subjects2) == 0:
										break
									tmp48.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp48))
					subjects2.appendleft(tmp45)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp51 = subjects2.popleft()
				associative1 = tmp51
				associative_type1 = type(tmp51)
				subjects52 = deque(op_iter(tmp51))
				matcher = CommutativeMatcher6654.get()
				tmp53 = subjects52
				subjects52 = []
				for s in tmp53:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp53, subst0):
					if pattern_index == 0:
						# State 6660
						if len(subjects2) >= 1:
							tmp54 = []
							tmp54.append(subjects2.popleft())
							while True:
								if len(tmp54) > 1:
									tmp55 = create_operation_expression(associative1, tmp54)
								elif len(tmp54) == 1:
									tmp55 = tmp54[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i3.2', tmp55)
								except ValueError:
									pass
								else:
									# State 6661
									if len(subjects2) == 0:
										# State 6662
										if len(subjects) == 0:
											# 0: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 0, subst2
								if len(subjects2) == 0:
									break
								tmp54.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp54))
					if pattern_index == 1:
						# State 6676
						if len(subjects2) >= 1:
							tmp57 = []
							tmp57.append(subjects2.popleft())
							while True:
								if len(tmp57) > 1:
									tmp58 = create_operation_expression(associative1, tmp57)
								elif len(tmp57) == 1:
									tmp58 = tmp57[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i3.2_1', tmp58)
								except ValueError:
									pass
								else:
									# State 6677
									if len(subjects2) == 0:
										# State 6678
										if len(subjects) == 0:
											# 1: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 1, subst2
								if len(subjects2) == 0:
									break
								tmp57.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp57))
					if pattern_index == 2:
						# State 6692
						if len(subjects2) >= 1:
							tmp60 = []
							tmp60.append(subjects2.popleft())
							while True:
								if len(tmp60) > 1:
									tmp61 = create_operation_expression(associative1, tmp60)
								elif len(tmp60) == 1:
									tmp61 = tmp60[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i3.2_2', tmp61)
								except ValueError:
									pass
								else:
									# State 6693
									if len(subjects2) == 0:
										# State 6694
										if len(subjects) == 0:
											# 2: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 2, subst2
								if len(subjects2) == 0:
									break
								tmp60.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp60))
					if pattern_index == 3:
						# State 6708
						if len(subjects2) >= 1:
							tmp63 = []
							tmp63.append(subjects2.popleft())
							while True:
								if len(tmp63) > 1:
									tmp64 = create_operation_expression(associative1, tmp63)
								elif len(tmp63) == 1:
									tmp64 = tmp63[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i3.2_3', tmp64)
								except ValueError:
									pass
								else:
									# State 6709
									if len(subjects2) == 0:
										# State 6710
										if len(subjects) == 0:
											# 3: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f224) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f223)
											yield 3, subst2
								if len(subjects2) == 0:
									break
								tmp63.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp63))
				subjects2.appendleft(tmp51)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6781(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6781._instance is None:
			CommutativeMatcher6781._instance = CommutativeMatcher6781()
		return CommutativeMatcher6781._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6780
		return
		yield


class CommutativeMatcher6788(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6788._instance is None:
			CommutativeMatcher6788._instance = CommutativeMatcher6788()
		return CommutativeMatcher6788._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6787
		return
		yield


class CommutativeMatcher6784(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6784._instance is None:
			CommutativeMatcher6784._instance = CommutativeMatcher6784()
		return CommutativeMatcher6784._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6783
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6785
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6786
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6788.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6789
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6918(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6918._instance is None:
			CommutativeMatcher6918._instance = CommutativeMatcher6918()
		return CommutativeMatcher6918._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6917
		return
		yield


class CommutativeMatcher6927(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6927._instance is None:
			CommutativeMatcher6927._instance = CommutativeMatcher6927()
		return CommutativeMatcher6927._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6926
		return
		yield


class CommutativeMatcher6923(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6923._instance is None:
			CommutativeMatcher6923._instance = CommutativeMatcher6923()
		return CommutativeMatcher6923._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6922
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6924
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6925
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6927.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6928
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6776(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, None), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6776._instance is None:
			CommutativeMatcher6776._instance = CommutativeMatcher6776()
		return CommutativeMatcher6776._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6775
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0', 0)
		except ValueError:
			pass
		else:
			# State 6777
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.2.1.1.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6778
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.2.1.1.0', tmp3)
					except ValueError:
						pass
					else:
						# State 6779
						if len(subjects) == 0:
							# 0: a + x*b /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50)
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp5 = subjects.popleft()
				associative1 = tmp5
				associative_type1 = type(tmp5)
				subjects6 = deque(op_iter(tmp5))
				matcher = CommutativeMatcher6781.get()
				tmp7 = subjects6
				subjects6 = []
				for s in tmp7:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp7, subst1):
					if pattern_index == 0:
						# State 6782
						if len(subjects) == 0:
							# 0: a + x*b /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50)
							yield 0, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Add):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher6784.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 6790
					if len(subjects) == 0:
						# 0: a + x*b /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50)
						yield 0, subst1
			subjects.appendleft(tmp8)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp11 = subjects.popleft()
			subjects12 = deque(op_iter(tmp11))
			# State 6911
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 6912
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6913
					if len(subjects12) >= 1:
						tmp15 = subjects12.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0', tmp15)
						except ValueError:
							pass
						else:
							# State 6914
							if len(subjects12) >= 1:
								tmp17 = subjects12.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2', tmp17)
								except ValueError:
									pass
								else:
									# State 6915
									if len(subjects12) == 0:
										# State 6916
										if len(subjects) == 0:
											# 1: (a + x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50)
											yield 1, subst4
								subjects12.appendleft(tmp17)
						subjects12.appendleft(tmp15)
				if len(subjects12) >= 1 and isinstance(subjects12[0], Mul):
					tmp19 = subjects12.popleft()
					associative1 = tmp19
					associative_type1 = type(tmp19)
					subjects20 = deque(op_iter(tmp19))
					matcher = CommutativeMatcher6918.get()
					tmp21 = subjects20
					subjects20 = []
					for s in tmp21:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp21, subst1):
						if pattern_index == 0:
							# State 6919
							if len(subjects12) >= 1:
								tmp22 = []
								tmp22.append(subjects12.popleft())
								while True:
									if len(tmp22) > 1:
										tmp23 = create_operation_expression(associative1, tmp22)
									elif len(tmp22) == 1:
										tmp23 = tmp22[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2.2.2', tmp23)
									except ValueError:
										pass
									else:
										# State 6920
										if len(subjects12) == 0:
											# State 6921
											if len(subjects) == 0:
												# 1: (a + x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50)
												yield 1, subst3
									if len(subjects12) == 0:
										break
									tmp22.append(subjects12.popleft())
								subjects12.extendleft(reversed(tmp22))
					subjects12.appendleft(tmp19)
			if len(subjects12) >= 1 and isinstance(subjects12[0], Add):
				tmp25 = subjects12.popleft()
				associative1 = tmp25
				associative_type1 = type(tmp25)
				subjects26 = deque(op_iter(tmp25))
				matcher = CommutativeMatcher6923.get()
				tmp27 = subjects26
				subjects26 = []
				for s in tmp27:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp27, subst0):
					if pattern_index == 0:
						# State 6929
						if len(subjects12) >= 1:
							tmp28 = []
							tmp28.append(subjects12.popleft())
							while True:
								if len(tmp28) > 1:
									tmp29 = create_operation_expression(associative1, tmp28)
								elif len(tmp28) == 1:
									tmp29 = tmp28[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2.2', tmp29)
								except ValueError:
									pass
								else:
									# State 6930
									if len(subjects12) == 0:
										# State 6931
										if len(subjects) == 0:
											# 1: (a + x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50)
											yield 1, subst2
								if len(subjects12) == 0:
									break
								tmp28.append(subjects12.popleft())
							subjects12.extendleft(reversed(tmp28))
				subjects12.appendleft(tmp25)
			subjects.appendleft(tmp11)
		return
		yield


class CommutativeMatcher6885(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6885._instance is None:
			CommutativeMatcher6885._instance = CommutativeMatcher6885()
		return CommutativeMatcher6885._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6884
		return
		yield


class CommutativeMatcher6900(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6900._instance is None:
			CommutativeMatcher6900._instance = CommutativeMatcher6900()
		return CommutativeMatcher6900._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6899
		return
		yield


class CommutativeMatcher6896(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6896._instance is None:
			CommutativeMatcher6896._instance = CommutativeMatcher6896()
		return CommutativeMatcher6896._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6895
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6897
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6898
					if len(subjects) == 0:
						# 0: x*b /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50)
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6900.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6901
					if len(subjects) == 0:
						# 0: x*b /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50)
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8360(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({3: 1, 4: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8360._instance is None:
			CommutativeMatcher8360._instance = CommutativeMatcher8360()
		return CommutativeMatcher8360._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8359
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8361
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8362
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8363
							if len(subjects2) == 0:
								# State 8364
								if len(subjects) == 0:
									# 0: u**n /; (cons_f4) and (cons_f1244) and (With6950)
									yield 0, subst2
									# 1: u**n /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f196) and (cons_f2029)
									yield 1, subst2
									# 2: u**n /; (cons_f196) and (cons_f840) and (cons_f2030)
									yield 2, subst2
									# 3: u**n /; (cons_f196) and (cons_f840)
									yield 3, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			if len(subjects2) >= 1:
				tmp7 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp7)
				except ValueError:
					pass
				else:
					# State 8817
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8818
						if len(subjects2) == 0:
							# State 8819
							if len(subjects) == 0:
								# 4: w**n2 /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f840)
								yield 4, subst2
					if len(subjects2) >= 1:
						tmp10 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp10)
						except ValueError:
							pass
						else:
							# State 8818
							if len(subjects2) == 0:
								# State 8819
								if len(subjects) == 0:
									# 4: w**n2 /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f840)
									yield 4, subst2
						subjects2.appendleft(tmp10)
				subjects2.appendleft(tmp7)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8815
			if len(subjects) >= 1:
				tmp13 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp13)
				except ValueError:
					pass
				else:
					# State 8816
					if len(subjects) == 0:
						# 4: w**n2 /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f840)
						yield 4, subst2
				subjects.appendleft(tmp13)
		return
		yield


class CommutativeMatcher6807(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6807._instance is None:
			CommutativeMatcher6807._instance = CommutativeMatcher6807()
		return CommutativeMatcher6807._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6806
		return
		yield


class CommutativeMatcher6814(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6814._instance is None:
			CommutativeMatcher6814._instance = CommutativeMatcher6814()
		return CommutativeMatcher6814._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6813
		return
		yield


class CommutativeMatcher6810(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6810._instance is None:
			CommutativeMatcher6810._instance = CommutativeMatcher6810()
		return CommutativeMatcher6810._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6809
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6811
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6812
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6814.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6815
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6974(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6974._instance is None:
			CommutativeMatcher6974._instance = CommutativeMatcher6974()
		return CommutativeMatcher6974._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6973
		return
		yield


class CommutativeMatcher6983(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6983._instance is None:
			CommutativeMatcher6983._instance = CommutativeMatcher6983()
		return CommutativeMatcher6983._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6982
		return
		yield


class CommutativeMatcher6979(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6979._instance is None:
			CommutativeMatcher6979._instance = CommutativeMatcher6979()
		return CommutativeMatcher6979._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6978
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6980
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6981
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6983.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6984
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6802(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, None), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6802._instance is None:
			CommutativeMatcher6802._instance = CommutativeMatcher6802()
		return CommutativeMatcher6802._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6801
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0', 0)
		except ValueError:
			pass
		else:
			# State 6803
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.2.1.1.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6804
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.2.1.1.0', tmp3)
					except ValueError:
						pass
					else:
						# State 6805
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp5 = subjects.popleft()
				associative1 = tmp5
				associative_type1 = type(tmp5)
				subjects6 = deque(op_iter(tmp5))
				matcher = CommutativeMatcher6807.get()
				tmp7 = subjects6
				subjects6 = []
				for s in tmp7:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp7, subst1):
					if pattern_index == 0:
						# State 6808
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Add):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher6810.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 6816
					if len(subjects) == 0:
						# 0: a + x*b
						yield 0, subst1
			subjects.appendleft(tmp8)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp11 = subjects.popleft()
			subjects12 = deque(op_iter(tmp11))
			# State 6967
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 6968
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6969
					if len(subjects12) >= 1:
						tmp15 = subjects12.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0', tmp15)
						except ValueError:
							pass
						else:
							# State 6970
							if len(subjects12) >= 1:
								tmp17 = subjects12.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2', tmp17)
								except ValueError:
									pass
								else:
									# State 6971
									if len(subjects12) == 0:
										# State 6972
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst4
								subjects12.appendleft(tmp17)
						subjects12.appendleft(tmp15)
				if len(subjects12) >= 1 and isinstance(subjects12[0], Mul):
					tmp19 = subjects12.popleft()
					associative1 = tmp19
					associative_type1 = type(tmp19)
					subjects20 = deque(op_iter(tmp19))
					matcher = CommutativeMatcher6974.get()
					tmp21 = subjects20
					subjects20 = []
					for s in tmp21:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp21, subst1):
						if pattern_index == 0:
							# State 6975
							if len(subjects12) >= 1:
								tmp22 = []
								tmp22.append(subjects12.popleft())
								while True:
									if len(tmp22) > 1:
										tmp23 = create_operation_expression(associative1, tmp22)
									elif len(tmp22) == 1:
										tmp23 = tmp22[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2.2.2', tmp23)
									except ValueError:
										pass
									else:
										# State 6976
										if len(subjects12) == 0:
											# State 6977
											if len(subjects) == 0:
												# 1: (a + x*b)**n
												yield 1, subst3
									if len(subjects12) == 0:
										break
									tmp22.append(subjects12.popleft())
								subjects12.extendleft(reversed(tmp22))
					subjects12.appendleft(tmp19)
			if len(subjects12) >= 1 and isinstance(subjects12[0], Add):
				tmp25 = subjects12.popleft()
				associative1 = tmp25
				associative_type1 = type(tmp25)
				subjects26 = deque(op_iter(tmp25))
				matcher = CommutativeMatcher6979.get()
				tmp27 = subjects26
				subjects26 = []
				for s in tmp27:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp27, subst0):
					if pattern_index == 0:
						# State 6985
						if len(subjects12) >= 1:
							tmp28 = []
							tmp28.append(subjects12.popleft())
							while True:
								if len(tmp28) > 1:
									tmp29 = create_operation_expression(associative1, tmp28)
								elif len(tmp28) == 1:
									tmp29 = tmp28[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2.2', tmp29)
								except ValueError:
									pass
								else:
									# State 6986
									if len(subjects12) == 0:
										# State 6987
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst2
								if len(subjects12) == 0:
									break
								tmp28.append(subjects12.popleft())
							subjects12.extendleft(reversed(tmp28))
				subjects12.appendleft(tmp25)
			subjects.appendleft(tmp11)
		return
		yield


class CommutativeMatcher6949(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6949._instance is None:
			CommutativeMatcher6949._instance = CommutativeMatcher6949()
		return CommutativeMatcher6949._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6948
		return
		yield


class CommutativeMatcher6960(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6960._instance is None:
			CommutativeMatcher6960._instance = CommutativeMatcher6960()
		return CommutativeMatcher6960._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6959
		return
		yield


class CommutativeMatcher6956(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6956._instance is None:
			CommutativeMatcher6956._instance = CommutativeMatcher6956()
		return CommutativeMatcher6956._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6955
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6957
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6958
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6960.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6961
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6799(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1, 3: 1, 4: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({5: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6799._instance is None:
			CommutativeMatcher6799._instance = CommutativeMatcher6799()
		return CommutativeMatcher6799._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6798
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 6800
			if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
				tmp3 = subjects2.popleft()
				associative1 = tmp3
				associative_type1 = type(tmp3)
				subjects4 = deque(op_iter(tmp3))
				matcher = CommutativeMatcher6802.get()
				tmp5 = subjects4
				subjects4 = []
				for s in tmp5:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp5, subst0):
					if pattern_index == 0:
						# State 6817
						if len(subjects2) >= 1:
							tmp6 = []
							tmp6.append(subjects2.popleft())
							while True:
								if len(tmp6) > 1:
									tmp7 = create_operation_expression(associative1, tmp6)
								elif len(tmp6) == 1:
									tmp7 = tmp6[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2', tmp7)
								except ValueError:
									pass
								else:
									# State 6818
									if len(subjects2) == 0:
										# State 6819
										if len(subjects) == 0:
											# 0: (d*(a + x*b))**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147)
											yield 0, subst2
								if len(subjects2) == 0:
									break
								tmp6.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp6))
					if pattern_index == 1:
						# State 6988
						if len(subjects2) >= 1:
							tmp9 = []
							tmp9.append(subjects2.popleft())
							while True:
								if len(tmp9) > 1:
									tmp10 = create_operation_expression(associative1, tmp9)
								elif len(tmp9) == 1:
									tmp10 = tmp9[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2', tmp10)
								except ValueError:
									pass
								else:
									# State 6989
									if len(subjects2) == 0:
										# State 6990
										if len(subjects) == 0:
											# 1: (d*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147)
											yield 1, subst2
								if len(subjects2) == 0:
									break
								tmp9.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp9))
				subjects2.appendleft(tmp3)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.0', 1)
			except ValueError:
				pass
			else:
				# State 6939
				if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
					tmp13 = subjects2.popleft()
					subjects14 = deque(op_iter(tmp13))
					# State 6940
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2.2.0', 0)
					except ValueError:
						pass
					else:
						# State 6941
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0_1', 1)
						except ValueError:
							pass
						else:
							# State 6942
							if len(subjects14) >= 1:
								tmp17 = subjects14.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2.1.0', tmp17)
								except ValueError:
									pass
								else:
									# State 6943
									if len(subjects14) >= 1:
										tmp19 = subjects14.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.2.2', tmp19)
										except ValueError:
											pass
										else:
											# State 6944
											if len(subjects14) == 0:
												# State 6945
												if len(subjects2) >= 1:
													tmp21 = subjects2.popleft()
													subst6 = Substitution(subst5)
													try:
														subst6.try_add_variable('i2.2.2', tmp21)
													except ValueError:
														pass
													else:
														# State 6946
														if len(subjects2) == 0:
															# State 6947
															if len(subjects) == 0:
																# 1: (d*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147)
																yield 1, subst6
													subjects2.appendleft(tmp21)
										subjects14.appendleft(tmp19)
								subjects14.appendleft(tmp17)
						if len(subjects14) >= 1 and isinstance(subjects14[0], Mul):
							tmp23 = subjects14.popleft()
							associative1 = tmp23
							associative_type1 = type(tmp23)
							subjects24 = deque(op_iter(tmp23))
							matcher = CommutativeMatcher6949.get()
							tmp25 = subjects24
							subjects24 = []
							for s in tmp25:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp25, subst2):
								if pattern_index == 0:
									# State 6950
									if len(subjects14) >= 1:
										tmp26 = []
										tmp26.append(subjects14.popleft())
										while True:
											if len(tmp26) > 1:
												tmp27 = create_operation_expression(associative1, tmp26)
											elif len(tmp26) == 1:
												tmp27 = tmp26[0]
											else:
												assert False, "Unreachable"
											subst4 = Substitution(subst3)
											try:
												subst4.try_add_variable('i2.2.2.2', tmp27)
											except ValueError:
												pass
											else:
												# State 6951
												if len(subjects14) == 0:
													# State 6952
													if len(subjects2) >= 1:
														tmp29 = subjects2.popleft()
														subst5 = Substitution(subst4)
														try:
															subst5.try_add_variable('i2.2.2', tmp29)
														except ValueError:
															pass
														else:
															# State 6953
															if len(subjects2) == 0:
																# State 6954
																if len(subjects) == 0:
																	# 1: (d*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147)
																	yield 1, subst5
														subjects2.appendleft(tmp29)
											if len(subjects14) == 0:
												break
											tmp26.append(subjects14.popleft())
										subjects14.extendleft(reversed(tmp26))
							subjects14.appendleft(tmp23)
					if len(subjects14) >= 1 and isinstance(subjects14[0], Add):
						tmp31 = subjects14.popleft()
						associative1 = tmp31
						associative_type1 = type(tmp31)
						subjects32 = deque(op_iter(tmp31))
						matcher = CommutativeMatcher6956.get()
						tmp33 = subjects32
						subjects32 = []
						for s in tmp33:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp33, subst1):
							if pattern_index == 0:
								# State 6962
								if len(subjects14) >= 1:
									tmp34 = []
									tmp34.append(subjects14.popleft())
									while True:
										if len(tmp34) > 1:
											tmp35 = create_operation_expression(associative1, tmp34)
										elif len(tmp34) == 1:
											tmp35 = tmp34[0]
										else:
											assert False, "Unreachable"
										subst3 = Substitution(subst2)
										try:
											subst3.try_add_variable('i2.2.2.2', tmp35)
										except ValueError:
											pass
										else:
											# State 6963
											if len(subjects14) == 0:
												# State 6964
												if len(subjects2) >= 1:
													tmp37 = subjects2.popleft()
													subst4 = Substitution(subst3)
													try:
														subst4.try_add_variable('i2.2.2', tmp37)
													except ValueError:
														pass
													else:
														# State 6965
														if len(subjects2) == 0:
															# State 6966
															if len(subjects) == 0:
																# 1: (d*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147)
																yield 1, subst4
													subjects2.appendleft(tmp37)
										if len(subjects14) == 0:
											break
										tmp34.append(subjects14.popleft())
									subjects14.extendleft(reversed(tmp34))
						subjects14.appendleft(tmp31)
					subjects2.appendleft(tmp13)
			if len(subjects2) >= 1:
				tmp39 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1', tmp39)
				except ValueError:
					pass
				else:
					# State 8704
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2', 1)
					except ValueError:
						pass
					else:
						# State 8705
						if len(subjects2) == 0:
							# State 8706
							if len(subjects) == 0:
								# 2: v**m /; (cons_f21) and (cons_f10)
								yield 2, subst2
								# 5: v**m /; (cons_f21) and (cons_f10) and (cons_f2027) and (cons_f2028)
								yield 5, subst2
					if len(subjects2) >= 1:
						tmp42 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2', tmp42)
						except ValueError:
							pass
						else:
							# State 8705
							if len(subjects2) == 0:
								# State 8706
								if len(subjects) == 0:
									# 2: v**m /; (cons_f21) and (cons_f10)
									yield 2, subst2
									# 5: v**m /; (cons_f21) and (cons_f10) and (cons_f2027) and (cons_f2028)
									yield 5, subst2
						subjects2.appendleft(tmp42)
				subjects2.appendleft(tmp39)
			if len(subjects2) >= 1:
				tmp44 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1_1', tmp44)
				except ValueError:
					pass
				else:
					# State 8709
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8710
						if len(subjects2) == 0:
							# State 8711
							if len(subjects) == 0:
								# 3: w**n /; (cons_f4) and (cons_f2025)
								yield 3, subst2
					if len(subjects2) >= 1:
						tmp47 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2_1', tmp47)
						except ValueError:
							pass
						else:
							# State 8710
							if len(subjects2) == 0:
								# State 8711
								if len(subjects) == 0:
									# 3: w**n /; (cons_f4) and (cons_f2025)
									yield 3, subst2
						subjects2.appendleft(tmp47)
				subjects2.appendleft(tmp44)
			if len(subjects2) >= 1:
				tmp49 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1_2', tmp49)
				except ValueError:
					pass
				else:
					# State 8714
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2_2', 1)
					except ValueError:
						pass
					else:
						# State 8715
						if len(subjects2) == 0:
							# State 8716
							if len(subjects) == 0:
								# 4: z**q /; (cons_f50) and (cons_f2026)
								yield 4, subst2
					if len(subjects2) >= 1:
						tmp52 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2_2', tmp52)
						except ValueError:
							pass
						else:
							# State 8715
							if len(subjects2) == 0:
								# State 8716
								if len(subjects) == 0:
									# 4: z**q /; (cons_f50) and (cons_f2026)
									yield 4, subst2
						subjects2.appendleft(tmp52)
				subjects2.appendleft(tmp49)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2', 1)
		except ValueError:
			pass
		else:
			# State 8702
			if len(subjects) >= 1:
				tmp55 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1', tmp55)
				except ValueError:
					pass
				else:
					# State 8703
					if len(subjects) == 0:
						# 2: v**m /; (cons_f21) and (cons_f10)
						yield 2, subst2
						# 5: v**m /; (cons_f21) and (cons_f10) and (cons_f2027) and (cons_f2028)
						yield 5, subst2
				subjects.appendleft(tmp55)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8707
			if len(subjects) >= 1:
				tmp58 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1_1', tmp58)
				except ValueError:
					pass
				else:
					# State 8708
					if len(subjects) == 0:
						# 3: w**n /; (cons_f4) and (cons_f2025)
						yield 3, subst2
				subjects.appendleft(tmp58)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2_2', 1)
		except ValueError:
			pass
		else:
			# State 8712
			if len(subjects) >= 1:
				tmp61 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1_2', tmp61)
				except ValueError:
					pass
				else:
					# State 8713
					if len(subjects) == 0:
						# 4: z**q /; (cons_f50) and (cons_f2026)
						yield 4, subst2
				subjects.appendleft(tmp61)
		return
		yield


class CommutativeMatcher7896(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7896._instance is None:
			CommutativeMatcher7896._instance = CommutativeMatcher7896()
		return CommutativeMatcher7896._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7895
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 7897
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 7898
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 7899
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7900
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7901
						if len(subjects5) == 0:
							# State 7902
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 7901
							if len(subjects5) == 0:
								# State 7902
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7916(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7916._instance is None:
			CommutativeMatcher7916._instance = CommutativeMatcher7916()
		return CommutativeMatcher7916._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7915
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 7917
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 7918
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 7919
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7920
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7921
						if len(subjects5) == 0:
							# State 7922
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 7921
							if len(subjects5) == 0:
								# State 7922
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7907(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7907._instance is None:
			CommutativeMatcher7907._instance = CommutativeMatcher7907()
		return CommutativeMatcher7907._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7906
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7908
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 7909
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp3)
					except ValueError:
						pass
					else:
						# State 7910
						if len(subjects) == 0:
							# 0: b*x**n
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 7911
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 7912
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 7913
							if len(subjects6) == 0:
								# State 7914
								if len(subjects) == 0:
									# 0: b*x**n
									yield 0, subst3
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 7913
								if len(subjects6) == 0:
									# State 7914
									if len(subjects) == 0:
										# 0: b*x**n
										yield 0, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher7916.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 7923
					if len(subjects) == 0:
						# 0: b*x**n
						yield 0, subst1
			subjects.appendleft(tmp12)
		return
		yield


class CommutativeMatcher8916(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8916._instance is None:
			CommutativeMatcher8916._instance = CommutativeMatcher8916()
		return CommutativeMatcher8916._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8915
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8917
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8918
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8919
							if len(subjects2) == 0:
								# State 8920
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7990(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7990._instance is None:
			CommutativeMatcher7990._instance = CommutativeMatcher7990()
		return CommutativeMatcher7990._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7989
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 7991
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 7992
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 7993
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7994
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7995
						if len(subjects5) == 0:
							# State 7996
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 7995
							if len(subjects5) == 0:
								# State 7996
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8010(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8010._instance is None:
			CommutativeMatcher8010._instance = CommutativeMatcher8010()
		return CommutativeMatcher8010._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8009
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8011
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8012
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8013
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8014
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8015
						if len(subjects5) == 0:
							# State 8016
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8015
							if len(subjects5) == 0:
								# State 8016
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8001(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8001._instance is None:
			CommutativeMatcher8001._instance = CommutativeMatcher8001()
		return CommutativeMatcher8001._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8000
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 8002
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8003
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp3)
					except ValueError:
						pass
					else:
						# State 8004
						if len(subjects) == 0:
							# 0: d*x**n
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 8005
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 8006
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8007
							if len(subjects6) == 0:
								# State 8008
								if len(subjects) == 0:
									# 0: d*x**n
									yield 0, subst3
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 8007
								if len(subjects6) == 0:
									# State 8008
									if len(subjects) == 0:
										# 0: d*x**n
										yield 0, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher8010.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 8017
					if len(subjects) == 0:
						# 0: d*x**n
						yield 0, subst1
			subjects.appendleft(tmp12)
		return
		yield


class CommutativeMatcher7943(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7943._instance is None:
			CommutativeMatcher7943._instance = CommutativeMatcher7943()
		return CommutativeMatcher7943._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7942
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 7944
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 7945
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 7946
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7947
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7948
						if len(subjects5) == 0:
							# State 7949
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 7948
							if len(subjects5) == 0:
								# State 7949
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8034(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8034._instance is None:
			CommutativeMatcher8034._instance = CommutativeMatcher8034()
		return CommutativeMatcher8034._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8033
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8035
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8036
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8037
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8038
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8039
						if len(subjects5) == 0:
							# State 8040
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8039
							if len(subjects5) == 0:
								# State 8040
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7963(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7963._instance is None:
			CommutativeMatcher7963._instance = CommutativeMatcher7963()
		return CommutativeMatcher7963._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7962
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 7964
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 7965
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 7966
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7967
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7968
						if len(subjects5) == 0:
							# State 7969
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 7968
							if len(subjects5) == 0:
								# State 7969
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7954(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7954._instance is None:
			CommutativeMatcher7954._instance = CommutativeMatcher7954()
		return CommutativeMatcher7954._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7953
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7955
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 7956
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp3)
					except ValueError:
						pass
					else:
						# State 7957
						if len(subjects) == 0:
							# 0: b*x**n
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 7958
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 7959
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 7960
							if len(subjects6) == 0:
								# State 7961
								if len(subjects) == 0:
									# 0: b*x**n
									yield 0, subst3
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 7960
								if len(subjects6) == 0:
									# State 7961
									if len(subjects) == 0:
										# 0: b*x**n
										yield 0, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 8044
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8045
				if len(subjects) >= 1:
					tmp14 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp14)
					except ValueError:
						pass
					else:
						# State 8046
						if len(subjects) == 0:
							# 1: d*x**n
							yield 1, subst3
					subjects.appendleft(tmp14)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp16 = subjects.popleft()
				subjects17 = deque(op_iter(tmp16))
				# State 8047
				if len(subjects17) >= 1:
					tmp18 = subjects17.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp18)
					except ValueError:
						pass
					else:
						# State 8048
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8049
							if len(subjects17) == 0:
								# State 8050
								if len(subjects) == 0:
									# 1: d*x**n
									yield 1, subst3
						if len(subjects17) >= 1:
							tmp21 = subjects17.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp21)
							except ValueError:
								pass
							else:
								# State 8049
								if len(subjects17) == 0:
									# State 8050
									if len(subjects) == 0:
										# 1: d*x**n
										yield 1, subst3
							subjects17.appendleft(tmp21)
					subjects17.appendleft(tmp18)
				subjects.appendleft(tmp16)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp23 = subjects.popleft()
			associative1 = tmp23
			associative_type1 = type(tmp23)
			subjects24 = deque(op_iter(tmp23))
			matcher = CommutativeMatcher7963.get()
			tmp25 = subjects24
			subjects24 = []
			for s in tmp25:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp25, subst0):
				if pattern_index == 0:
					# State 7970
					if len(subjects) == 0:
						# 0: b*x**n
						yield 0, subst1
				if pattern_index == 1:
					# State 8051
					if len(subjects) == 0:
						# 1: d*x**n
						yield 1, subst1
			subjects.appendleft(tmp23)
		return
		yield


class CommutativeMatcher8932(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8932._instance is None:
			CommutativeMatcher8932._instance = CommutativeMatcher8932()
		return CommutativeMatcher8932._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8931
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8933
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8934
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8935
							if len(subjects2) == 0:
								# State 8936
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7928(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({3: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({4: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    5: (5, Multiset({2: 1, 5: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    6: (6, Multiset({6: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    7: (7, Multiset({7: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    8: (8, Multiset({8: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7928._instance is None:
			CommutativeMatcher7928._instance = CommutativeMatcher7928()
		return CommutativeMatcher7928._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7927
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7929
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7930
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 7931
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 7932
						if len(subjects2) >= 1:
							tmp6 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.2.1.1', tmp6)
							except ValueError:
								pass
							else:
								# State 7933
								if len(subjects2) >= 1 and subjects2[0] == 1/2:
									tmp8 = subjects2.popleft()
									# State 7934
									if len(subjects2) == 0:
										# State 7935
										if len(subjects) == 0:
											# 0: sqrt(a + b*x**n)
											yield 0, subst4
									subjects2.appendleft(tmp8)
							subjects2.appendleft(tmp6)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp9 = subjects2.popleft()
						subjects10 = deque(op_iter(tmp9))
						# State 7936
						if len(subjects10) >= 1:
							tmp11 = subjects10.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.1', tmp11)
							except ValueError:
								pass
							else:
								# State 7937
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 7938
									if len(subjects10) == 0:
										# State 7939
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp14 = subjects2.popleft()
											# State 7940
											if len(subjects2) == 0:
												# State 7941
												if len(subjects) == 0:
													# 0: sqrt(a + b*x**n)
													yield 0, subst4
											subjects2.appendleft(tmp14)
								if len(subjects10) >= 1:
									tmp15 = subjects10.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.1.2', tmp15)
									except ValueError:
										pass
									else:
										# State 7938
										if len(subjects10) == 0:
											# State 7939
											if len(subjects2) >= 1 and subjects2[0] == 1/2:
												tmp17 = subjects2.popleft()
												# State 7940
												if len(subjects2) == 0:
													# State 7941
													if len(subjects) == 0:
														# 0: sqrt(a + b*x**n)
														yield 0, subst4
												subjects2.appendleft(tmp17)
									subjects10.appendleft(tmp15)
							subjects10.appendleft(tmp11)
						subjects2.appendleft(tmp9)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp18 = subjects2.popleft()
					associative1 = tmp18
					associative_type1 = type(tmp18)
					subjects19 = deque(op_iter(tmp18))
					matcher = CommutativeMatcher7943.get()
					tmp20 = subjects19
					subjects19 = []
					for s in tmp20:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp20, subst1):
						if pattern_index == 0:
							# State 7950
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp21 = subjects2.popleft()
								# State 7951
								if len(subjects2) == 0:
									# State 7952
									if len(subjects) == 0:
										# 0: sqrt(a + b*x**n)
										yield 0, subst2
								subjects2.appendleft(tmp21)
					subjects2.appendleft(tmp18)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 8021
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 8022
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8023
						if len(subjects2) >= 1:
							tmp25 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.2.1.1', tmp25)
							except ValueError:
								pass
							else:
								# State 8024
								if len(subjects2) >= 1 and subjects2[0] == 1/2:
									tmp27 = subjects2.popleft()
									# State 8025
									if len(subjects2) == 0:
										# State 8026
										if len(subjects) == 0:
											# 1: sqrt(c + d*x**n)
											yield 1, subst4
									subjects2.appendleft(tmp27)
							subjects2.appendleft(tmp25)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp28 = subjects2.popleft()
						subjects29 = deque(op_iter(tmp28))
						# State 8027
						if len(subjects29) >= 1:
							tmp30 = subjects29.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.1', tmp30)
							except ValueError:
								pass
							else:
								# State 8028
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 8029
									if len(subjects29) == 0:
										# State 8030
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp33 = subjects2.popleft()
											# State 8031
											if len(subjects2) == 0:
												# State 8032
												if len(subjects) == 0:
													# 1: sqrt(c + d*x**n)
													yield 1, subst4
											subjects2.appendleft(tmp33)
								if len(subjects29) >= 1:
									tmp34 = subjects29.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.1.2', tmp34)
									except ValueError:
										pass
									else:
										# State 8029
										if len(subjects29) == 0:
											# State 8030
											if len(subjects2) >= 1 and subjects2[0] == 1/2:
												tmp36 = subjects2.popleft()
												# State 8031
												if len(subjects2) == 0:
													# State 8032
													if len(subjects) == 0:
														# 1: sqrt(c + d*x**n)
														yield 1, subst4
												subjects2.appendleft(tmp36)
									subjects29.appendleft(tmp34)
							subjects29.appendleft(tmp30)
						subjects2.appendleft(tmp28)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp37 = subjects2.popleft()
					associative1 = tmp37
					associative_type1 = type(tmp37)
					subjects38 = deque(op_iter(tmp37))
					matcher = CommutativeMatcher8034.get()
					tmp39 = subjects38
					subjects38 = []
					for s in tmp39:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp39, subst1):
						if pattern_index == 0:
							# State 8041
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp40 = subjects2.popleft()
								# State 8042
								if len(subjects2) == 0:
									# State 8043
									if len(subjects) == 0:
										# 1: sqrt(c + d*x**n)
										yield 1, subst2
								subjects2.appendleft(tmp40)
					subjects2.appendleft(tmp37)
			if len(subjects2) >= 1:
				tmp41 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp41)
				except ValueError:
					pass
				else:
					# State 8373
					if len(subjects2) >= 1:
						tmp43 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp43)
						except ValueError:
							pass
						else:
							# State 8374
							if len(subjects2) == 0:
								# State 8375
								if len(subjects) == 0:
									# 2: u**n
									yield 2, subst2
						subjects2.appendleft(tmp43)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8421
						if len(subjects2) == 0:
							# State 8422
							if len(subjects) == 0:
								# 3: v**m
								yield 3, subst2
					if len(subjects2) >= 1:
						tmp46 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp46)
						except ValueError:
							pass
						else:
							# State 8421
							if len(subjects2) == 0:
								# State 8422
								if len(subjects) == 0:
									# 3: v**m
									yield 3, subst2
						subjects2.appendleft(tmp46)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8856
						if len(subjects2) == 0:
							# State 8857
							if len(subjects) == 0:
								# 6: v**n
								yield 6, subst2
					if len(subjects2) >= 1:
						tmp49 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp49)
						except ValueError:
							pass
						else:
							# State 8856
							if len(subjects2) == 0:
								# State 8857
								if len(subjects) == 0:
									# 6: v**n
									yield 6, subst2
						subjects2.appendleft(tmp49)
				subjects2.appendleft(tmp41)
			if len(subjects2) >= 1:
				tmp51 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp51)
				except ValueError:
					pass
				else:
					# State 8427
					if len(subjects2) >= 1:
						tmp53 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp53)
						except ValueError:
							pass
						else:
							# State 8428
							if len(subjects2) == 0:
								# State 8429
								if len(subjects) == 0:
									# 4: y**n
									yield 4, subst2
						subjects2.appendleft(tmp53)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8827
						if len(subjects2) == 0:
							# State 8828
							if len(subjects) == 0:
								# 5: w**n2
								yield 5, subst2
					if len(subjects2) >= 1:
						tmp56 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp56)
						except ValueError:
							pass
						else:
							# State 8827
							if len(subjects2) == 0:
								# State 8828
								if len(subjects) == 0:
									# 5: w**n2
									yield 5, subst2
						subjects2.appendleft(tmp56)
				subjects2.appendleft(tmp51)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 1)
			except ValueError:
				pass
			else:
				# State 8924
				if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
					tmp59 = subjects2.popleft()
					subjects60 = deque(op_iter(tmp59))
					# State 8925
					if len(subjects60) >= 1:
						tmp61 = subjects60.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1', tmp61)
						except ValueError:
							pass
						else:
							# State 8926
							if len(subjects60) >= 1:
								tmp63 = subjects60.popleft()
								subst3 = Substitution(subst2)
								try:
									subst3.try_add_variable('i2.2.1.2.2', tmp63)
								except ValueError:
									pass
								else:
									# State 8927
									if len(subjects60) == 0:
										# State 8928
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp65 = subjects2.popleft()
											# State 8929
											if len(subjects2) == 0:
												# State 8930
												if len(subjects) == 0:
													# 7: sqrt(c*x**n)
													yield 7, subst3
											subjects2.appendleft(tmp65)
								subjects60.appendleft(tmp63)
						subjects60.appendleft(tmp61)
					subjects2.appendleft(tmp59)
			if len(subjects2) >= 1:
				tmp66 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp66)
				except ValueError:
					pass
				else:
					# State 8947
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8948
						if len(subjects2) == 0:
							# State 8949
							if len(subjects) == 0:
								# 8: x**m
								yield 8, subst2
					if len(subjects2) >= 1:
						tmp69 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp69)
						except ValueError:
							pass
						else:
							# State 8948
							if len(subjects2) == 0:
								# State 8949
								if len(subjects) == 0:
									# 8: x**m
									yield 8, subst2
						subjects2.appendleft(tmp69)
				subjects2.appendleft(tmp66)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp71 = subjects2.popleft()
				associative1 = tmp71
				associative_type1 = type(tmp71)
				subjects72 = deque(op_iter(tmp71))
				matcher = CommutativeMatcher7954.get()
				tmp73 = subjects72
				subjects72 = []
				for s in tmp73:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp73, subst0):
					if pattern_index == 0:
						# State 7971
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp74 = subjects2.popleft()
							# State 7972
							if len(subjects2) == 0:
								# State 7973
								if len(subjects) == 0:
									# 0: sqrt(a + b*x**n)
									yield 0, subst1
							subjects2.appendleft(tmp74)
					if pattern_index == 1:
						# State 8052
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp75 = subjects2.popleft()
							# State 8053
							if len(subjects2) == 0:
								# State 8054
								if len(subjects) == 0:
									# 1: sqrt(c + d*x**n)
									yield 1, subst1
							subjects2.appendleft(tmp75)
				subjects2.appendleft(tmp71)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
				tmp76 = subjects2.popleft()
				associative1 = tmp76
				associative_type1 = type(tmp76)
				subjects77 = deque(op_iter(tmp76))
				matcher = CommutativeMatcher8932.get()
				tmp78 = subjects77
				subjects77 = []
				for s in tmp78:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp78, subst0):
					if pattern_index == 0:
						# State 8937
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp79 = subjects2.popleft()
							# State 8938
							if len(subjects2) == 0:
								# State 8939
								if len(subjects) == 0:
									# 7: sqrt(c*x**n)
									yield 7, subst1
							subjects2.appendleft(tmp79)
				subjects2.appendleft(tmp76)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8419
			if len(subjects) >= 1:
				tmp81 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp81)
				except ValueError:
					pass
				else:
					# State 8420
					if len(subjects) == 0:
						# 3: v**m
						yield 3, subst2
				subjects.appendleft(tmp81)
			if len(subjects) >= 1:
				tmp83 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1', tmp83)
				except ValueError:
					pass
				else:
					# State 8946
					if len(subjects) == 0:
						# 8: x**m
						yield 8, subst2
				subjects.appendleft(tmp83)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8825
			if len(subjects) >= 1:
				tmp86 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp86)
				except ValueError:
					pass
				else:
					# State 8826
					if len(subjects) == 0:
						# 5: w**n2
						yield 5, subst2
				subjects.appendleft(tmp86)
			if len(subjects) >= 1:
				tmp88 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp88)
				except ValueError:
					pass
				else:
					# State 8855
					if len(subjects) == 0:
						# 6: v**n
						yield 6, subst2
				subjects.appendleft(tmp88)
		return
		yield


class CommutativeMatcher7880(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      
]),
    2: (2, Multiset({4: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    3: (3, Multiset({5: 1, 6: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    4: (4, Multiset({7: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    5: (5, Multiset({8: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    6: (6, Multiset({9: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    7: (7, Multiset({10: 1, 11: 1}), [
      
]),
    8: (8, Multiset({12: 1, 13: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7880._instance is None:
			CommutativeMatcher7880._instance = CommutativeMatcher7880()
		return CommutativeMatcher7880._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7879
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7881
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp2 = subjects.popleft()
				subjects3 = deque(op_iter(tmp2))
				# State 7882
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0', 0)
				except ValueError:
					pass
				else:
					# State 7883
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.0', 1)
					except ValueError:
						pass
					else:
						# State 7884
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 7885
							if len(subjects3) >= 1:
								tmp7 = subjects3.popleft()
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2.1.1', tmp7)
								except ValueError:
									pass
								else:
									# State 7886
									if len(subjects3) >= 1 and subjects3[0] == 1/2:
										tmp9 = subjects3.popleft()
										# State 7887
										if len(subjects3) == 0:
											# State 7888
											if len(subjects) == 0:
												# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
												yield 0, subst5
												# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
												yield 2, subst5
										subjects3.appendleft(tmp9)
								subjects3.appendleft(tmp7)
						if len(subjects3) >= 1 and isinstance(subjects3[0], Pow):
							tmp10 = subjects3.popleft()
							subjects11 = deque(op_iter(tmp10))
							# State 7889
							if len(subjects11) >= 1:
								tmp12 = subjects11.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.1', tmp12)
								except ValueError:
									pass
								else:
									# State 7890
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2.1.2', 1)
									except ValueError:
										pass
									else:
										# State 7891
										if len(subjects11) == 0:
											# State 7892
											if len(subjects3) >= 1 and subjects3[0] == 1/2:
												tmp15 = subjects3.popleft()
												# State 7893
												if len(subjects3) == 0:
													# State 7894
													if len(subjects) == 0:
														# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
														yield 0, subst5
														# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
														yield 2, subst5
												subjects3.appendleft(tmp15)
									if len(subjects11) >= 1:
										tmp16 = subjects11.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.1.2.1.2', tmp16)
										except ValueError:
											pass
										else:
											# State 7891
											if len(subjects11) == 0:
												# State 7892
												if len(subjects3) >= 1 and subjects3[0] == 1/2:
													tmp18 = subjects3.popleft()
													# State 7893
													if len(subjects3) == 0:
														# State 7894
														if len(subjects) == 0:
															# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
															yield 0, subst5
															# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
															yield 2, subst5
													subjects3.appendleft(tmp18)
										subjects11.appendleft(tmp16)
								subjects11.appendleft(tmp12)
							subjects3.appendleft(tmp10)
					if len(subjects3) >= 1 and isinstance(subjects3[0], Mul):
						tmp19 = subjects3.popleft()
						associative1 = tmp19
						associative_type1 = type(tmp19)
						subjects20 = deque(op_iter(tmp19))
						matcher = CommutativeMatcher7896.get()
						tmp21 = subjects20
						subjects20 = []
						for s in tmp21:
							matcher.add_subject(s)
						for pattern_index, subst3 in matcher.match(tmp21, subst2):
							if pattern_index == 0:
								# State 7903
								if len(subjects3) >= 1 and subjects3[0] == 1/2:
									tmp22 = subjects3.popleft()
									# State 7904
									if len(subjects3) == 0:
										# State 7905
										if len(subjects) == 0:
											# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
											yield 0, subst3
											# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
											yield 2, subst3
									subjects3.appendleft(tmp22)
						subjects3.appendleft(tmp19)
				if len(subjects3) >= 1:
					tmp23 = subjects3.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp23)
					except ValueError:
						pass
					else:
						# State 8370
						if len(subjects3) >= 1:
							tmp25 = subjects3.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp25)
							except ValueError:
								pass
							else:
								# State 8371
								if len(subjects3) == 0:
									# State 8372
									if len(subjects) == 0:
										# 8: a*u**n /; (cons_f3) and (cons_f196) and (cons_f840) and (cons_f2030)
										yield 8, subst3
										# 4: a*u**n /; (cons_f3) and (cons_f4) and (cons_f1244) and (With6950)
										yield 4, subst3
										# 7: a*u**n /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f196) and (cons_f2029)
										yield 7, subst3
							subjects3.appendleft(tmp25)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8417
							if len(subjects3) == 0:
								# State 8418
								if len(subjects) == 0:
									# 10: a*v**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
									yield 10, subst3
									# 5: c*v**m /; (cons_f7) and (cons_f46) and (cons_f2009) and (With6952)
									yield 5, subst3
						if len(subjects3) >= 1:
							tmp28 = subjects3.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp28)
							except ValueError:
								pass
							else:
								# State 8417
								if len(subjects3) == 0:
									# State 8418
									if len(subjects) == 0:
										# 10: a*v**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
										yield 10, subst3
										# 5: c*v**m /; (cons_f7) and (cons_f46) and (cons_f2009) and (With6952)
										yield 5, subst3
							subjects3.appendleft(tmp28)
					subjects3.appendleft(tmp23)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0', 1)
				except ValueError:
					pass
				else:
					# State 8908
					if len(subjects3) >= 1 and isinstance(subjects3[0], Pow):
						tmp31 = subjects3.popleft()
						subjects32 = deque(op_iter(tmp31))
						# State 8909
						if len(subjects32) >= 1:
							tmp33 = subjects32.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1', tmp33)
							except ValueError:
								pass
							else:
								# State 8910
								if len(subjects32) >= 1:
									tmp35 = subjects32.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.2', tmp35)
									except ValueError:
										pass
									else:
										# State 8911
										if len(subjects32) == 0:
											# State 8912
											if len(subjects3) >= 1 and subjects3[0] == 1/2:
												tmp37 = subjects3.popleft()
												# State 8913
												if len(subjects3) == 0:
													# State 8914
													if len(subjects) == 0:
														# 12: b*sqrt(c*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
														yield 12, subst4
												subjects3.appendleft(tmp37)
									subjects32.appendleft(tmp35)
							subjects32.appendleft(tmp33)
						subjects3.appendleft(tmp31)
				if len(subjects3) >= 1 and isinstance(subjects3[0], Add):
					tmp38 = subjects3.popleft()
					associative1 = tmp38
					associative_type1 = type(tmp38)
					subjects39 = deque(op_iter(tmp38))
					matcher = CommutativeMatcher7907.get()
					tmp40 = subjects39
					subjects39 = []
					for s in tmp40:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp40, subst1):
						if pattern_index == 0:
							# State 7924
							if len(subjects3) >= 1 and subjects3[0] == 1/2:
								tmp41 = subjects3.popleft()
								# State 7925
								if len(subjects3) == 0:
									# State 7926
									if len(subjects) == 0:
										# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
										yield 0, subst2
										# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
										yield 2, subst2
								subjects3.appendleft(tmp41)
					subjects3.appendleft(tmp38)
				if len(subjects3) >= 1 and isinstance(subjects3[0], Mul):
					tmp42 = subjects3.popleft()
					associative1 = tmp42
					associative_type1 = type(tmp42)
					subjects43 = deque(op_iter(tmp42))
					matcher = CommutativeMatcher8916.get()
					tmp44 = subjects43
					subjects43 = []
					for s in tmp44:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp44, subst1):
						if pattern_index == 0:
							# State 8921
							if len(subjects3) >= 1 and subjects3[0] == 1/2:
								tmp45 = subjects3.popleft()
								# State 8922
								if len(subjects3) == 0:
									# State 8923
									if len(subjects) == 0:
										# 12: b*sqrt(c*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
										yield 12, subst2
								subjects3.appendleft(tmp45)
					subjects3.appendleft(tmp42)
				subjects.appendleft(tmp2)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8415
				if len(subjects) >= 1:
					tmp47 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp47)
					except ValueError:
						pass
					else:
						# State 8416
						if len(subjects) == 0:
							# 10: a*v**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
							yield 10, subst3
							# 5: c*v**m /; (cons_f7) and (cons_f46) and (cons_f2009) and (With6952)
							yield 5, subst3
					subjects.appendleft(tmp47)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7975
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp50 = subjects.popleft()
				subjects51 = deque(op_iter(tmp50))
				# State 7976
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0_1', 0)
				except ValueError:
					pass
				else:
					# State 7977
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.0_1', 1)
					except ValueError:
						pass
					else:
						# State 7978
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 7979
							if len(subjects51) >= 1:
								tmp55 = subjects51.popleft()
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2.1.1', tmp55)
								except ValueError:
									pass
								else:
									# State 7980
									if len(subjects51) >= 1 and subjects51[0] == 1/2:
										tmp57 = subjects51.popleft()
										# State 7981
										if len(subjects51) == 0:
											# State 7982
											if len(subjects) == 0:
												# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
												yield 1, subst5
												# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
												yield 3, subst5
										subjects51.appendleft(tmp57)
								subjects51.appendleft(tmp55)
						if len(subjects51) >= 1 and isinstance(subjects51[0], Pow):
							tmp58 = subjects51.popleft()
							subjects59 = deque(op_iter(tmp58))
							# State 7983
							if len(subjects59) >= 1:
								tmp60 = subjects59.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.1', tmp60)
								except ValueError:
									pass
								else:
									# State 7984
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2.1.2', 1)
									except ValueError:
										pass
									else:
										# State 7985
										if len(subjects59) == 0:
											# State 7986
											if len(subjects51) >= 1 and subjects51[0] == 1/2:
												tmp63 = subjects51.popleft()
												# State 7987
												if len(subjects51) == 0:
													# State 7988
													if len(subjects) == 0:
														# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
														yield 1, subst5
														# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
														yield 3, subst5
												subjects51.appendleft(tmp63)
									if len(subjects59) >= 1:
										tmp64 = subjects59.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.1.2.1.2', tmp64)
										except ValueError:
											pass
										else:
											# State 7985
											if len(subjects59) == 0:
												# State 7986
												if len(subjects51) >= 1 and subjects51[0] == 1/2:
													tmp66 = subjects51.popleft()
													# State 7987
													if len(subjects51) == 0:
														# State 7988
														if len(subjects) == 0:
															# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
															yield 1, subst5
															# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
															yield 3, subst5
													subjects51.appendleft(tmp66)
										subjects59.appendleft(tmp64)
								subjects59.appendleft(tmp60)
							subjects51.appendleft(tmp58)
					if len(subjects51) >= 1 and isinstance(subjects51[0], Mul):
						tmp67 = subjects51.popleft()
						associative1 = tmp67
						associative_type1 = type(tmp67)
						subjects68 = deque(op_iter(tmp67))
						matcher = CommutativeMatcher7990.get()
						tmp69 = subjects68
						subjects68 = []
						for s in tmp69:
							matcher.add_subject(s)
						for pattern_index, subst3 in matcher.match(tmp69, subst2):
							if pattern_index == 0:
								# State 7997
								if len(subjects51) >= 1 and subjects51[0] == 1/2:
									tmp70 = subjects51.popleft()
									# State 7998
									if len(subjects51) == 0:
										# State 7999
										if len(subjects) == 0:
											# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
											yield 1, subst3
											# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
											yield 3, subst3
									subjects51.appendleft(tmp70)
						subjects51.appendleft(tmp67)
				if len(subjects51) >= 1:
					tmp71 = subjects51.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_1', tmp71)
					except ValueError:
						pass
					else:
						# State 8424
						if len(subjects51) >= 1:
							tmp73 = subjects51.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp73)
							except ValueError:
								pass
							else:
								# State 8425
								if len(subjects51) == 0:
									# State 8426
									if len(subjects) == 0:
										# 6: b*y**n /; (cons_f3) and (cons_f4) and (cons_f46) and (cons_f2009) and (With6952)
										yield 6, subst3
							subjects51.appendleft(tmp73)
					subjects51.appendleft(tmp71)
				if len(subjects51) >= 1:
					tmp75 = subjects51.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp75)
					except ValueError:
						pass
					else:
						# State 8852
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8853
							if len(subjects51) == 0:
								# State 8854
								if len(subjects) == 0:
									# 11: b*v**n /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
									yield 11, subst3
						if len(subjects51) >= 1:
							tmp78 = subjects51.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp78)
							except ValueError:
								pass
							else:
								# State 8853
								if len(subjects51) == 0:
									# State 8854
									if len(subjects) == 0:
										# 11: b*v**n /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
										yield 11, subst3
							subjects51.appendleft(tmp78)
					subjects51.appendleft(tmp75)
				if len(subjects51) >= 1:
					tmp80 = subjects51.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1', tmp80)
					except ValueError:
						pass
					else:
						# State 8943
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8944
							if len(subjects51) == 0:
								# State 8945
								if len(subjects) == 0:
									# 13: a*x**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
									yield 13, subst3
						if len(subjects51) >= 1:
							tmp83 = subjects51.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp83)
							except ValueError:
								pass
							else:
								# State 8944
								if len(subjects51) == 0:
									# State 8945
									if len(subjects) == 0:
										# 13: a*x**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
										yield 13, subst3
							subjects51.appendleft(tmp83)
					subjects51.appendleft(tmp80)
				if len(subjects51) >= 1 and isinstance(subjects51[0], Add):
					tmp85 = subjects51.popleft()
					associative1 = tmp85
					associative_type1 = type(tmp85)
					subjects86 = deque(op_iter(tmp85))
					matcher = CommutativeMatcher8001.get()
					tmp87 = subjects86
					subjects86 = []
					for s in tmp87:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp87, subst1):
						if pattern_index == 0:
							# State 8018
							if len(subjects51) >= 1 and subjects51[0] == 1/2:
								tmp88 = subjects51.popleft()
								# State 8019
								if len(subjects51) == 0:
									# State 8020
									if len(subjects) == 0:
										# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
										yield 1, subst2
										# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
										yield 3, subst2
								subjects51.appendleft(tmp88)
					subjects51.appendleft(tmp85)
				subjects.appendleft(tmp50)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2_1', 1)
			except ValueError:
				pass
			else:
				# State 8850
				if len(subjects) >= 1:
					tmp90 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp90)
					except ValueError:
						pass
					else:
						# State 8851
						if len(subjects) == 0:
							# 11: b*v**n /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
							yield 11, subst3
					subjects.appendleft(tmp90)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8941
				if len(subjects) >= 1:
					tmp93 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1', tmp93)
					except ValueError:
						pass
					else:
						# State 8942
						if len(subjects) == 0:
							# 13: a*x**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
							yield 13, subst3
					subjects.appendleft(tmp93)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp95 = subjects.popleft()
			associative1 = tmp95
			associative_type1 = type(tmp95)
			subjects96 = deque(op_iter(tmp95))
			matcher = CommutativeMatcher7928.get()
			tmp97 = subjects96
			subjects96 = []
			for s in tmp97:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp97, subst0):
				if pattern_index == 0:
					# State 7974
					if len(subjects) == 0:
						# 0: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
						yield 0, subst1
						# 2: e*sqrt(a + b*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
						yield 2, subst1
				if pattern_index == 1:
					# State 8055
					if len(subjects) == 0:
						# 1: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1037)
						yield 1, subst1
						# 3: f*sqrt(c + d*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f1036)
						yield 3, subst1
				if pattern_index == 2:
					# State 8376
					if len(subjects) == 0:
						# 8: a*u**n /; (cons_f3) and (cons_f196) and (cons_f840) and (cons_f2030)
						yield 8, subst1
						# 4: a*u**n /; (cons_f3) and (cons_f4) and (cons_f1244) and (With6950)
						yield 4, subst1
						# 7: a*u**n /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f196) and (cons_f2029)
						yield 7, subst1
				if pattern_index == 3:
					# State 8423
					if len(subjects) == 0:
						# 10: a*v**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
						yield 10, subst1
						# 5: c*v**m /; (cons_f7) and (cons_f46) and (cons_f2009) and (With6952)
						yield 5, subst1
				if pattern_index == 4:
					# State 8430
					if len(subjects) == 0:
						# 6: b*y**n /; (cons_f3) and (cons_f4) and (cons_f46) and (cons_f2009) and (With6952)
						yield 6, subst1
				if pattern_index == 5:
					# State 8829
					if len(subjects) == 0:
						# 9: b*u**n*w**n2 /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f196) and (cons_f840)
						yield 9, subst1
				if pattern_index == 6:
					# State 8858
					if len(subjects) == 0:
						# 11: b*v**n /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f2031) and (With6978)
						yield 11, subst1
				if pattern_index == 7:
					# State 8940
					if len(subjects) == 0:
						# 12: b*sqrt(c*x**n) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
						yield 12, subst1
				if pattern_index == 8:
					# State 8950
					if len(subjects) == 0:
						# 13: a*x**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
						yield 13, subst1
			subjects.appendleft(tmp95)
		return
		yield


class CommutativeMatcher8327(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8327._instance is None:
			CommutativeMatcher8327._instance = CommutativeMatcher8327()
		return CommutativeMatcher8327._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8326
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8328
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.1.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8329
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.1.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8330
							if len(subjects2) == 0:
								# State 8331
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher8320(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, None), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 0
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8320._instance is None:
			CommutativeMatcher8320._instance = CommutativeMatcher8320()
		return CommutativeMatcher8320._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8319
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.1.1.0', 1)
		except ValueError:
			pass
		else:
			# State 8321
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp2 = subjects.popleft()
				subjects3 = deque(op_iter(tmp2))
				# State 8322
				if len(subjects3) >= 1:
					tmp4 = subjects3.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.1.1.1', tmp4)
					except ValueError:
						pass
					else:
						# State 8323
						if len(subjects3) >= 1:
							tmp6 = subjects3.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.1.1.2', tmp6)
							except ValueError:
								pass
							else:
								# State 8324
								if len(subjects3) == 0:
									# State 8325
									if len(subjects) == 0:
										# 0: b*y**n /; (cons_f3) and (cons_f4) and (cons_f1831) and (With6949)
										yield 0, subst3
							subjects3.appendleft(tmp6)
					subjects3.appendleft(tmp4)
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher8327.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 8332
					if len(subjects) == 0:
						# 0: b*y**n /; (cons_f3) and (cons_f4) and (cons_f1831) and (With6949)
						yield 0, subst1
			subjects.appendleft(tmp8)
		return
		yield


class CommutativeMatcher8155(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8155._instance is None:
			CommutativeMatcher8155._instance = CommutativeMatcher8155()
		return CommutativeMatcher8155._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8154
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8156
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8157
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8158
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8159
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8160
						if len(subjects5) == 0:
							# State 8161
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8160
							if len(subjects5) == 0:
								# State 8161
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8175(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8175._instance is None:
			CommutativeMatcher8175._instance = CommutativeMatcher8175()
		return CommutativeMatcher8175._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8174
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8176
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8177
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8178
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8179
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8180
						if len(subjects5) == 0:
							# State 8181
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8180
							if len(subjects5) == 0:
								# State 8181
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8166(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8166._instance is None:
			CommutativeMatcher8166._instance = CommutativeMatcher8166()
		return CommutativeMatcher8166._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8165
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 8167
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8168
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp3)
					except ValueError:
						pass
					else:
						# State 8169
						if len(subjects) == 0:
							# 0: d*x**n
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 8170
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 8171
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8172
							if len(subjects6) == 0:
								# State 8173
								if len(subjects) == 0:
									# 0: d*x**n
									yield 0, subst3
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 8172
								if len(subjects6) == 0:
									# State 8173
									if len(subjects) == 0:
										# 0: d*x**n
										yield 0, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher8175.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 8182
					if len(subjects) == 0:
						# 0: d*x**n
						yield 0, subst1
			subjects.appendleft(tmp12)
		return
		yield


class CommutativeMatcher7656(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7656._instance is None:
			CommutativeMatcher7656._instance = CommutativeMatcher7656()
		return CommutativeMatcher7656._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7655
		return
		yield


class CommutativeMatcher7676(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7676._instance is None:
			CommutativeMatcher7676._instance = CommutativeMatcher7676()
		return CommutativeMatcher7676._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7675
		return
		yield


class CommutativeMatcher7665(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7665._instance is None:
			CommutativeMatcher7665._instance = CommutativeMatcher7665()
		return CommutativeMatcher7665._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7664
		return
		yield


class CommutativeMatcher7661(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7661._instance is None:
			CommutativeMatcher7661._instance = CommutativeMatcher7661()
		return CommutativeMatcher7661._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7660
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7662
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7663
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7680
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7681
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7665.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7666
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7682
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7811
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7648(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7648._instance is None:
			CommutativeMatcher7648._instance = CommutativeMatcher7648()
		return CommutativeMatcher7648._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7647
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7649
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7650
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7651
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7652
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7653
								if len(subjects2) == 0:
									# State 7654
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7656.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7657
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7658
								if len(subjects2) == 0:
									# State 7659
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7670
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7671
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7672
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7673
								if len(subjects2) == 0:
									# State 7674
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7676.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7677
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7678
								if len(subjects2) == 0:
									# State 7679
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7661.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7667
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7668
							if len(subjects2) == 0:
								# State 7669
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7683
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7684
							if len(subjects2) == 0:
								# State 7685
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7812
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7813
							if len(subjects2) == 0:
								# State 7814
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7815
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7816
							if len(subjects2) == 0:
								# State 7817
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher8074(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8074._instance is None:
			CommutativeMatcher8074._instance = CommutativeMatcher8074()
		return CommutativeMatcher8074._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8073
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8075
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8076
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8077
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8078
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8079
						if len(subjects5) == 0:
							# State 8080
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8079
							if len(subjects5) == 0:
								# State 8080
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8094(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8094._instance is None:
			CommutativeMatcher8094._instance = CommutativeMatcher8094()
		return CommutativeMatcher8094._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8093
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8095
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8096
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8097
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8098
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8099
						if len(subjects5) == 0:
							# State 8100
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8099
							if len(subjects5) == 0:
								# State 8100
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher8085(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8085._instance is None:
			CommutativeMatcher8085._instance = CommutativeMatcher8085()
		return CommutativeMatcher8085._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8084
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 8086
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8087
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp3)
					except ValueError:
						pass
					else:
						# State 8088
						if len(subjects) == 0:
							# 0: b*x**n
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp5 = subjects.popleft()
				subjects6 = deque(op_iter(tmp5))
				# State 8089
				if len(subjects6) >= 1:
					tmp7 = subjects6.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 8090
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8091
							if len(subjects6) == 0:
								# State 8092
								if len(subjects) == 0:
									# 0: b*x**n
									yield 0, subst3
						if len(subjects6) >= 1:
							tmp10 = subjects6.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 8091
								if len(subjects6) == 0:
									# State 8092
									if len(subjects) == 0:
										# 0: b*x**n
										yield 0, subst3
							subjects6.appendleft(tmp10)
					subjects6.appendleft(tmp7)
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher8094.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 8101
					if len(subjects) == 0:
						# 0: b*x**n
						yield 0, subst1
			subjects.appendleft(tmp12)
		return
		yield


class CommutativeMatcher8964(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8964._instance is None:
			CommutativeMatcher8964._instance = CommutativeMatcher8964()
		return CommutativeMatcher8964._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8963
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8965
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8966
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8967
							if len(subjects2) == 0:
								# State 8968
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7238(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7238._instance is None:
			CommutativeMatcher7238._instance = CommutativeMatcher7238()
		return CommutativeMatcher7238._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7237
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8116
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8117
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8118
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8119
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8120
						if len(subjects5) == 0:
							# State 8121
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8120
							if len(subjects5) == 0:
								# State 8121
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7258(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7258._instance is None:
			CommutativeMatcher7258._instance = CommutativeMatcher7258()
		return CommutativeMatcher7258._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7257
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8197
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8198
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8199
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8200
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8201
						if len(subjects5) == 0:
							# State 8202
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8201
							if len(subjects5) == 0:
								# State 8202
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7697(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7697._instance is None:
			CommutativeMatcher7697._instance = CommutativeMatcher7697()
		return CommutativeMatcher7697._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7696
		return
		yield


class CommutativeMatcher7717(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7717._instance is None:
			CommutativeMatcher7717._instance = CommutativeMatcher7717()
		return CommutativeMatcher7717._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7716
		return
		yield


class CommutativeMatcher7706(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7706._instance is None:
			CommutativeMatcher7706._instance = CommutativeMatcher7706()
		return CommutativeMatcher7706._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7705
		return
		yield


class CommutativeMatcher7702(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7702._instance is None:
			CommutativeMatcher7702._instance = CommutativeMatcher7702()
		return CommutativeMatcher7702._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7701
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7703
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7704
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7721
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7722
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7706.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7707
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7723
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7820
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7689(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7689._instance is None:
			CommutativeMatcher7689._instance = CommutativeMatcher7689()
		return CommutativeMatcher7689._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7688
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7690
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7691
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7692
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7693
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7694
								if len(subjects2) == 0:
									# State 7695
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7697.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7698
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7699
								if len(subjects2) == 0:
									# State 7700
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7711
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7712
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7713
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7714
								if len(subjects2) == 0:
									# State 7715
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7717.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7718
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7719
								if len(subjects2) == 0:
									# State 7720
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7702.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7708
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7709
							if len(subjects2) == 0:
								# State 7710
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7724
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7725
							if len(subjects2) == 0:
								# State 7726
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7821
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7822
							if len(subjects2) == 0:
								# State 7823
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7824
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7825
							if len(subjects2) == 0:
								# State 7826
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7247(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    4: (4, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    5: (5, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7247._instance is None:
			CommutativeMatcher7247._instance = CommutativeMatcher7247()
		return CommutativeMatcher7247._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7246
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8131
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.1', tmp2)
				except ValueError:
					pass
				else:
					# State 8132
					if len(subjects) == 0:
						# 0: x**n
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp4 = subjects.popleft()
			subjects5 = deque(op_iter(tmp4))
			# State 8133
			if len(subjects5) >= 1:
				tmp6 = subjects5.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 8134
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8135
						if len(subjects5) == 0:
							# State 8136
							if len(subjects) == 0:
								# 0: x**n
								yield 0, subst2
					if len(subjects5) >= 1:
						tmp9 = subjects5.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1.2', tmp9)
						except ValueError:
							pass
						else:
							# State 8135
							if len(subjects5) == 0:
								# State 8136
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects5.appendleft(tmp9)
				subjects5.appendleft(tmp6)
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7243(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 3: 1}), [
      
]),
    3: (3, Multiset({2: 1, 4: 1}), [
      
]),
    4: (4, Multiset({5: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    5: (5, Multiset({6: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7243._instance is None:
			CommutativeMatcher7243._instance = CommutativeMatcher7243()
		return CommutativeMatcher7243._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7242
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7244
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7245
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
			if len(subjects) >= 1:
				tmp4 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp4)
				except ValueError:
					pass
				else:
					# State 7373
					if len(subjects) == 0:
						# 4: x*g
						yield 4, subst2
				subjects.appendleft(tmp4)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8206
				if len(subjects) >= 1:
					tmp7 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 8207
						if len(subjects) == 0:
							# 6: d*x**n
							yield 6, subst3
					subjects.appendleft(tmp7)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp9 = subjects.popleft()
				subjects10 = deque(op_iter(tmp9))
				# State 8208
				if len(subjects10) >= 1:
					tmp11 = subjects10.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp11)
					except ValueError:
						pass
					else:
						# State 8209
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8210
							if len(subjects10) == 0:
								# State 8211
								if len(subjects) == 0:
									# 6: d*x**n
									yield 6, subst3
						if len(subjects10) >= 1:
							tmp14 = subjects10.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp14)
							except ValueError:
								pass
							else:
								# State 8210
								if len(subjects10) == 0:
									# State 8211
									if len(subjects) == 0:
										# 6: d*x**n
										yield 6, subst3
							subjects10.appendleft(tmp14)
					subjects10.appendleft(tmp11)
				subjects.appendleft(tmp9)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7262
			if len(subjects) >= 1:
				tmp17 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp17)
				except ValueError:
					pass
				else:
					# State 7263
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp17)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7367
			if len(subjects) >= 1:
				tmp20 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp20)
				except ValueError:
					pass
				else:
					# State 7368
					if len(subjects) == 0:
						# 3: x*e
						yield 3, subst2
				subjects.appendleft(tmp20)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8125
				if len(subjects) >= 1:
					tmp23 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.1', tmp23)
					except ValueError:
						pass
					else:
						# State 8126
						if len(subjects) == 0:
							# 5: b*x**n
							yield 5, subst3
					subjects.appendleft(tmp23)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp25 = subjects.popleft()
				subjects26 = deque(op_iter(tmp25))
				# State 8127
				if len(subjects26) >= 1:
					tmp27 = subjects26.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.1', tmp27)
					except ValueError:
						pass
					else:
						# State 8128
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8129
							if len(subjects26) == 0:
								# State 8130
								if len(subjects) == 0:
									# 5: b*x**n
									yield 5, subst3
						if len(subjects26) >= 1:
							tmp30 = subjects26.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.2', tmp30)
							except ValueError:
								pass
							else:
								# State 8129
								if len(subjects26) == 0:
									# State 8130
									if len(subjects) == 0:
										# 5: b*x**n
										yield 5, subst3
							subjects26.appendleft(tmp30)
					subjects26.appendleft(tmp27)
				subjects.appendleft(tmp25)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp32 = subjects.popleft()
			associative1 = tmp32
			associative_type1 = type(tmp32)
			subjects33 = deque(op_iter(tmp32))
			matcher = CommutativeMatcher7247.get()
			tmp34 = subjects33
			subjects33 = []
			for s in tmp34:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp34, subst0):
				if pattern_index == 0:
					# State 7248
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7264
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
				if pattern_index == 2:
					# State 7369
					if len(subjects) == 0:
						# 3: x*e
						yield 3, subst1
				if pattern_index == 3:
					# State 7374
					if len(subjects) == 0:
						# 4: x*g
						yield 4, subst1
				if pattern_index == 4:
					# State 8137
					if len(subjects) == 0:
						# 5: b*x**n
						yield 5, subst1
				if pattern_index == 5:
					# State 8212
					if len(subjects) == 0:
						# 6: d*x**n
						yield 6, subst1
			subjects.appendleft(tmp32)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp35 = subjects.popleft()
			# State 7366
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp35)
		return
		yield


class CommutativeMatcher8980(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher8980._instance is None:
			CommutativeMatcher8980._instance = CommutativeMatcher8980()
		return CommutativeMatcher8980._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 8979
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8981
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8982
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8983
							if len(subjects2) == 0:
								# State 8984
								if len(subjects) == 0:
									# 0: x**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher5712(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    4: (4, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    5: (5, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_4', 1, 1, 1), Mul)
]),
    6: (6, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    7: (7, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    8: (8, Multiset({}), [
      (VariableWithCount('i2.2.1.0_4', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul)
]),
    9: (9, Multiset({3: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    10: (10, Multiset({4: 1, 5: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    11: (11, Multiset({6: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    12: (12, Multiset({7: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    13: (13, Multiset({}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul)
]),
    14: (14, Multiset({8: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    15: (15, Multiset({9: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    16: (16, Multiset({10: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    17: (17, Multiset({11: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    18: (18, Multiset({}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    19: (19, Multiset({}), [
      (VariableWithCount('i2.2.1.0_4', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_5', 1, 1, 1), Mul)
]),
    20: (20, Multiset({}), [
      (VariableWithCount('i2.2.1.0_6', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_7', 1, 1, 1), Mul)
]),
    21: (21, Multiset({12: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    22: (22, Multiset({13: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    23: (23, Multiset({14: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    24: (24, Multiset({15: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    25: (25, Multiset({16: 1}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    26: (26, Multiset({12: 1, 17: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    27: (27, Multiset({12: 1, 14: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    28: (28, Multiset({11: 1, 14: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    29: (29, Multiset({18: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    30: (30, Multiset({19: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    31: (31, Multiset({20: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5712._instance is None:
			CommutativeMatcher5712._instance = CommutativeMatcher5712()
		return CommutativeMatcher5712._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5711
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7231
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7232
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7233
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7234
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7235
								if len(subjects2) == 0:
									# State 7236
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 8105
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8106
						if len(subjects2) >= 1:
							tmp10 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.2.1.1', tmp10)
							except ValueError:
								pass
							else:
								# State 8107
								if len(subjects2) >= 1 and subjects2[0] == 1/2:
									tmp12 = subjects2.popleft()
									# State 8108
									if len(subjects2) == 0:
										# State 8109
										if len(subjects) == 0:
											# 9: sqrt(a + b*x**n)
											yield 9, subst4
									subjects2.appendleft(tmp12)
							subjects2.appendleft(tmp10)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp13 = subjects2.popleft()
						subjects14 = deque(op_iter(tmp13))
						# State 8110
						if len(subjects14) >= 1:
							tmp15 = subjects14.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.1', tmp15)
							except ValueError:
								pass
							else:
								# State 8111
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 8112
									if len(subjects14) == 0:
										# State 8113
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp18 = subjects2.popleft()
											# State 8114
											if len(subjects2) == 0:
												# State 8115
												if len(subjects) == 0:
													# 9: sqrt(a + b*x**n)
													yield 9, subst4
											subjects2.appendleft(tmp18)
								if len(subjects14) >= 1:
									tmp19 = subjects14.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.1.2', tmp19)
									except ValueError:
										pass
									else:
										# State 8112
										if len(subjects14) == 0:
											# State 8113
											if len(subjects2) >= 1 and subjects2[0] == 1/2:
												tmp21 = subjects2.popleft()
												# State 8114
												if len(subjects2) == 0:
													# State 8115
													if len(subjects) == 0:
														# 9: sqrt(a + b*x**n)
														yield 9, subst4
												subjects2.appendleft(tmp21)
									subjects14.appendleft(tmp19)
							subjects14.appendleft(tmp15)
						subjects2.appendleft(tmp13)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp22 = subjects2.popleft()
					associative1 = tmp22
					associative_type1 = type(tmp22)
					subjects23 = deque(op_iter(tmp22))
					matcher = CommutativeMatcher7238.get()
					tmp24 = subjects23
					subjects23 = []
					for s in tmp24:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp24, subst1):
						if pattern_index == 0:
							# State 7239
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp25 = subjects2.popleft()
								# State 7240
								if len(subjects2) == 0:
									# State 7241
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp25)
						if pattern_index == 1:
							# State 8122
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp26 = subjects2.popleft()
								# State 8123
								if len(subjects2) == 0:
									# State 8124
									if len(subjects) == 0:
										# 9: sqrt(a + b*x**n)
										yield 9, subst2
								subjects2.appendleft(tmp26)
					subjects2.appendleft(tmp22)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7252
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7253
					if len(subjects2) >= 1:
						tmp29 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp29)
						except ValueError:
							pass
						else:
							# State 7254
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp31 = subjects2.popleft()
								# State 7255
								if len(subjects2) == 0:
									# State 7256
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp31)
						subjects2.appendleft(tmp29)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 8186
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8187
						if len(subjects2) >= 1:
							tmp34 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.2.1.1', tmp34)
							except ValueError:
								pass
							else:
								# State 8188
								if len(subjects2) >= 1 and subjects2[0] == 1/2:
									tmp36 = subjects2.popleft()
									# State 8189
									if len(subjects2) == 0:
										# State 8190
										if len(subjects) == 0:
											# 10: sqrt(c + d*x**n)
											yield 10, subst4
									subjects2.appendleft(tmp36)
							subjects2.appendleft(tmp34)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp37 = subjects2.popleft()
						subjects38 = deque(op_iter(tmp37))
						# State 8191
						if len(subjects38) >= 1:
							tmp39 = subjects38.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1.1', tmp39)
							except ValueError:
								pass
							else:
								# State 8192
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 8193
									if len(subjects38) == 0:
										# State 8194
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp42 = subjects2.popleft()
											# State 8195
											if len(subjects2) == 0:
												# State 8196
												if len(subjects) == 0:
													# 10: sqrt(c + d*x**n)
													yield 10, subst4
											subjects2.appendleft(tmp42)
								if len(subjects38) >= 1:
									tmp43 = subjects38.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.1.2', tmp43)
									except ValueError:
										pass
									else:
										# State 8193
										if len(subjects38) == 0:
											# State 8194
											if len(subjects2) >= 1 and subjects2[0] == 1/2:
												tmp45 = subjects2.popleft()
												# State 8195
												if len(subjects2) == 0:
													# State 8196
													if len(subjects) == 0:
														# 10: sqrt(c + d*x**n)
														yield 10, subst4
												subjects2.appendleft(tmp45)
									subjects38.appendleft(tmp43)
							subjects38.appendleft(tmp39)
						subjects2.appendleft(tmp37)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp46 = subjects2.popleft()
					associative1 = tmp46
					associative_type1 = type(tmp46)
					subjects47 = deque(op_iter(tmp46))
					matcher = CommutativeMatcher7258.get()
					tmp48 = subjects47
					subjects47 = []
					for s in tmp48:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp48, subst1):
						if pattern_index == 0:
							# State 7259
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp49 = subjects2.popleft()
								# State 7260
								if len(subjects2) == 0:
									# State 7261
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp49)
						if pattern_index == 1:
							# State 8203
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp50 = subjects2.popleft()
								# State 8204
								if len(subjects2) == 0:
									# State 8205
									if len(subjects) == 0:
										# 10: sqrt(c + d*x**n)
										yield 10, subst2
								subjects2.appendleft(tmp50)
					subjects2.appendleft(tmp46)
			if len(subjects2) >= 1:
				tmp51 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1.0', tmp51)
				except ValueError:
					pass
				else:
					# State 7276
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp53 = subjects2.popleft()
						# State 7277
						if len(subjects2) == 0:
							# State 7278
							if len(subjects) == 0:
								# 2: x**2
								yield 2, subst1
						subjects2.appendleft(tmp53)
				subjects2.appendleft(tmp51)
			if len(subjects2) >= 1:
				tmp54 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp54)
				except ValueError:
					pass
				else:
					# State 7305
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp56 = subjects2.popleft()
						# State 7306
						if len(subjects2) == 0:
							# State 7307
							if len(subjects) == 0:
								# 3: x**2
								yield 3, subst1
						subjects2.appendleft(tmp56)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
						tmp57 = subjects2.popleft()
						associative1 = tmp57
						associative_type1 = type(tmp57)
						subjects58 = deque(op_iter(tmp57))
						matcher = CommutativeMatcher7689.get()
						tmp59 = subjects58
						subjects58 = []
						for s in tmp59:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp59, subst1):
							if pattern_index == 0:
								# State 7727
								if len(subjects2) == 0:
									# State 7728
									if len(subjects) == 0:
										# 6: F**(c*sqrt(d + x*e)/sqrt(f + x*g))
										yield 6, subst2
							if pattern_index == 1:
								# State 7827
								if len(subjects2) == 0:
									# State 7828
									if len(subjects) == 0:
										# 8: F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
										yield 8, subst2
						subjects2.appendleft(tmp57)
					if len(subjects2) >= 1:
						tmp60 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp60)
						except ValueError:
							pass
						else:
							# State 8239
							if len(subjects2) == 0:
								# State 8240
								if len(subjects) == 0:
									# 11: u**n
									yield 11, subst2
						subjects2.appendleft(tmp60)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8442
						if len(subjects2) == 0:
							# State 8443
							if len(subjects) == 0:
								# 12: v**m
								yield 12, subst2
					if len(subjects2) >= 1:
						tmp63 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp63)
						except ValueError:
							pass
						else:
							# State 8442
							if len(subjects2) == 0:
								# State 8443
								if len(subjects) == 0:
									# 12: v**m
									yield 12, subst2
						subjects2.appendleft(tmp63)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8869
						if len(subjects2) == 0:
							# State 8870
							if len(subjects) == 0:
								# 18: v**n
								yield 18, subst2
					if len(subjects2) >= 1:
						tmp66 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp66)
						except ValueError:
							pass
						else:
							# State 8869
							if len(subjects2) == 0:
								# State 8870
								if len(subjects) == 0:
									# 18: v**n
									yield 18, subst2
						subjects2.appendleft(tmp66)
				subjects2.appendleft(tmp54)
			if len(subjects2) >= 1:
				tmp68 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.3.2.1.0', tmp68)
				except ValueError:
					pass
				else:
					# State 7737
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp70 = subjects2.popleft()
						# State 7738
						if len(subjects2) == 0:
							# State 7739
							if len(subjects) == 0:
								# 7: x**2
								yield 7, subst1
						subjects2.appendleft(tmp70)
				subjects2.appendleft(tmp68)
			if len(subjects2) >= 1:
				tmp71 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp71)
				except ValueError:
					pass
				else:
					# State 8448
					if len(subjects2) >= 1:
						tmp73 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp73)
						except ValueError:
							pass
						else:
							# State 8449
							if len(subjects2) == 0:
								# State 8450
								if len(subjects) == 0:
									# 13: y**n
									yield 13, subst2
						subjects2.appendleft(tmp73)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8477
						if len(subjects2) == 0:
							# State 8478
							if len(subjects) == 0:
								# 14: w**n2
								yield 14, subst2
					if len(subjects2) >= 1:
						tmp76 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp76)
						except ValueError:
							pass
						else:
							# State 8477
							if len(subjects2) == 0:
								# State 8478
								if len(subjects) == 0:
									# 14: w**n2
									yield 14, subst2
						subjects2.appendleft(tmp76)
					if len(subjects2) >= 1:
						tmp78 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp78)
						except ValueError:
							pass
						else:
							# State 8583
							if len(subjects2) == 0:
								# State 8584
								if len(subjects) == 0:
									# 15: y**n
									yield 15, subst2
						subjects2.appendleft(tmp78)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8655
						if len(subjects2) == 0:
							# State 8656
							if len(subjects) == 0:
								# 17: w**p
								yield 17, subst2
					if len(subjects2) >= 1:
						tmp81 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp81)
						except ValueError:
							pass
						else:
							# State 8655
							if len(subjects2) == 0:
								# State 8656
								if len(subjects) == 0:
									# 17: w**p
									yield 17, subst2
						subjects2.appendleft(tmp81)
				subjects2.appendleft(tmp71)
			if len(subjects2) >= 1:
				tmp83 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_2', tmp83)
				except ValueError:
					pass
				else:
					# State 8631
					if len(subjects2) >= 1:
						tmp85 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp85)
						except ValueError:
							pass
						else:
							# State 8632
							if len(subjects2) == 0:
								# State 8633
								if len(subjects) == 0:
									# 16: y**n
									yield 16, subst2
						subjects2.appendleft(tmp85)
				subjects2.appendleft(tmp83)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 1)
			except ValueError:
				pass
			else:
				# State 8972
				if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
					tmp88 = subjects2.popleft()
					subjects89 = deque(op_iter(tmp88))
					# State 8973
					if len(subjects89) >= 1:
						tmp90 = subjects89.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2.1', tmp90)
						except ValueError:
							pass
						else:
							# State 8974
							if len(subjects89) >= 1:
								tmp92 = subjects89.popleft()
								subst3 = Substitution(subst2)
								try:
									subst3.try_add_variable('i2.2.1.2.2', tmp92)
								except ValueError:
									pass
								else:
									# State 8975
									if len(subjects89) == 0:
										# State 8976
										if len(subjects2) >= 1 and subjects2[0] == 1/2:
											tmp94 = subjects2.popleft()
											# State 8977
											if len(subjects2) == 0:
												# State 8978
												if len(subjects) == 0:
													# 19: sqrt(c*x**n)
													yield 19, subst3
											subjects2.appendleft(tmp94)
								subjects89.appendleft(tmp92)
						subjects89.appendleft(tmp90)
					subjects2.appendleft(tmp88)
			if len(subjects2) >= 1:
				tmp95 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.2.1', tmp95)
				except ValueError:
					pass
				else:
					# State 8995
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8996
						if len(subjects2) == 0:
							# State 8997
							if len(subjects) == 0:
								# 20: x**m
								yield 20, subst2
					if len(subjects2) >= 1:
						tmp98 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp98)
						except ValueError:
							pass
						else:
							# State 8996
							if len(subjects2) == 0:
								# State 8997
								if len(subjects) == 0:
									# 20: x**m
									yield 20, subst2
						subjects2.appendleft(tmp98)
				subjects2.appendleft(tmp95)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp100 = subjects2.popleft()
				associative1 = tmp100
				associative_type1 = type(tmp100)
				subjects101 = deque(op_iter(tmp100))
				matcher = CommutativeMatcher7243.get()
				tmp102 = subjects101
				subjects101 = []
				for s in tmp102:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp102, subst0):
					if pattern_index == 0:
						# State 7249
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp103 = subjects2.popleft()
							# State 7250
							if len(subjects2) == 0:
								# State 7251
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp103)
					if pattern_index == 1:
						# State 7265
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp104 = subjects2.popleft()
							# State 7266
							if len(subjects2) == 0:
								# State 7267
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp104)
					if pattern_index == 2:
						# State 7370
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp105 = subjects2.popleft()
							# State 7371
							if len(subjects2) == 0:
								# State 7372
								if len(subjects) == 0:
									# 4: sqrt(x*e + 1)
									yield 4, subst1
							subjects2.appendleft(tmp105)
					if pattern_index == 3:
						# State 7375
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp106 = subjects2.popleft()
							# State 7376
							if len(subjects2) == 0:
								# State 7377
								if len(subjects) == 0:
									# 5: 1/sqrt(x*g + 1)
									yield 5, subst1
							subjects2.appendleft(tmp106)
					if pattern_index == 4:
						# State 8138
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp107 = subjects2.popleft()
							# State 8139
							if len(subjects2) == 0:
								# State 8140
								if len(subjects) == 0:
									# 9: sqrt(a + b*x**n)
									yield 9, subst1
							subjects2.appendleft(tmp107)
					if pattern_index == 5:
						# State 8213
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp108 = subjects2.popleft()
							# State 8214
							if len(subjects2) == 0:
								# State 8215
								if len(subjects) == 0:
									# 10: sqrt(c + d*x**n)
									yield 10, subst1
							subjects2.appendleft(tmp108)
				subjects2.appendleft(tmp100)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
				tmp109 = subjects2.popleft()
				associative1 = tmp109
				associative_type1 = type(tmp109)
				subjects110 = deque(op_iter(tmp109))
				matcher = CommutativeMatcher8980.get()
				tmp111 = subjects110
				subjects110 = []
				for s in tmp111:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp111, subst0):
					if pattern_index == 0:
						# State 8985
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp112 = subjects2.popleft()
							# State 8986
							if len(subjects2) == 0:
								# State 8987
								if len(subjects) == 0:
									# 19: sqrt(c*x**n)
									yield 19, subst1
							subjects2.appendleft(tmp112)
				subjects2.appendleft(tmp109)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8440
			if len(subjects) >= 1:
				tmp114 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp114)
				except ValueError:
					pass
				else:
					# State 8441
					if len(subjects) == 0:
						# 12: v**m
						yield 12, subst2
				subjects.appendleft(tmp114)
			if len(subjects) >= 1:
				tmp116 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp116)
				except ValueError:
					pass
				else:
					# State 8654
					if len(subjects) == 0:
						# 17: w**p
						yield 17, subst2
				subjects.appendleft(tmp116)
			if len(subjects) >= 1:
				tmp118 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1', tmp118)
				except ValueError:
					pass
				else:
					# State 8994
					if len(subjects) == 0:
						# 20: x**m
						yield 20, subst2
				subjects.appendleft(tmp118)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8475
			if len(subjects) >= 1:
				tmp121 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp121)
				except ValueError:
					pass
				else:
					# State 8476
					if len(subjects) == 0:
						# 14: w**n2
						yield 14, subst2
				subjects.appendleft(tmp121)
			if len(subjects) >= 1:
				tmp123 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp123)
				except ValueError:
					pass
				else:
					# State 8868
					if len(subjects) == 0:
						# 18: v**n
						yield 18, subst2
				subjects.appendleft(tmp123)
		return
		yield


class CommutativeMatcher5708(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, None), Add)
]),
    2: (2, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    3: (3, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    4: (4, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, None), Add)
]),
    5: (5, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    6: (6, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    7: (7, Multiset({4: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
]),
    8: (8, Multiset({4: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, None), Add)
]),
    9: (9, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, None), Add)
]),
    10: (10, Multiset({5: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
]),
    11: (11, Multiset({6: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    12: (12, Multiset({7: 1, 8: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    13: (13, Multiset({9: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    14: (14, Multiset({10: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    15: (15, Multiset({11: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    16: (16, Multiset({12: 1, 13: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    17: (17, Multiset({14: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    18: (18, Multiset({12: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    19: (19, Multiset({15: 1, 16: 1}), [
      
]),
    20: (20, Multiset({17: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    21: (21, Multiset({18: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    22: (22, Multiset({19: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    23: (23, Multiset({20: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
]),
    24: (24, Multiset({17: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    25: (25, Multiset({21: 1, 22: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    26: (26, Multiset({17: 1, 23: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    27: (27, Multiset({21: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    28: (28, Multiset({24: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    29: (29, Multiset({25: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    30: (30, Multiset({26: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    31: (31, Multiset({27: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    32: (32, Multiset({21: 1, 23: 1}), [
      
]),
    33: (33, Multiset({28: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    34: (34, Multiset({21: 1, 29: 1}), [
      
]),
    35: (35, Multiset({21: 1, 29: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    36: (36, Multiset({30: 1, 31: 1}), [
      
]),
    37: (37, Multiset({21: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    38: (38, Multiset({29: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    39: (39, Multiset({21: 1, 29: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5708._instance is None:
			CommutativeMatcher5708._instance = CommutativeMatcher5708()
		return CommutativeMatcher5708._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5707
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 5709
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 5710
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
			if len(subjects) >= 1:
				tmp4 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', tmp4)
				except ValueError:
					pass
				else:
					# State 6189
					if len(subjects) == 0:
						# 4: x*d
						yield 4, subst2
				subjects.appendleft(tmp4)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2_1', 1)
			except ValueError:
				pass
			else:
				# State 8471
				if len(subjects) >= 1:
					tmp7 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1_1', tmp7)
					except ValueError:
						pass
					else:
						# State 8472
						if len(subjects) == 0:
							# 23: c*w**n2
							yield 23, subst3
					subjects.appendleft(tmp7)
				if len(subjects) >= 1:
					tmp9 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp9)
					except ValueError:
						pass
					else:
						# State 8864
						if len(subjects) == 0:
							# 29: b*v**n
							yield 29, subst3
					subjects.appendleft(tmp9)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8989
				if len(subjects) >= 1:
					tmp12 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1', tmp12)
					except ValueError:
						pass
					else:
						# State 8990
						if len(subjects) == 0:
							# 31: a*x**m
							yield 31, subst3
					subjects.appendleft(tmp12)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp14 = subjects.popleft()
				subjects15 = deque(op_iter(tmp14))
				# State 7733
				if len(subjects15) >= 1:
					tmp16 = subjects15.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.3.2.1.0', tmp16)
					except ValueError:
						pass
					else:
						# State 7734
						if len(subjects15) >= 1 and subjects15[0] == 2:
							tmp18 = subjects15.popleft()
							# State 7735
							if len(subjects15) == 0:
								# State 7736
								if len(subjects) == 0:
									# 12: C*x**2
									yield 12, subst2
							subjects15.appendleft(tmp18)
					subjects15.appendleft(tmp16)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0_1', 0)
				except ValueError:
					pass
				else:
					# State 8142
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.0_1', 1)
					except ValueError:
						pass
					else:
						# State 8143
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8144
							if len(subjects15) >= 1:
								tmp22 = subjects15.popleft()
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2.1.1', tmp22)
								except ValueError:
									pass
								else:
									# State 8145
									if len(subjects15) >= 1 and subjects15[0] == 1/2:
										tmp24 = subjects15.popleft()
										# State 8146
										if len(subjects15) == 0:
											# State 8147
											if len(subjects) == 0:
												# 16: f*sqrt(c + d*x**n)
												yield 16, subst5
										subjects15.appendleft(tmp24)
								subjects15.appendleft(tmp22)
						if len(subjects15) >= 1 and isinstance(subjects15[0], Pow):
							tmp25 = subjects15.popleft()
							subjects26 = deque(op_iter(tmp25))
							# State 8148
							if len(subjects26) >= 1:
								tmp27 = subjects26.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.1', tmp27)
								except ValueError:
									pass
								else:
									# State 8149
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2.1.2', 1)
									except ValueError:
										pass
									else:
										# State 8150
										if len(subjects26) == 0:
											# State 8151
											if len(subjects15) >= 1 and subjects15[0] == 1/2:
												tmp30 = subjects15.popleft()
												# State 8152
												if len(subjects15) == 0:
													# State 8153
													if len(subjects) == 0:
														# 16: f*sqrt(c + d*x**n)
														yield 16, subst5
												subjects15.appendleft(tmp30)
									if len(subjects26) >= 1:
										tmp31 = subjects26.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.1.2.1.2', tmp31)
										except ValueError:
											pass
										else:
											# State 8150
											if len(subjects26) == 0:
												# State 8151
												if len(subjects15) >= 1 and subjects15[0] == 1/2:
													tmp33 = subjects15.popleft()
													# State 8152
													if len(subjects15) == 0:
														# State 8153
														if len(subjects) == 0:
															# 16: f*sqrt(c + d*x**n)
															yield 16, subst5
													subjects15.appendleft(tmp33)
										subjects26.appendleft(tmp31)
								subjects26.appendleft(tmp27)
							subjects15.appendleft(tmp25)
					if len(subjects15) >= 1 and isinstance(subjects15[0], Mul):
						tmp34 = subjects15.popleft()
						associative1 = tmp34
						associative_type1 = type(tmp34)
						subjects35 = deque(op_iter(tmp34))
						matcher = CommutativeMatcher8155.get()
						tmp36 = subjects35
						subjects35 = []
						for s in tmp36:
							matcher.add_subject(s)
						for pattern_index, subst3 in matcher.match(tmp36, subst2):
							if pattern_index == 0:
								# State 8162
								if len(subjects15) >= 1 and subjects15[0] == 1/2:
									tmp37 = subjects15.popleft()
									# State 8163
									if len(subjects15) == 0:
										# State 8164
										if len(subjects) == 0:
											# 16: f*sqrt(c + d*x**n)
											yield 16, subst3
									subjects15.appendleft(tmp37)
						subjects15.appendleft(tmp34)
				if len(subjects15) >= 1:
					tmp38 = subjects15.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_1', tmp38)
					except ValueError:
						pass
					else:
						# State 8445
						if len(subjects15) >= 1:
							tmp40 = subjects15.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp40)
							except ValueError:
								pass
							else:
								# State 8446
								if len(subjects15) == 0:
									# State 8447
									if len(subjects) == 0:
										# 22: b*y**n
										yield 22, subst3
							subjects15.appendleft(tmp40)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8473
							if len(subjects15) == 0:
								# State 8474
								if len(subjects) == 0:
									# 23: c*w**n2
									yield 23, subst3
						if len(subjects15) >= 1:
							tmp43 = subjects15.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp43)
							except ValueError:
								pass
							else:
								# State 8473
								if len(subjects15) == 0:
									# State 8474
									if len(subjects) == 0:
										# 23: c*w**n2
										yield 23, subst3
							subjects15.appendleft(tmp43)
						if len(subjects15) >= 1:
							tmp45 = subjects15.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp45)
							except ValueError:
								pass
							else:
								# State 8581
								if len(subjects15) == 0:
									# State 8582
									if len(subjects) == 0:
										# 24: b*y**n
										yield 24, subst3
							subjects15.appendleft(tmp45)
					subjects15.appendleft(tmp38)
				if len(subjects15) >= 1:
					tmp47 = subjects15.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp47)
					except ValueError:
						pass
					else:
						# State 8865
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8866
							if len(subjects15) == 0:
								# State 8867
								if len(subjects) == 0:
									# 29: b*v**n
									yield 29, subst3
						if len(subjects15) >= 1:
							tmp50 = subjects15.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp50)
							except ValueError:
								pass
							else:
								# State 8866
								if len(subjects15) == 0:
									# State 8867
									if len(subjects) == 0:
										# 29: b*v**n
										yield 29, subst3
							subjects15.appendleft(tmp50)
					subjects15.appendleft(tmp47)
				if len(subjects15) >= 1:
					tmp52 = subjects15.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1', tmp52)
					except ValueError:
						pass
					else:
						# State 8991
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8992
							if len(subjects15) == 0:
								# State 8993
								if len(subjects) == 0:
									# 31: a*x**m
									yield 31, subst3
						if len(subjects15) >= 1:
							tmp55 = subjects15.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp55)
							except ValueError:
								pass
							else:
								# State 8992
								if len(subjects15) == 0:
									# State 8993
									if len(subjects) == 0:
										# 31: a*x**m
										yield 31, subst3
							subjects15.appendleft(tmp55)
					subjects15.appendleft(tmp52)
				if len(subjects15) >= 1 and isinstance(subjects15[0], Add):
					tmp57 = subjects15.popleft()
					associative1 = tmp57
					associative_type1 = type(tmp57)
					subjects58 = deque(op_iter(tmp57))
					matcher = CommutativeMatcher8166.get()
					tmp59 = subjects58
					subjects58 = []
					for s in tmp59:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp59, subst1):
						if pattern_index == 0:
							# State 8183
							if len(subjects15) >= 1 and subjects15[0] == 1/2:
								tmp60 = subjects15.popleft()
								# State 8184
								if len(subjects15) == 0:
									# State 8185
									if len(subjects) == 0:
										# 16: f*sqrt(c + d*x**n)
										yield 16, subst2
								subjects15.appendleft(tmp60)
					subjects15.appendleft(tmp57)
				subjects.appendleft(tmp14)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 5717
			if len(subjects) >= 1:
				tmp62 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp62)
				except ValueError:
					pass
				else:
					# State 5718
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst2
				subjects.appendleft(tmp62)
			if len(subjects) >= 1:
				tmp64 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp64)
				except ValueError:
					pass
				else:
					# State 7741
					if len(subjects) == 0:
						# 13: B*x
						yield 13, subst2
				subjects.appendleft(tmp64)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp66 = subjects.popleft()
				subjects67 = deque(op_iter(tmp66))
				# State 8627
				if len(subjects67) >= 1:
					tmp68 = subjects67.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_2', tmp68)
					except ValueError:
						pass
					else:
						# State 8628
						if len(subjects67) >= 1:
							tmp70 = subjects67.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp70)
							except ValueError:
								pass
							else:
								# State 8629
								if len(subjects67) == 0:
									# State 8630
									if len(subjects) == 0:
										# 25: b*y**n
										yield 25, subst3
							subjects67.appendleft(tmp70)
					subjects67.appendleft(tmp68)
				subjects.appendleft(tmp66)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 5994
			if len(subjects) >= 1:
				tmp73 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', tmp73)
				except ValueError:
					pass
				else:
					# State 5995
					if len(subjects) == 0:
						# 2: x*d
						yield 2, subst2
				subjects.appendleft(tmp73)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8436
				if len(subjects) >= 1:
					tmp76 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp76)
					except ValueError:
						pass
					else:
						# State 8437
						if len(subjects) == 0:
							# 21: c*v**m
							yield 21, subst3
					subjects.appendleft(tmp76)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp78 = subjects.popleft()
				subjects79 = deque(op_iter(tmp78))
				# State 7301
				if len(subjects79) >= 1:
					tmp80 = subjects79.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp80)
					except ValueError:
						pass
					else:
						# State 7302
						if len(subjects79) >= 1 and subjects79[0] == 2:
							tmp82 = subjects79.popleft()
							# State 7303
							if len(subjects79) == 0:
								# State 7304
								if len(subjects) == 0:
									# 9: C*x**2
									yield 9, subst2
							subjects79.appendleft(tmp82)
						if len(subjects79) >= 1 and isinstance(subjects79[0], Mul):
							tmp83 = subjects79.popleft()
							associative1 = tmp83
							associative_type1 = type(tmp83)
							subjects84 = deque(op_iter(tmp83))
							matcher = CommutativeMatcher7648.get()
							tmp85 = subjects84
							subjects84 = []
							for s in tmp85:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp85, subst2):
								if pattern_index == 0:
									# State 7686
									if len(subjects79) == 0:
										# State 7687
										if len(subjects) == 0:
											# 11: b*F**(c*sqrt(d + x*e)/sqrt(f + x*g))
											yield 11, subst3
								if pattern_index == 1:
									# State 7818
									if len(subjects79) == 0:
										# State 7819
										if len(subjects) == 0:
											# 14: b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
											yield 14, subst3
							subjects79.appendleft(tmp83)
						if len(subjects79) >= 1:
							tmp86 = subjects79.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp86)
							except ValueError:
								pass
							else:
								# State 8237
								if len(subjects79) == 0:
									# State 8238
									if len(subjects) == 0:
										# 17: a*u**n
										yield 17, subst3
							subjects79.appendleft(tmp86)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8438
							if len(subjects79) == 0:
								# State 8439
								if len(subjects) == 0:
									# 21: c*v**m
									yield 21, subst3
						if len(subjects79) >= 1:
							tmp89 = subjects79.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp89)
							except ValueError:
								pass
							else:
								# State 8438
								if len(subjects79) == 0:
									# State 8439
									if len(subjects) == 0:
										# 21: c*v**m
										yield 21, subst3
							subjects79.appendleft(tmp89)
					subjects79.appendleft(tmp80)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0', 0)
				except ValueError:
					pass
				else:
					# State 8061
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2.1.0', 1)
					except ValueError:
						pass
					else:
						# State 8062
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8063
							if len(subjects79) >= 1:
								tmp94 = subjects79.popleft()
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2.1.1', tmp94)
								except ValueError:
									pass
								else:
									# State 8064
									if len(subjects79) >= 1 and subjects79[0] == 1/2:
										tmp96 = subjects79.popleft()
										# State 8065
										if len(subjects79) == 0:
											# State 8066
											if len(subjects) == 0:
												# 15: e*sqrt(a + b*x**n)
												yield 15, subst5
										subjects79.appendleft(tmp96)
								subjects79.appendleft(tmp94)
						if len(subjects79) >= 1 and isinstance(subjects79[0], Pow):
							tmp97 = subjects79.popleft()
							subjects98 = deque(op_iter(tmp97))
							# State 8067
							if len(subjects98) >= 1:
								tmp99 = subjects98.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2.1.1', tmp99)
								except ValueError:
									pass
								else:
									# State 8068
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2.1.2', 1)
									except ValueError:
										pass
									else:
										# State 8069
										if len(subjects98) == 0:
											# State 8070
											if len(subjects79) >= 1 and subjects79[0] == 1/2:
												tmp102 = subjects79.popleft()
												# State 8071
												if len(subjects79) == 0:
													# State 8072
													if len(subjects) == 0:
														# 15: e*sqrt(a + b*x**n)
														yield 15, subst5
												subjects79.appendleft(tmp102)
									if len(subjects98) >= 1:
										tmp103 = subjects98.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.1.2.1.2', tmp103)
										except ValueError:
											pass
										else:
											# State 8069
											if len(subjects98) == 0:
												# State 8070
												if len(subjects79) >= 1 and subjects79[0] == 1/2:
													tmp105 = subjects79.popleft()
													# State 8071
													if len(subjects79) == 0:
														# State 8072
														if len(subjects) == 0:
															# 15: e*sqrt(a + b*x**n)
															yield 15, subst5
													subjects79.appendleft(tmp105)
										subjects98.appendleft(tmp103)
								subjects98.appendleft(tmp99)
							subjects79.appendleft(tmp97)
					if len(subjects79) >= 1 and isinstance(subjects79[0], Mul):
						tmp106 = subjects79.popleft()
						associative1 = tmp106
						associative_type1 = type(tmp106)
						subjects107 = deque(op_iter(tmp106))
						matcher = CommutativeMatcher8074.get()
						tmp108 = subjects107
						subjects107 = []
						for s in tmp108:
							matcher.add_subject(s)
						for pattern_index, subst3 in matcher.match(tmp108, subst2):
							if pattern_index == 0:
								# State 8081
								if len(subjects79) >= 1 and subjects79[0] == 1/2:
									tmp109 = subjects79.popleft()
									# State 8082
									if len(subjects79) == 0:
										# State 8083
										if len(subjects) == 0:
											# 15: e*sqrt(a + b*x**n)
											yield 15, subst3
									subjects79.appendleft(tmp109)
						subjects79.appendleft(tmp106)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.0', 1)
				except ValueError:
					pass
				else:
					# State 8956
					if len(subjects79) >= 1 and isinstance(subjects79[0], Pow):
						tmp111 = subjects79.popleft()
						subjects112 = deque(op_iter(tmp111))
						# State 8957
						if len(subjects112) >= 1:
							tmp113 = subjects112.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2.1', tmp113)
							except ValueError:
								pass
							else:
								# State 8958
								if len(subjects112) >= 1:
									tmp115 = subjects112.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2.2', tmp115)
									except ValueError:
										pass
									else:
										# State 8959
										if len(subjects112) == 0:
											# State 8960
											if len(subjects79) >= 1 and subjects79[0] == 1/2:
												tmp117 = subjects79.popleft()
												# State 8961
												if len(subjects79) == 0:
													# State 8962
													if len(subjects) == 0:
														# 30: b*sqrt(c*x**n)
														yield 30, subst4
												subjects79.appendleft(tmp117)
									subjects112.appendleft(tmp115)
							subjects112.appendleft(tmp113)
						subjects79.appendleft(tmp111)
				if len(subjects79) >= 1 and isinstance(subjects79[0], Add):
					tmp118 = subjects79.popleft()
					associative1 = tmp118
					associative_type1 = type(tmp118)
					subjects119 = deque(op_iter(tmp118))
					matcher = CommutativeMatcher8085.get()
					tmp120 = subjects119
					subjects119 = []
					for s in tmp120:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp120, subst1):
						if pattern_index == 0:
							# State 8102
							if len(subjects79) >= 1 and subjects79[0] == 1/2:
								tmp121 = subjects79.popleft()
								# State 8103
								if len(subjects79) == 0:
									# State 8104
									if len(subjects) == 0:
										# 15: e*sqrt(a + b*x**n)
										yield 15, subst2
								subjects79.appendleft(tmp121)
					subjects79.appendleft(tmp118)
				if len(subjects79) >= 1 and isinstance(subjects79[0], Mul):
					tmp122 = subjects79.popleft()
					associative1 = tmp122
					associative_type1 = type(tmp122)
					subjects123 = deque(op_iter(tmp122))
					matcher = CommutativeMatcher8964.get()
					tmp124 = subjects123
					subjects123 = []
					for s in tmp124:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp124, subst1):
						if pattern_index == 0:
							# State 8969
							if len(subjects79) >= 1 and subjects79[0] == 1/2:
								tmp125 = subjects79.popleft()
								# State 8970
								if len(subjects79) == 0:
									# State 8971
									if len(subjects) == 0:
										# 30: b*sqrt(c*x**n)
										yield 30, subst2
								subjects79.appendleft(tmp125)
					subjects79.appendleft(tmp122)
				subjects.appendleft(tmp78)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_3', 1)
		except ValueError:
			pass
		else:
			# State 6052
			if len(subjects) >= 1:
				tmp127 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp127)
				except ValueError:
					pass
				else:
					# State 6053
					if len(subjects) == 0:
						# 3: x*f
						yield 3, subst2
				subjects.appendleft(tmp127)
			if len(subjects) >= 1:
				tmp129 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_2', tmp129)
				except ValueError:
					pass
				else:
					# State 8265
					if len(subjects) == 0:
						# 18: y*b
						yield 18, subst2
				subjects.appendleft(tmp129)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp131 = subjects.popleft()
				subjects132 = deque(op_iter(tmp131))
				# State 7272
				if len(subjects132) >= 1:
					tmp133 = subjects132.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2.1.0', tmp133)
					except ValueError:
						pass
					else:
						# State 7273
						if len(subjects132) >= 1 and subjects132[0] == 2:
							tmp135 = subjects132.popleft()
							# State 7274
							if len(subjects132) == 0:
								# State 7275
								if len(subjects) == 0:
									# 7: C*x**2
									yield 7, subst2
							subjects132.appendleft(tmp135)
					subjects132.appendleft(tmp133)
				subjects.appendleft(tmp131)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_4', 1)
		except ValueError:
			pass
		else:
			# State 6523
			if len(subjects) >= 1:
				tmp137 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp137)
				except ValueError:
					pass
				else:
					# State 6524
					if len(subjects) == 0:
						# 5: x*h
						yield 5, subst2
				subjects.appendleft(tmp137)
			if len(subjects) >= 1:
				tmp139 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp139)
				except ValueError:
					pass
				else:
					# State 7280
					if len(subjects) == 0:
						# 8: B*x
						yield 8, subst2
				subjects.appendleft(tmp139)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_5', 1)
		except ValueError:
			pass
		else:
			# State 8287
			if len(subjects) >= 1:
				tmp142 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_4', tmp142)
				except ValueError:
					pass
				else:
					# State 8288
					if len(subjects) == 0:
						# 19: y*b
						yield 19, subst2
				subjects.appendleft(tmp142)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_7', 1)
		except ValueError:
			pass
		else:
			# State 8310
			if len(subjects) >= 1:
				tmp145 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_6', tmp145)
				except ValueError:
					pass
				else:
					# State 8311
					if len(subjects) == 0:
						# 20: z*h
						yield 20, subst2
				subjects.appendleft(tmp145)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp147 = subjects.popleft()
			associative1 = tmp147
			associative_type1 = type(tmp147)
			subjects148 = deque(op_iter(tmp147))
			matcher = CommutativeMatcher5712.get()
			tmp149 = subjects148
			subjects148 = []
			for s in tmp149:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp149, subst0):
				if pattern_index == 0:
					# State 5713
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
				if pattern_index == 1:
					# State 5719
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst1
				if pattern_index == 2:
					# State 5996
					if len(subjects) == 0:
						# 2: x*d
						yield 2, subst1
				if pattern_index == 3:
					# State 6054
					if len(subjects) == 0:
						# 3: x*f
						yield 3, subst1
				if pattern_index == 4:
					# State 6190
					if len(subjects) == 0:
						# 4: x*d
						yield 4, subst1
				if pattern_index == 5:
					# State 6525
					if len(subjects) == 0:
						# 5: x*h
						yield 5, subst1
				if pattern_index == 6:
					# State 7268
					if len(subjects) == 0:
						# 6: F*b*c*sqrt(d + x*e)/sqrt(f + x*g)
						yield 6, subst1
				if pattern_index == 7:
					# State 7279
					if len(subjects) == 0:
						# 7: C*x**2
						yield 7, subst1
				if pattern_index == 8:
					# State 7281
					if len(subjects) == 0:
						# 8: B*x
						yield 8, subst1
				if pattern_index == 9:
					# State 7308
					if len(subjects) == 0:
						# 9: C*x**2
						yield 9, subst1
				if pattern_index == 10:
					# State 7378
					if len(subjects) == 0:
						# 10: F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1)
						yield 10, subst1
				if pattern_index == 11:
					# State 7729
					if len(subjects) == 0:
						# 11: b*F**(c*sqrt(d + x*e)/sqrt(f + x*g))
						yield 11, subst1
				if pattern_index == 12:
					# State 7740
					if len(subjects) == 0:
						# 12: C*x**2
						yield 12, subst1
				if pattern_index == 13:
					# State 7742
					if len(subjects) == 0:
						# 13: B*x
						yield 13, subst1
				if pattern_index == 14:
					# State 7829
					if len(subjects) == 0:
						# 14: b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
						yield 14, subst1
				if pattern_index == 15:
					# State 8141
					if len(subjects) == 0:
						# 15: e*sqrt(a + b*x**n)
						yield 15, subst1
				if pattern_index == 16:
					# State 8216
					if len(subjects) == 0:
						# 16: f*sqrt(c + d*x**n)
						yield 16, subst1
				if pattern_index == 17:
					# State 8241
					if len(subjects) == 0:
						# 17: a*u**n
						yield 17, subst1
				if pattern_index == 18:
					# State 8266
					if len(subjects) == 0:
						# 18: y*b
						yield 18, subst1
				if pattern_index == 19:
					# State 8289
					if len(subjects) == 0:
						# 19: y*b
						yield 19, subst1
				if pattern_index == 20:
					# State 8312
					if len(subjects) == 0:
						# 20: z*h
						yield 20, subst1
				if pattern_index == 21:
					# State 8444
					if len(subjects) == 0:
						# 21: c*v**m
						yield 21, subst1
				if pattern_index == 22:
					# State 8451
					if len(subjects) == 0:
						# 22: b*y**n
						yield 22, subst1
				if pattern_index == 23:
					# State 8479
					if len(subjects) == 0:
						# 23: c*w**n2
						yield 23, subst1
				if pattern_index == 24:
					# State 8585
					if len(subjects) == 0:
						# 24: b*y**n
						yield 24, subst1
				if pattern_index == 25:
					# State 8634
					if len(subjects) == 0:
						# 25: b*y**n
						yield 25, subst1
				if pattern_index == 26:
					# State 8657
					if len(subjects) == 0:
						# 26: b*v**m*w**p
						yield 26, subst1
				if pattern_index == 27:
					# State 8666
					if len(subjects) == 0:
						# 27: b*v**m*w**n2
						yield 27, subst1
				if pattern_index == 28:
					# State 8843
					if len(subjects) == 0:
						# 28: b*u**n*w**n2
						yield 28, subst1
				if pattern_index == 29:
					# State 8871
					if len(subjects) == 0:
						# 29: b*v**n
						yield 29, subst1
				if pattern_index == 30:
					# State 8988
					if len(subjects) == 0:
						# 30: b*sqrt(c*x**n)
						yield 30, subst1
				if pattern_index == 31:
					# State 8998
					if len(subjects) == 0:
						# 31: a*x**m
						yield 31, subst1
			subjects.appendleft(tmp147)
		return
		yield


class CommutativeMatcher7569(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7569._instance is None:
			CommutativeMatcher7569._instance = CommutativeMatcher7569()
		return CommutativeMatcher7569._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7568
		return
		yield


class CommutativeMatcher7589(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7589._instance is None:
			CommutativeMatcher7589._instance = CommutativeMatcher7589()
		return CommutativeMatcher7589._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7588
		return
		yield


class CommutativeMatcher7578(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7578._instance is None:
			CommutativeMatcher7578._instance = CommutativeMatcher7578()
		return CommutativeMatcher7578._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7577
		return
		yield


class CommutativeMatcher7574(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7574._instance is None:
			CommutativeMatcher7574._instance = CommutativeMatcher7574()
		return CommutativeMatcher7574._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7573
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7575
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7576
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7593
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7594
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7578.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7579
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7595
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7788
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7561(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7561._instance is None:
			CommutativeMatcher7561._instance = CommutativeMatcher7561()
		return CommutativeMatcher7561._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7560
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7562
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7563
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7564
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7565
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7566
								if len(subjects2) == 0:
									# State 7567
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7569.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7570
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7571
								if len(subjects2) == 0:
									# State 7572
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7583
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7584
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7585
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7586
								if len(subjects2) == 0:
									# State 7587
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7589.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7590
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7591
								if len(subjects2) == 0:
									# State 7592
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7574.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7580
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7581
							if len(subjects2) == 0:
								# State 7582
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7596
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7597
							if len(subjects2) == 0:
								# State 7598
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7789
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7790
							if len(subjects2) == 0:
								# State 7791
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7792
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7793
							if len(subjects2) == 0:
								# State 7794
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7198(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7198._instance is None:
			CommutativeMatcher7198._instance = CommutativeMatcher7198()
		return CommutativeMatcher7198._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7197
		return
		yield


class CommutativeMatcher7218(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7218._instance is None:
			CommutativeMatcher7218._instance = CommutativeMatcher7218()
		return CommutativeMatcher7218._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7217
		return
		yield


class CommutativeMatcher7612(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7612._instance is None:
			CommutativeMatcher7612._instance = CommutativeMatcher7612()
		return CommutativeMatcher7612._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7611
		return
		yield


class CommutativeMatcher7632(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7632._instance is None:
			CommutativeMatcher7632._instance = CommutativeMatcher7632()
		return CommutativeMatcher7632._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7631
		return
		yield


class CommutativeMatcher7621(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7621._instance is None:
			CommutativeMatcher7621._instance = CommutativeMatcher7621()
		return CommutativeMatcher7621._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7620
		return
		yield


class CommutativeMatcher7617(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7617._instance is None:
			CommutativeMatcher7617._instance = CommutativeMatcher7617()
		return CommutativeMatcher7617._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7616
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7618
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7619
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7636
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7637
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7621.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7622
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7638
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7799
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7604(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7604._instance is None:
			CommutativeMatcher7604._instance = CommutativeMatcher7604()
		return CommutativeMatcher7604._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7603
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7605
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7606
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7607
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7608
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7609
								if len(subjects2) == 0:
									# State 7610
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7612.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7613
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7614
								if len(subjects2) == 0:
									# State 7615
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7626
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7627
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7628
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7629
								if len(subjects2) == 0:
									# State 7630
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7632.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7633
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7634
								if len(subjects2) == 0:
									# State 7635
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7617.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7623
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7624
							if len(subjects2) == 0:
								# State 7625
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7639
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7640
							if len(subjects2) == 0:
								# State 7641
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7800
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7801
							if len(subjects2) == 0:
								# State 7802
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7803
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7804
							if len(subjects2) == 0:
								# State 7805
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7207(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7207._instance is None:
			CommutativeMatcher7207._instance = CommutativeMatcher7207()
		return CommutativeMatcher7207._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7206
		return
		yield


class CommutativeMatcher7203(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7203._instance is None:
			CommutativeMatcher7203._instance = CommutativeMatcher7203()
		return CommutativeMatcher7203._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7202
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7204
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7205
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7222
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7223
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7207.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7208
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7224
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		return
		yield


class CommutativeMatcher5732(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({3: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({4: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    5: (5, Multiset({5: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    6: (6, Multiset({6: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    7: (7, Multiset({5: 1, 7: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5732._instance is None:
			CommutativeMatcher5732._instance = CommutativeMatcher5732()
		return CommutativeMatcher5732._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5731
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7191
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7192
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7193
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7194
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7195
								if len(subjects2) == 0:
									# State 7196
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7198.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7199
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7200
								if len(subjects2) == 0:
									# State 7201
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7212
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7213
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7214
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7215
								if len(subjects2) == 0:
									# State 7216
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7218.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7219
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7220
								if len(subjects2) == 0:
									# State 7221
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1:
				tmp21 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp21)
				except ValueError:
					pass
				else:
					# State 7295
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp23 = subjects2.popleft()
						# State 7296
						if len(subjects2) == 0:
							# State 7297
							if len(subjects) == 0:
								# 2: x**2
								yield 2, subst1
						subjects2.appendleft(tmp23)
					if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
						tmp24 = subjects2.popleft()
						associative1 = tmp24
						associative_type1 = type(tmp24)
						subjects25 = deque(op_iter(tmp24))
						matcher = CommutativeMatcher7604.get()
						tmp26 = subjects25
						subjects25 = []
						for s in tmp26:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp26, subst1):
							if pattern_index == 0:
								# State 7642
								if len(subjects2) == 0:
									# State 7643
									if len(subjects) == 0:
										# 3: F**(c*sqrt(d + x*e)/sqrt(f + x*g))
										yield 3, subst2
							if pattern_index == 1:
								# State 7806
								if len(subjects2) == 0:
									# State 7807
									if len(subjects) == 0:
										# 4: F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
										yield 4, subst2
						subjects2.appendleft(tmp24)
					if len(subjects2) >= 1:
						tmp27 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp27)
						except ValueError:
							pass
						else:
							# State 8386
							if len(subjects2) == 0:
								# State 8387
								if len(subjects) == 0:
									# 5: u**n
									yield 5, subst2
						subjects2.appendleft(tmp27)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8521
						if len(subjects2) == 0:
							# State 8522
							if len(subjects) == 0:
								# 6: v**m
								yield 6, subst2
					if len(subjects2) >= 1:
						tmp30 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp30)
						except ValueError:
							pass
						else:
							# State 8521
							if len(subjects2) == 0:
								# State 8522
								if len(subjects) == 0:
									# 6: v**m
									yield 6, subst2
						subjects2.appendleft(tmp30)
				subjects2.appendleft(tmp21)
			if len(subjects2) >= 1:
				tmp32 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp32)
				except ValueError:
					pass
				else:
					# State 8837
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8838
						if len(subjects2) == 0:
							# State 8839
							if len(subjects) == 0:
								# 7: w**n2
								yield 7, subst2
					if len(subjects2) >= 1:
						tmp35 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp35)
						except ValueError:
							pass
						else:
							# State 8838
							if len(subjects2) == 0:
								# State 8839
								if len(subjects) == 0:
									# 7: w**n2
									yield 7, subst2
						subjects2.appendleft(tmp35)
				subjects2.appendleft(tmp32)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp37 = subjects2.popleft()
				associative1 = tmp37
				associative_type1 = type(tmp37)
				subjects38 = deque(op_iter(tmp37))
				matcher = CommutativeMatcher7203.get()
				tmp39 = subjects38
				subjects38 = []
				for s in tmp39:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp39, subst0):
					if pattern_index == 0:
						# State 7209
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp40 = subjects2.popleft()
							# State 7210
							if len(subjects2) == 0:
								# State 7211
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp40)
					if pattern_index == 1:
						# State 7225
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp41 = subjects2.popleft()
							# State 7226
							if len(subjects2) == 0:
								# State 7227
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp41)
				subjects2.appendleft(tmp37)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8519
			if len(subjects) >= 1:
				tmp43 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp43)
				except ValueError:
					pass
				else:
					# State 8520
					if len(subjects) == 0:
						# 6: v**m
						yield 6, subst2
				subjects.appendleft(tmp43)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8835
			if len(subjects) >= 1:
				tmp46 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp46)
				except ValueError:
					pass
				else:
					# State 8836
					if len(subjects) == 0:
						# 7: w**n2
						yield 7, subst2
				subjects.appendleft(tmp46)
		return
		yield


class CommutativeMatcher7352(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7352._instance is None:
			CommutativeMatcher7352._instance = CommutativeMatcher7352()
		return CommutativeMatcher7352._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7351
		return
		yield


class CommutativeMatcher7347(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      
]),
    1: (1, Multiset({0: 1, 2: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 0
	anonymous_patterns = {0}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7347._instance is None:
			CommutativeMatcher7347._instance = CommutativeMatcher7347()
		return CommutativeMatcher7347._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7346
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp1 = subjects.popleft()
			# State 7348
			if len(subjects) == 0:
				# 0: 1
				yield 0, subst0
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7349
			if len(subjects) >= 1:
				tmp3 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 7350
					if len(subjects) == 0:
						# 1: x*e
						yield 1, subst2
				subjects.appendleft(tmp3)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7357
			if len(subjects) >= 1:
				tmp6 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7358
					if len(subjects) == 0:
						# 2: x*g
						yield 2, subst2
				subjects.appendleft(tmp6)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher7352.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 7353
					if len(subjects) == 0:
						# 1: x*e
						yield 1, subst1
				if pattern_index == 1:
					# State 7359
					if len(subjects) == 0:
						# 2: x*g
						yield 2, subst1
			subjects.appendleft(tmp8)
		return
		yield


class CommutativeMatcher5745(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    4: (4, Multiset({3: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    5: (5, Multiset({4: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5745._instance is None:
			CommutativeMatcher5745._instance = CommutativeMatcher5745()
		return CommutativeMatcher5745._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5744
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7345
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp3 = subjects2.popleft()
				associative1 = tmp3
				associative_type1 = type(tmp3)
				subjects4 = deque(op_iter(tmp3))
				matcher = CommutativeMatcher7347.get()
				tmp5 = subjects4
				subjects4 = []
				for s in tmp5:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp5, subst0):
					if pattern_index == 0:
						# State 7354
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp6 = subjects2.popleft()
							# State 7355
							if len(subjects2) == 0:
								# State 7356
								if len(subjects) == 0:
									# 0: sqrt(x*e + 1)
									yield 0, subst1
							subjects2.appendleft(tmp6)
					if pattern_index == 1:
						# State 7360
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp7 = subjects2.popleft()
							# State 7361
							if len(subjects2) == 0:
								# State 7362
								if len(subjects) == 0:
									# 1: 1/sqrt(x*g + 1)
									yield 1, subst1
							subjects2.appendleft(tmp7)
				subjects2.appendleft(tmp3)
			if len(subjects2) >= 1:
				tmp8 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.3.2.1.0', tmp8)
				except ValueError:
					pass
				else:
					# State 7840
					if len(subjects2) >= 1 and subjects2[0] == 2:
						tmp10 = subjects2.popleft()
						# State 7841
						if len(subjects2) == 0:
							# State 7842
							if len(subjects) == 0:
								# 2: x**2
								yield 2, subst1
						subjects2.appendleft(tmp10)
				subjects2.appendleft(tmp8)
			if len(subjects2) >= 1:
				tmp11 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp11)
				except ValueError:
					pass
				else:
					# State 8575
					if len(subjects2) >= 1:
						tmp13 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp13)
						except ValueError:
							pass
						else:
							# State 8576
							if len(subjects2) == 0:
								# State 8577
								if len(subjects) == 0:
									# 3: y**n
									yield 3, subst2
						subjects2.appendleft(tmp13)
				subjects2.appendleft(tmp11)
			if len(subjects2) >= 1:
				tmp15 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp15)
				except ValueError:
					pass
				else:
					# State 9084
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 9085
						if len(subjects2) == 0:
							# State 9086
							if len(subjects) == 0:
								# 4: v**n
								yield 4, subst2
					if len(subjects2) >= 1:
						tmp18 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp18)
						except ValueError:
							pass
						else:
							# State 9085
							if len(subjects2) == 0:
								# State 9086
								if len(subjects) == 0:
									# 4: v**n
									yield 4, subst2
						subjects2.appendleft(tmp18)
				subjects2.appendleft(tmp15)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 9082
			if len(subjects) >= 1:
				tmp21 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp21)
				except ValueError:
					pass
				else:
					# State 9083
					if len(subjects) == 0:
						# 4: v**n
						yield 4, subst2
				subjects.appendleft(tmp21)
		return
		yield


class CommutativeMatcher6048(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.0_4', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_5', 1, 1, 1), Mul)
]),
    3: (3, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6048._instance is None:
			CommutativeMatcher6048._instance = CommutativeMatcher6048()
		return CommutativeMatcher6048._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6047
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8620
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_2', tmp3)
				except ValueError:
					pass
				else:
					# State 8621
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8622
							if len(subjects2) == 0:
								# State 8623
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6185(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_4', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.0_6', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_7', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6185._instance is None:
			CommutativeMatcher6185._instance = CommutativeMatcher6185()
		return CommutativeMatcher6185._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6184
		return
		yield


class CommutativeMatcher6726(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6726._instance is None:
			CommutativeMatcher6726._instance = CommutativeMatcher6726()
		return CommutativeMatcher6726._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6725
		return
		yield


class CommutativeMatcher7008(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7008._instance is None:
			CommutativeMatcher7008._instance = CommutativeMatcher7008()
		return CommutativeMatcher7008._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7007
		return
		yield


class CommutativeMatcher7021(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7021._instance is None:
			CommutativeMatcher7021._instance = CommutativeMatcher7021()
		return CommutativeMatcher7021._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7020
		return
		yield


class CommutativeMatcher7017(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7017._instance is None:
			CommutativeMatcher7017._instance = CommutativeMatcher7017()
		return CommutativeMatcher7017._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7016
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7018
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7019
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher7021.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 7022
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6737(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6737._instance is None:
			CommutativeMatcher6737._instance = CommutativeMatcher6737()
		return CommutativeMatcher6737._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6736
		return
		yield


class CommutativeMatcher6733(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6733._instance is None:
			CommutativeMatcher6733._instance = CommutativeMatcher6733()
		return CommutativeMatcher6733._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6732
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6734
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6735
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6737.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6738
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6831(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6831._instance is None:
			CommutativeMatcher6831._instance = CommutativeMatcher6831()
		return CommutativeMatcher6831._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6830
		return
		yield


class CommutativeMatcher6838(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6838._instance is None:
			CommutativeMatcher6838._instance = CommutativeMatcher6838()
		return CommutativeMatcher6838._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6837
		return
		yield


class CommutativeMatcher6834(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6834._instance is None:
			CommutativeMatcher6834._instance = CommutativeMatcher6834()
		return CommutativeMatcher6834._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6833
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6835
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6836
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6838.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6839
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7037(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7037._instance is None:
			CommutativeMatcher7037._instance = CommutativeMatcher7037()
		return CommutativeMatcher7037._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7036
		return
		yield


class CommutativeMatcher7046(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7046._instance is None:
			CommutativeMatcher7046._instance = CommutativeMatcher7046()
		return CommutativeMatcher7046._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7045
		return
		yield


class CommutativeMatcher7042(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7042._instance is None:
			CommutativeMatcher7042._instance = CommutativeMatcher7042()
		return CommutativeMatcher7042._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7041
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7043
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7044
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher7046.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 7047
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6826(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, None), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6826._instance is None:
			CommutativeMatcher6826._instance = CommutativeMatcher6826()
		return CommutativeMatcher6826._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6825
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0', 0)
		except ValueError:
			pass
		else:
			# State 6827
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.2.1.1.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6828
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.2.1.1.0', tmp3)
					except ValueError:
						pass
					else:
						# State 6829
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp5 = subjects.popleft()
				associative1 = tmp5
				associative_type1 = type(tmp5)
				subjects6 = deque(op_iter(tmp5))
				matcher = CommutativeMatcher6831.get()
				tmp7 = subjects6
				subjects6 = []
				for s in tmp7:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp7, subst1):
					if pattern_index == 0:
						# State 6832
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Add):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher6834.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 6840
					if len(subjects) == 0:
						# 0: a + x*b
						yield 0, subst1
			subjects.appendleft(tmp8)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp11 = subjects.popleft()
			subjects12 = deque(op_iter(tmp11))
			# State 7030
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7031
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7032
					if len(subjects12) >= 1:
						tmp15 = subjects12.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0', tmp15)
						except ValueError:
							pass
						else:
							# State 7033
							if len(subjects12) >= 1:
								tmp17 = subjects12.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2', tmp17)
								except ValueError:
									pass
								else:
									# State 7034
									if len(subjects12) == 0:
										# State 7035
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst4
								subjects12.appendleft(tmp17)
						subjects12.appendleft(tmp15)
				if len(subjects12) >= 1 and isinstance(subjects12[0], Mul):
					tmp19 = subjects12.popleft()
					associative1 = tmp19
					associative_type1 = type(tmp19)
					subjects20 = deque(op_iter(tmp19))
					matcher = CommutativeMatcher7037.get()
					tmp21 = subjects20
					subjects20 = []
					for s in tmp21:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp21, subst1):
						if pattern_index == 0:
							# State 7038
							if len(subjects12) >= 1:
								tmp22 = []
								tmp22.append(subjects12.popleft())
								while True:
									if len(tmp22) > 1:
										tmp23 = create_operation_expression(associative1, tmp22)
									elif len(tmp22) == 1:
										tmp23 = tmp22[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2.2.2', tmp23)
									except ValueError:
										pass
									else:
										# State 7039
										if len(subjects12) == 0:
											# State 7040
											if len(subjects) == 0:
												# 1: (a + x*b)**n
												yield 1, subst3
									if len(subjects12) == 0:
										break
									tmp22.append(subjects12.popleft())
								subjects12.extendleft(reversed(tmp22))
					subjects12.appendleft(tmp19)
			if len(subjects12) >= 1 and isinstance(subjects12[0], Add):
				tmp25 = subjects12.popleft()
				associative1 = tmp25
				associative_type1 = type(tmp25)
				subjects26 = deque(op_iter(tmp25))
				matcher = CommutativeMatcher7042.get()
				tmp27 = subjects26
				subjects26 = []
				for s in tmp27:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp27, subst0):
					if pattern_index == 0:
						# State 7048
						if len(subjects12) >= 1:
							tmp28 = []
							tmp28.append(subjects12.popleft())
							while True:
								if len(tmp28) > 1:
									tmp29 = create_operation_expression(associative1, tmp28)
								elif len(tmp28) == 1:
									tmp29 = tmp28[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2.2', tmp29)
								except ValueError:
									pass
								else:
									# State 7049
									if len(subjects12) == 0:
										# State 7050
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst2
								if len(subjects12) == 0:
									break
								tmp28.append(subjects12.popleft())
							subjects12.extendleft(reversed(tmp28))
				subjects12.appendleft(tmp25)
			subjects.appendleft(tmp11)
		return
		yield


class CommutativeMatcher6751(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6751._instance is None:
			CommutativeMatcher6751._instance = CommutativeMatcher6751()
		return CommutativeMatcher6751._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6750
		return
		yield


class CommutativeMatcher7066(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7066._instance is None:
			CommutativeMatcher7066._instance = CommutativeMatcher7066()
		return CommutativeMatcher7066._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7065
		return
		yield


class CommutativeMatcher7077(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7077._instance is None:
			CommutativeMatcher7077._instance = CommutativeMatcher7077()
		return CommutativeMatcher7077._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7076
		return
		yield


class CommutativeMatcher7073(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7073._instance is None:
			CommutativeMatcher7073._instance = CommutativeMatcher7073()
		return CommutativeMatcher7073._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7072
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7074
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7075
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher7077.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 7078
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6760(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6760._instance is None:
			CommutativeMatcher6760._instance = CommutativeMatcher6760()
		return CommutativeMatcher6760._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6759
		return
		yield


class CommutativeMatcher6756(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6756._instance is None:
			CommutativeMatcher6756._instance = CommutativeMatcher6756()
		return CommutativeMatcher6756._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6755
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6757
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6758
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6760.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6761
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6852(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6852._instance is None:
			CommutativeMatcher6852._instance = CommutativeMatcher6852()
		return CommutativeMatcher6852._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6851
		return
		yield


class CommutativeMatcher6859(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.1.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.1.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6859._instance is None:
			CommutativeMatcher6859._instance = CommutativeMatcher6859()
		return CommutativeMatcher6859._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6858
		return
		yield


class CommutativeMatcher6855(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.1.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6855._instance is None:
			CommutativeMatcher6855._instance = CommutativeMatcher6855()
		return CommutativeMatcher6855._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6854
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6856
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6857
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher6859.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 6860
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher7091(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7091._instance is None:
			CommutativeMatcher7091._instance = CommutativeMatcher7091()
		return CommutativeMatcher7091._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7090
		return
		yield


class CommutativeMatcher7100(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7100._instance is None:
			CommutativeMatcher7100._instance = CommutativeMatcher7100()
		return CommutativeMatcher7100._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7099
		return
		yield


class CommutativeMatcher7096(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7096._instance is None:
			CommutativeMatcher7096._instance = CommutativeMatcher7096()
		return CommutativeMatcher7096._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7095
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7097
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7098
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp4 = subjects.popleft()
			associative1 = tmp4
			associative_type1 = type(tmp4)
			subjects5 = deque(op_iter(tmp4))
			matcher = CommutativeMatcher7100.get()
			tmp6 = subjects5
			subjects5 = []
			for s in tmp6:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp6, subst0):
				if pattern_index == 0:
					# State 7101
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
			subjects.appendleft(tmp4)
		return
		yield


class CommutativeMatcher6847(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, None), Mul)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6847._instance is None:
			CommutativeMatcher6847._instance = CommutativeMatcher6847()
		return CommutativeMatcher6847._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6846
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2.1.0', 0)
		except ValueError:
			pass
		else:
			# State 6848
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.2.1.1.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6849
				if len(subjects) >= 1:
					tmp3 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.2.1.1.0', tmp3)
					except ValueError:
						pass
					else:
						# State 6850
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst3
					subjects.appendleft(tmp3)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp5 = subjects.popleft()
				associative1 = tmp5
				associative_type1 = type(tmp5)
				subjects6 = deque(op_iter(tmp5))
				matcher = CommutativeMatcher6852.get()
				tmp7 = subjects6
				subjects6 = []
				for s in tmp7:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp7, subst1):
					if pattern_index == 0:
						# State 6853
						if len(subjects) == 0:
							# 0: a + x*b
							yield 0, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Add):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher6855.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 6861
					if len(subjects) == 0:
						# 0: a + x*b
						yield 0, subst1
			subjects.appendleft(tmp8)
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp11 = subjects.popleft()
			subjects12 = deque(op_iter(tmp11))
			# State 7084
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7085
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7086
					if len(subjects12) >= 1:
						tmp15 = subjects12.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0', tmp15)
						except ValueError:
							pass
						else:
							# State 7087
							if len(subjects12) >= 1:
								tmp17 = subjects12.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2', tmp17)
								except ValueError:
									pass
								else:
									# State 7088
									if len(subjects12) == 0:
										# State 7089
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst4
								subjects12.appendleft(tmp17)
						subjects12.appendleft(tmp15)
				if len(subjects12) >= 1 and isinstance(subjects12[0], Mul):
					tmp19 = subjects12.popleft()
					associative1 = tmp19
					associative_type1 = type(tmp19)
					subjects20 = deque(op_iter(tmp19))
					matcher = CommutativeMatcher7091.get()
					tmp21 = subjects20
					subjects20 = []
					for s in tmp21:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp21, subst1):
						if pattern_index == 0:
							# State 7092
							if len(subjects12) >= 1:
								tmp22 = []
								tmp22.append(subjects12.popleft())
								while True:
									if len(tmp22) > 1:
										tmp23 = create_operation_expression(associative1, tmp22)
									elif len(tmp22) == 1:
										tmp23 = tmp22[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2.2.2', tmp23)
									except ValueError:
										pass
									else:
										# State 7093
										if len(subjects12) == 0:
											# State 7094
											if len(subjects) == 0:
												# 1: (a + x*b)**n
												yield 1, subst3
									if len(subjects12) == 0:
										break
									tmp22.append(subjects12.popleft())
								subjects12.extendleft(reversed(tmp22))
					subjects12.appendleft(tmp19)
			if len(subjects12) >= 1 and isinstance(subjects12[0], Add):
				tmp25 = subjects12.popleft()
				associative1 = tmp25
				associative_type1 = type(tmp25)
				subjects26 = deque(op_iter(tmp25))
				matcher = CommutativeMatcher7096.get()
				tmp27 = subjects26
				subjects26 = []
				for s in tmp27:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp27, subst0):
					if pattern_index == 0:
						# State 7102
						if len(subjects12) >= 1:
							tmp28 = []
							tmp28.append(subjects12.popleft())
							while True:
								if len(tmp28) > 1:
									tmp29 = create_operation_expression(associative1, tmp28)
								elif len(tmp28) == 1:
									tmp29 = tmp28[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2.2', tmp29)
								except ValueError:
									pass
								else:
									# State 7103
									if len(subjects12) == 0:
										# State 7104
										if len(subjects) == 0:
											# 1: (a + x*b)**n
											yield 1, subst2
								if len(subjects12) == 0:
									break
								tmp28.append(subjects12.popleft())
							subjects12.extendleft(reversed(tmp28))
				subjects12.appendleft(tmp25)
			subjects.appendleft(tmp11)
		return
		yield


class CommutativeMatcher5990(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({3: 1, 4: 1, 5: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    5: (5, Multiset({3: 1, 4: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
]),
    6: (6, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5990._instance is None:
			CommutativeMatcher5990._instance = CommutativeMatcher5990()
		return CommutativeMatcher5990._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5989
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 6744
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 6745
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6746
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 6747
							if len(subjects2) >= 1:
								tmp7 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2', tmp7)
								except ValueError:
									pass
								else:
									# State 6748
									if len(subjects2) == 0:
										# State 6749
										if len(subjects) == 0:
											# 0: (a + x*b)**n
											yield 0, subst4
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp9 = subjects2.popleft()
					associative1 = tmp9
					associative_type1 = type(tmp9)
					subjects10 = deque(op_iter(tmp9))
					matcher = CommutativeMatcher6751.get()
					tmp11 = subjects10
					subjects10 = []
					for s in tmp11:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp11, subst1):
						if pattern_index == 0:
							# State 6752
							if len(subjects2) >= 1:
								tmp12 = []
								tmp12.append(subjects2.popleft())
								while True:
									if len(tmp12) > 1:
										tmp13 = create_operation_expression(associative1, tmp12)
									elif len(tmp12) == 1:
										tmp13 = tmp12[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2.2', tmp13)
									except ValueError:
										pass
									else:
										# State 6753
										if len(subjects2) == 0:
											# State 6754
											if len(subjects) == 0:
												# 0: (a + x*b)**n
												yield 0, subst3
									if len(subjects2) == 0:
										break
									tmp12.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp12))
					subjects2.appendleft(tmp9)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.2.0', 1)
			except ValueError:
				pass
			else:
				# State 7056
				if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
					tmp16 = subjects2.popleft()
					subjects17 = deque(op_iter(tmp16))
					# State 7057
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2.2.0', 0)
					except ValueError:
						pass
					else:
						# State 7058
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.2.1.0_1', 1)
						except ValueError:
							pass
						else:
							# State 7059
							if len(subjects17) >= 1:
								tmp20 = subjects17.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2.1.0', tmp20)
								except ValueError:
									pass
								else:
									# State 7060
									if len(subjects17) >= 1:
										tmp22 = subjects17.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.2.2', tmp22)
										except ValueError:
											pass
										else:
											# State 7061
											if len(subjects17) == 0:
												# State 7062
												if len(subjects2) >= 1:
													tmp24 = subjects2.popleft()
													subst6 = Substitution(subst5)
													try:
														subst6.try_add_variable('i2.2.2', tmp24)
													except ValueError:
														pass
													else:
														# State 7063
														if len(subjects2) == 0:
															# State 7064
															if len(subjects) == 0:
																# 2: (d*(a + x*b)**n)**p
																yield 2, subst6
													subjects2.appendleft(tmp24)
										subjects17.appendleft(tmp22)
								subjects17.appendleft(tmp20)
						if len(subjects17) >= 1 and isinstance(subjects17[0], Mul):
							tmp26 = subjects17.popleft()
							associative1 = tmp26
							associative_type1 = type(tmp26)
							subjects27 = deque(op_iter(tmp26))
							matcher = CommutativeMatcher7066.get()
							tmp28 = subjects27
							subjects27 = []
							for s in tmp28:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp28, subst2):
								if pattern_index == 0:
									# State 7067
									if len(subjects17) >= 1:
										tmp29 = []
										tmp29.append(subjects17.popleft())
										while True:
											if len(tmp29) > 1:
												tmp30 = create_operation_expression(associative1, tmp29)
											elif len(tmp29) == 1:
												tmp30 = tmp29[0]
											else:
												assert False, "Unreachable"
											subst4 = Substitution(subst3)
											try:
												subst4.try_add_variable('i2.2.2.2', tmp30)
											except ValueError:
												pass
											else:
												# State 7068
												if len(subjects17) == 0:
													# State 7069
													if len(subjects2) >= 1:
														tmp32 = subjects2.popleft()
														subst5 = Substitution(subst4)
														try:
															subst5.try_add_variable('i2.2.2', tmp32)
														except ValueError:
															pass
														else:
															# State 7070
															if len(subjects2) == 0:
																# State 7071
																if len(subjects) == 0:
																	# 2: (d*(a + x*b)**n)**p
																	yield 2, subst5
														subjects2.appendleft(tmp32)
											if len(subjects17) == 0:
												break
											tmp29.append(subjects17.popleft())
										subjects17.extendleft(reversed(tmp29))
							subjects17.appendleft(tmp26)
					if len(subjects17) >= 1 and isinstance(subjects17[0], Add):
						tmp34 = subjects17.popleft()
						associative1 = tmp34
						associative_type1 = type(tmp34)
						subjects35 = deque(op_iter(tmp34))
						matcher = CommutativeMatcher7073.get()
						tmp36 = subjects35
						subjects35 = []
						for s in tmp36:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp36, subst1):
							if pattern_index == 0:
								# State 7079
								if len(subjects17) >= 1:
									tmp37 = []
									tmp37.append(subjects17.popleft())
									while True:
										if len(tmp37) > 1:
											tmp38 = create_operation_expression(associative1, tmp37)
										elif len(tmp37) == 1:
											tmp38 = tmp37[0]
										else:
											assert False, "Unreachable"
										subst3 = Substitution(subst2)
										try:
											subst3.try_add_variable('i2.2.2.2', tmp38)
										except ValueError:
											pass
										else:
											# State 7080
											if len(subjects17) == 0:
												# State 7081
												if len(subjects2) >= 1:
													tmp40 = subjects2.popleft()
													subst4 = Substitution(subst3)
													try:
														subst4.try_add_variable('i2.2.2', tmp40)
													except ValueError:
														pass
													else:
														# State 7082
														if len(subjects2) == 0:
															# State 7083
															if len(subjects) == 0:
																# 2: (d*(a + x*b)**n)**p
																yield 2, subst4
													subjects2.appendleft(tmp40)
										if len(subjects17) == 0:
											break
										tmp37.append(subjects17.popleft())
									subjects17.extendleft(reversed(tmp37))
						subjects17.appendleft(tmp34)
					subjects2.appendleft(tmp16)
			if len(subjects2) >= 1:
				tmp42 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1', tmp42)
				except ValueError:
					pass
				else:
					# State 8724
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2', 1)
					except ValueError:
						pass
					else:
						# State 8725
						if len(subjects2) == 0:
							# State 8726
							if len(subjects) == 0:
								# 3: v**m
								yield 3, subst2
					if len(subjects2) >= 1:
						tmp45 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2', tmp45)
						except ValueError:
							pass
						else:
							# State 8725
							if len(subjects2) == 0:
								# State 8726
								if len(subjects) == 0:
									# 3: v**m
									yield 3, subst2
						subjects2.appendleft(tmp45)
				subjects2.appendleft(tmp42)
			if len(subjects2) >= 1:
				tmp47 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1_1', tmp47)
				except ValueError:
					pass
				else:
					# State 8729
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8730
						if len(subjects2) == 0:
							# State 8731
							if len(subjects) == 0:
								# 4: w**n
								yield 4, subst2
					if len(subjects2) >= 1:
						tmp50 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2_1', tmp50)
						except ValueError:
							pass
						else:
							# State 8730
							if len(subjects2) == 0:
								# State 8731
								if len(subjects) == 0:
									# 4: w**n
									yield 4, subst2
						subjects2.appendleft(tmp50)
				subjects2.appendleft(tmp47)
			if len(subjects2) >= 1:
				tmp52 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1_2', tmp52)
				except ValueError:
					pass
				else:
					# State 8734
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2_2', 1)
					except ValueError:
						pass
					else:
						# State 8735
						if len(subjects2) == 0:
							# State 8736
							if len(subjects) == 0:
								# 5: z**q
								yield 5, subst2
					if len(subjects2) >= 1:
						tmp55 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.2_2', tmp55)
						except ValueError:
							pass
						else:
							# State 8735
							if len(subjects2) == 0:
								# State 8736
								if len(subjects) == 0:
									# 5: z**q
									yield 5, subst2
						subjects2.appendleft(tmp55)
				subjects2.appendleft(tmp52)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp57 = subjects2.popleft()
				associative1 = tmp57
				associative_type1 = type(tmp57)
				subjects58 = deque(op_iter(tmp57))
				matcher = CommutativeMatcher6756.get()
				tmp59 = subjects58
				subjects58 = []
				for s in tmp59:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp59, subst0):
					if pattern_index == 0:
						# State 6762
						if len(subjects2) >= 1:
							tmp60 = []
							tmp60.append(subjects2.popleft())
							while True:
								if len(tmp60) > 1:
									tmp61 = create_operation_expression(associative1, tmp60)
								elif len(tmp60) == 1:
									tmp61 = tmp60[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2', tmp61)
								except ValueError:
									pass
								else:
									# State 6763
									if len(subjects2) == 0:
										# State 6764
										if len(subjects) == 0:
											# 0: (a + x*b)**n
											yield 0, subst2
								if len(subjects2) == 0:
									break
								tmp60.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp60))
				subjects2.appendleft(tmp57)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
				tmp63 = subjects2.popleft()
				associative1 = tmp63
				associative_type1 = type(tmp63)
				subjects64 = deque(op_iter(tmp63))
				matcher = CommutativeMatcher6847.get()
				tmp65 = subjects64
				subjects64 = []
				for s in tmp65:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp65, subst0):
					if pattern_index == 0:
						# State 6862
						if len(subjects2) >= 1:
							tmp66 = []
							tmp66.append(subjects2.popleft())
							while True:
								if len(tmp66) > 1:
									tmp67 = create_operation_expression(associative1, tmp66)
								elif len(tmp66) == 1:
									tmp67 = tmp66[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2', tmp67)
								except ValueError:
									pass
								else:
									# State 6863
									if len(subjects2) == 0:
										# State 6864
										if len(subjects) == 0:
											# 1: (d*(a + x*b))**p
											yield 1, subst2
								if len(subjects2) == 0:
									break
								tmp66.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp66))
					if pattern_index == 1:
						# State 7105
						if len(subjects2) >= 1:
							tmp69 = []
							tmp69.append(subjects2.popleft())
							while True:
								if len(tmp69) > 1:
									tmp70 = create_operation_expression(associative1, tmp69)
								elif len(tmp69) == 1:
									tmp70 = tmp69[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2.2', tmp70)
								except ValueError:
									pass
								else:
									# State 7106
									if len(subjects2) == 0:
										# State 7107
										if len(subjects) == 0:
											# 2: (d*(a + x*b)**n)**p
											yield 2, subst2
								if len(subjects2) == 0:
									break
								tmp69.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp69))
				subjects2.appendleft(tmp63)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2', 1)
		except ValueError:
			pass
		else:
			# State 8722
			if len(subjects) >= 1:
				tmp73 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1', tmp73)
				except ValueError:
					pass
				else:
					# State 8723
					if len(subjects) == 0:
						# 3: v**m
						yield 3, subst2
				subjects.appendleft(tmp73)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8727
			if len(subjects) >= 1:
				tmp76 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1_1', tmp76)
				except ValueError:
					pass
				else:
					# State 8728
					if len(subjects) == 0:
						# 4: w**n
						yield 4, subst2
				subjects.appendleft(tmp76)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.2_2', 1)
		except ValueError:
			pass
		else:
			# State 8732
			if len(subjects) >= 1:
				tmp79 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1_2', tmp79)
				except ValueError:
					pass
				else:
					# State 8733
					if len(subjects) == 0:
						# 5: z**q
						yield 5, subst2
				subjects.appendleft(tmp79)
		return
		yield


class CommutativeMatcher7397(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7397._instance is None:
			CommutativeMatcher7397._instance = CommutativeMatcher7397()
		return CommutativeMatcher7397._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7396
		return
		yield


class CommutativeMatcher7417(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7417._instance is None:
			CommutativeMatcher7417._instance = CommutativeMatcher7417()
		return CommutativeMatcher7417._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7416
		return
		yield


class CommutativeMatcher7406(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7406._instance is None:
			CommutativeMatcher7406._instance = CommutativeMatcher7406()
		return CommutativeMatcher7406._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7405
		return
		yield


class CommutativeMatcher7402(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7402._instance is None:
			CommutativeMatcher7402._instance = CommutativeMatcher7402()
		return CommutativeMatcher7402._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7401
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7403
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7404
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7421
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7422
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7406.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7407
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7423
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7749
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7389(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7389._instance is None:
			CommutativeMatcher7389._instance = CommutativeMatcher7389()
		return CommutativeMatcher7389._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7388
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7390
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7391
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7392
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7393
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7394
								if len(subjects2) == 0:
									# State 7395
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7397.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7398
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7399
								if len(subjects2) == 0:
									# State 7400
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7411
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7412
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7413
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7414
								if len(subjects2) == 0:
									# State 7415
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7417.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7418
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7419
								if len(subjects2) == 0:
									# State 7420
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7402.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7408
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7409
							if len(subjects2) == 0:
								# State 7410
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7424
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7425
							if len(subjects2) == 0:
								# State 7426
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7750
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7751
							if len(subjects2) == 0:
								# State 7752
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7753
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7754
							if len(subjects2) == 0:
								# State 7755
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7121(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7121._instance is None:
			CommutativeMatcher7121._instance = CommutativeMatcher7121()
		return CommutativeMatcher7121._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7120
		return
		yield


class CommutativeMatcher7141(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7141._instance is None:
			CommutativeMatcher7141._instance = CommutativeMatcher7141()
		return CommutativeMatcher7141._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7140
		return
		yield


class CommutativeMatcher7439(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7439._instance is None:
			CommutativeMatcher7439._instance = CommutativeMatcher7439()
		return CommutativeMatcher7439._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7438
		return
		yield


class CommutativeMatcher7459(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7459._instance is None:
			CommutativeMatcher7459._instance = CommutativeMatcher7459()
		return CommutativeMatcher7459._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7458
		return
		yield


class CommutativeMatcher7448(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7448._instance is None:
			CommutativeMatcher7448._instance = CommutativeMatcher7448()
		return CommutativeMatcher7448._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7447
		return
		yield


class CommutativeMatcher7444(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7444._instance is None:
			CommutativeMatcher7444._instance = CommutativeMatcher7444()
		return CommutativeMatcher7444._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7443
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7445
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7446
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7463
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7464
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7448.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7449
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7465
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7758
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7431(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7431._instance is None:
			CommutativeMatcher7431._instance = CommutativeMatcher7431()
		return CommutativeMatcher7431._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7430
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7432
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7433
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7434
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7435
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7436
								if len(subjects2) == 0:
									# State 7437
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7439.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7440
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7441
								if len(subjects2) == 0:
									# State 7442
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7453
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7454
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7455
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7456
								if len(subjects2) == 0:
									# State 7457
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7459.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7460
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7461
								if len(subjects2) == 0:
									# State 7462
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7444.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7450
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7451
							if len(subjects2) == 0:
								# State 7452
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7466
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7467
							if len(subjects2) == 0:
								# State 7468
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7759
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7760
							if len(subjects2) == 0:
								# State 7761
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7762
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7763
							if len(subjects2) == 0:
								# State 7764
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7130(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7130._instance is None:
			CommutativeMatcher7130._instance = CommutativeMatcher7130()
		return CommutativeMatcher7130._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7129
		return
		yield


class CommutativeMatcher7126(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7126._instance is None:
			CommutativeMatcher7126._instance = CommutativeMatcher7126()
		return CommutativeMatcher7126._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7125
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7127
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7128
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7145
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7146
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7130.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7131
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7147
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		return
		yield


class CommutativeMatcher5760(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({2: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({3: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({4: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    5: (5, Multiset({5: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5760._instance is None:
			CommutativeMatcher5760._instance = CommutativeMatcher5760()
		return CommutativeMatcher5760._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5759
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7114
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7115
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7116
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7117
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7118
								if len(subjects2) == 0:
									# State 7119
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7121.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7122
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7123
								if len(subjects2) == 0:
									# State 7124
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7135
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7136
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7137
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7138
								if len(subjects2) == 0:
									# State 7139
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7141.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7142
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7143
								if len(subjects2) == 0:
									# State 7144
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1:
				tmp21 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp21)
				except ValueError:
					pass
				else:
					# State 7429
					if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
						tmp23 = subjects2.popleft()
						associative1 = tmp23
						associative_type1 = type(tmp23)
						subjects24 = deque(op_iter(tmp23))
						matcher = CommutativeMatcher7431.get()
						tmp25 = subjects24
						subjects24 = []
						for s in tmp25:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp25, subst1):
							if pattern_index == 0:
								# State 7469
								if len(subjects2) == 0:
									# State 7470
									if len(subjects) == 0:
										# 2: F**(c*sqrt(d + x*e)/sqrt(f + x*g))
										yield 2, subst2
							if pattern_index == 1:
								# State 7765
								if len(subjects2) == 0:
									# State 7766
									if len(subjects) == 0:
										# 3: F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
										yield 3, subst2
						subjects2.appendleft(tmp23)
					if len(subjects2) >= 1:
						tmp26 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp26)
						except ValueError:
							pass
						else:
							# State 8399
							if len(subjects2) == 0:
								# State 8400
								if len(subjects) == 0:
									# 4: u**n
									yield 4, subst2
						subjects2.appendleft(tmp26)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8498
						if len(subjects2) == 0:
							# State 8499
							if len(subjects) == 0:
								# 5: v**m
								yield 5, subst2
					if len(subjects2) >= 1:
						tmp29 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp29)
						except ValueError:
							pass
						else:
							# State 8498
							if len(subjects2) == 0:
								# State 8499
								if len(subjects) == 0:
									# 5: v**m
									yield 5, subst2
						subjects2.appendleft(tmp29)
				subjects2.appendleft(tmp21)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp31 = subjects2.popleft()
				associative1 = tmp31
				associative_type1 = type(tmp31)
				subjects32 = deque(op_iter(tmp31))
				matcher = CommutativeMatcher7126.get()
				tmp33 = subjects32
				subjects32 = []
				for s in tmp33:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp33, subst0):
					if pattern_index == 0:
						# State 7132
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp34 = subjects2.popleft()
							# State 7133
							if len(subjects2) == 0:
								# State 7134
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp34)
					if pattern_index == 1:
						# State 7148
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp35 = subjects2.popleft()
							# State 7149
							if len(subjects2) == 0:
								# State 7150
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp35)
				subjects2.appendleft(tmp31)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8496
			if len(subjects) >= 1:
				tmp37 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp37)
				except ValueError:
					pass
				else:
					# State 8497
					if len(subjects) == 0:
						# 5: v**m
						yield 5, subst2
				subjects.appendleft(tmp37)
		return
		yield


class CommutativeMatcher7319(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7319._instance is None:
			CommutativeMatcher7319._instance = CommutativeMatcher7319()
		return CommutativeMatcher7319._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7318
		return
		yield


class CommutativeMatcher7314(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      
]),
    1: (1, Multiset({0: 1, 2: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 0
	anonymous_patterns = {0}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7314._instance is None:
			CommutativeMatcher7314._instance = CommutativeMatcher7314()
		return CommutativeMatcher7314._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7313
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp1 = subjects.popleft()
			# State 7315
			if len(subjects) == 0:
				# 0: 1
				yield 0, subst0
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7316
			if len(subjects) >= 1:
				tmp3 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 7317
					if len(subjects) == 0:
						# 1: x*e
						yield 1, subst2
				subjects.appendleft(tmp3)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7324
			if len(subjects) >= 1:
				tmp6 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp6)
				except ValueError:
					pass
				else:
					# State 7325
					if len(subjects) == 0:
						# 2: x*g
						yield 2, subst2
				subjects.appendleft(tmp6)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp8 = subjects.popleft()
			associative1 = tmp8
			associative_type1 = type(tmp8)
			subjects9 = deque(op_iter(tmp8))
			matcher = CommutativeMatcher7319.get()
			tmp10 = subjects9
			subjects9 = []
			for s in tmp10:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp10, subst0):
				if pattern_index == 0:
					# State 7320
					if len(subjects) == 0:
						# 1: x*e
						yield 1, subst1
				if pattern_index == 1:
					# State 7326
					if len(subjects) == 0:
						# 2: x*g
						yield 2, subst1
			subjects.appendleft(tmp8)
		return
		yield


class CommutativeMatcher6127(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    1: (1, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6127._instance is None:
			CommutativeMatcher6127._instance = CommutativeMatcher6127()
		return CommutativeMatcher6127._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6126
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7312
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp3 = subjects2.popleft()
				associative1 = tmp3
				associative_type1 = type(tmp3)
				subjects4 = deque(op_iter(tmp3))
				matcher = CommutativeMatcher7314.get()
				tmp5 = subjects4
				subjects4 = []
				for s in tmp5:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp5, subst0):
					if pattern_index == 0:
						# State 7321
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp6 = subjects2.popleft()
							# State 7322
							if len(subjects2) == 0:
								# State 7323
								if len(subjects) == 0:
									# 0: sqrt(x*e + 1)
									yield 0, subst1
							subjects2.appendleft(tmp6)
					if pattern_index == 1:
						# State 7327
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp7 = subjects2.popleft()
							# State 7328
							if len(subjects2) == 0:
								# State 7329
								if len(subjects) == 0:
									# 1: 1/sqrt(x*g + 1)
									yield 1, subst1
							subjects2.appendleft(tmp7)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6201(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6201._instance is None:
			CommutativeMatcher6201._instance = CommutativeMatcher6201()
		return CommutativeMatcher6201._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6200
		return
		yield


class CommutativeMatcher7484(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7484._instance is None:
			CommutativeMatcher7484._instance = CommutativeMatcher7484()
		return CommutativeMatcher7484._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7483
		return
		yield


class CommutativeMatcher7504(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7504._instance is None:
			CommutativeMatcher7504._instance = CommutativeMatcher7504()
		return CommutativeMatcher7504._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7503
		return
		yield


class CommutativeMatcher7493(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7493._instance is None:
			CommutativeMatcher7493._instance = CommutativeMatcher7493()
		return CommutativeMatcher7493._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7492
		return
		yield


class CommutativeMatcher7489(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7489._instance is None:
			CommutativeMatcher7489._instance = CommutativeMatcher7489()
		return CommutativeMatcher7489._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7488
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7490
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7491
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7508
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7509
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7493.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7494
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7510
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7768
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7476(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7476._instance is None:
			CommutativeMatcher7476._instance = CommutativeMatcher7476()
		return CommutativeMatcher7476._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7475
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7477
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7478
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7479
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7480
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7481
								if len(subjects2) == 0:
									# State 7482
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7484.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7485
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7486
								if len(subjects2) == 0:
									# State 7487
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7498
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7499
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7500
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7501
								if len(subjects2) == 0:
									# State 7502
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7504.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7505
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7506
								if len(subjects2) == 0:
									# State 7507
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7489.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7495
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7496
							if len(subjects2) == 0:
								# State 7497
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7511
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7512
							if len(subjects2) == 0:
								# State 7513
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7769
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7770
							if len(subjects2) == 0:
								# State 7771
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7772
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7773
							if len(subjects2) == 0:
								# State 7774
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7159(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7159._instance is None:
			CommutativeMatcher7159._instance = CommutativeMatcher7159()
		return CommutativeMatcher7159._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7158
		return
		yield


class CommutativeMatcher7179(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7179._instance is None:
			CommutativeMatcher7179._instance = CommutativeMatcher7179()
		return CommutativeMatcher7179._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7178
		return
		yield


class CommutativeMatcher7526(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7526._instance is None:
			CommutativeMatcher7526._instance = CommutativeMatcher7526()
		return CommutativeMatcher7526._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7525
		return
		yield


class CommutativeMatcher7546(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7546._instance is None:
			CommutativeMatcher7546._instance = CommutativeMatcher7546()
		return CommutativeMatcher7546._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7545
		return
		yield


class CommutativeMatcher7535(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.3.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.3.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7535._instance is None:
			CommutativeMatcher7535._instance = CommutativeMatcher7535()
		return CommutativeMatcher7535._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7534
		return
		yield


class CommutativeMatcher7531(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.3.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.3.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 0: 1}), [
      
]),
    3: (3, Multiset({2: 1, 1: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7531._instance is None:
			CommutativeMatcher7531._instance = CommutativeMatcher7531()
		return CommutativeMatcher7531._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7530
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7532
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7533
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.3.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7550
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0', tmp5)
				except ValueError:
					pass
				else:
					# State 7551
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher7535.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 7536
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7552
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
			subjects.appendleft(tmp7)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp10 = subjects.popleft()
			# State 7777
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp10)
		return
		yield


class CommutativeMatcher7518(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.3.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7518._instance is None:
			CommutativeMatcher7518._instance = CommutativeMatcher7518()
		return CommutativeMatcher7518._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7517
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7519
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7520
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7521
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7522
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7523
								if len(subjects2) == 0:
									# State 7524
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7526.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7527
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7528
								if len(subjects2) == 0:
									# State 7529
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.3.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7540
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.3.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7541
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.3.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7542
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7543
								if len(subjects2) == 0:
									# State 7544
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7546.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7547
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7548
								if len(subjects2) == 0:
									# State 7549
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp21 = subjects2.popleft()
				associative1 = tmp21
				associative_type1 = type(tmp21)
				subjects22 = deque(op_iter(tmp21))
				matcher = CommutativeMatcher7531.get()
				tmp23 = subjects22
				subjects22 = []
				for s in tmp23:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp23, subst0):
					if pattern_index == 0:
						# State 7537
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp24 = subjects2.popleft()
							# State 7538
							if len(subjects2) == 0:
								# State 7539
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp24)
					if pattern_index == 1:
						# State 7553
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp25 = subjects2.popleft()
							# State 7554
							if len(subjects2) == 0:
								# State 7555
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp25)
					if pattern_index == 2:
						# State 7778
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp26 = subjects2.popleft()
							# State 7779
							if len(subjects2) == 0:
								# State 7780
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp26)
					if pattern_index == 3:
						# State 7781
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp27 = subjects2.popleft()
							# State 7782
							if len(subjects2) == 0:
								# State 7783
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp27)
				subjects2.appendleft(tmp21)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher7168(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i2.2.1.1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7168._instance is None:
			CommutativeMatcher7168._instance = CommutativeMatcher7168()
		return CommutativeMatcher7168._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7167
		return
		yield


class CommutativeMatcher7164(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.2.0_1', 1, 1, 0), Add)
]),
    2: (2, Multiset({2: 1, 3: 1}), [
      
]),
    3: (3, Multiset({2: 1, 4: 1}), [
      
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = {2}

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher7164._instance is None:
			CommutativeMatcher7164._instance = CommutativeMatcher7164()
		return CommutativeMatcher7164._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 7163
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 7165
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 7166
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst2
				subjects.appendleft(tmp2)
			if len(subjects) >= 1:
				tmp4 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp4)
				except ValueError:
					pass
				else:
					# State 7338
					if len(subjects) == 0:
						# 4: x*g
						yield 4, subst2
				subjects.appendleft(tmp4)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 7183
			if len(subjects) >= 1:
				tmp7 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0', tmp7)
				except ValueError:
					pass
				else:
					# State 7184
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst2
				subjects.appendleft(tmp7)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7332
			if len(subjects) >= 1:
				tmp10 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp10)
				except ValueError:
					pass
				else:
					# State 7333
					if len(subjects) == 0:
						# 3: x*e
						yield 3, subst2
				subjects.appendleft(tmp10)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp12 = subjects.popleft()
			associative1 = tmp12
			associative_type1 = type(tmp12)
			subjects13 = deque(op_iter(tmp12))
			matcher = CommutativeMatcher7168.get()
			tmp14 = subjects13
			subjects13 = []
			for s in tmp14:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp14, subst0):
				if pattern_index == 0:
					# State 7169
					if len(subjects) == 0:
						# 0: x*e
						yield 0, subst1
				if pattern_index == 1:
					# State 7185
					if len(subjects) == 0:
						# 1: x*g
						yield 1, subst1
				if pattern_index == 2:
					# State 7334
					if len(subjects) == 0:
						# 3: x*e
						yield 3, subst1
				if pattern_index == 3:
					# State 7339
					if len(subjects) == 0:
						# 4: x*g
						yield 4, subst1
			subjects.appendleft(tmp12)
		if len(subjects) >= 1 and subjects[0] == 1:
			tmp15 = subjects.popleft()
			# State 7331
			if len(subjects) == 0:
				# 2: 1
				yield 2, subst0
			subjects.appendleft(tmp15)
		return
		yield


class CommutativeMatcher5767(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    3: (3, Multiset({0: 1, 1: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    4: (4, Multiset({2: 1, 3: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    5: (5, Multiset({4: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    6: (6, Multiset({5: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    7: (7, Multiset({6: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    8: (8, Multiset({7: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    9: (9, Multiset({8: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    10: (10, Multiset({9: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    11: (11, Multiset({8: 1, 10: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    12: (12, Multiset({8: 1, 7: 1}), [
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    13: (13, Multiset({11: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 2
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5767._instance is None:
			CommutativeMatcher5767._instance = CommutativeMatcher5767()
		return CommutativeMatcher5767._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5766
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 7152
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0', 0)
			except ValueError:
				pass
			else:
				# State 7153
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7154
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp5)
						except ValueError:
							pass
						else:
							# State 7155
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp7 = subjects2.popleft()
								# State 7156
								if len(subjects2) == 0:
									# State 7157
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst3
								subjects2.appendleft(tmp7)
						subjects2.appendleft(tmp5)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp8 = subjects2.popleft()
					associative1 = tmp8
					associative_type1 = type(tmp8)
					subjects9 = deque(op_iter(tmp8))
					matcher = CommutativeMatcher7159.get()
					tmp10 = subjects9
					subjects9 = []
					for s in tmp10:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp10, subst1):
						if pattern_index == 0:
							# State 7160
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp11 = subjects2.popleft()
								# State 7161
								if len(subjects2) == 0:
									# State 7162
									if len(subjects) == 0:
										# 0: sqrt(d + x*e)
										yield 0, subst2
								subjects2.appendleft(tmp11)
					subjects2.appendleft(tmp8)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.1.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 7173
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 7174
					if len(subjects2) >= 1:
						tmp14 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2.1.0', tmp14)
						except ValueError:
							pass
						else:
							# State 7175
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp16 = subjects2.popleft()
								# State 7176
								if len(subjects2) == 0:
									# State 7177
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst3
								subjects2.appendleft(tmp16)
						subjects2.appendleft(tmp14)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp17 = subjects2.popleft()
					associative1 = tmp17
					associative_type1 = type(tmp17)
					subjects18 = deque(op_iter(tmp17))
					matcher = CommutativeMatcher7179.get()
					tmp19 = subjects18
					subjects18 = []
					for s in tmp19:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp19, subst1):
						if pattern_index == 0:
							# State 7180
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp20 = subjects2.popleft()
								# State 7181
								if len(subjects2) == 0:
									# State 7182
									if len(subjects) == 0:
										# 1: 1/sqrt(f + x*g)
										yield 1, subst2
								subjects2.appendleft(tmp20)
					subjects2.appendleft(tmp17)
			if len(subjects2) >= 1:
				tmp21 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp21)
				except ValueError:
					pass
				else:
					# State 7516
					if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
						tmp23 = subjects2.popleft()
						associative1 = tmp23
						associative_type1 = type(tmp23)
						subjects24 = deque(op_iter(tmp23))
						matcher = CommutativeMatcher7518.get()
						tmp25 = subjects24
						subjects24 = []
						for s in tmp25:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp25, subst1):
							if pattern_index == 0:
								# State 7556
								if len(subjects2) == 0:
									# State 7557
									if len(subjects) == 0:
										# 4: F**(c*sqrt(d + x*e)/sqrt(f + x*g))
										yield 4, subst2
							if pattern_index == 1:
								# State 7784
								if len(subjects2) == 0:
									# State 7785
									if len(subjects) == 0:
										# 5: F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
										yield 5, subst2
						subjects2.appendleft(tmp23)
					if len(subjects2) >= 1:
						tmp26 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp26)
						except ValueError:
							pass
						else:
							# State 8233
							if len(subjects2) == 0:
								# State 8234
								if len(subjects) == 0:
									# 6: u**n
									yield 6, subst2
						subjects2.appendleft(tmp26)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8507
						if len(subjects2) == 0:
							# State 8508
							if len(subjects) == 0:
								# 8: v**m
								yield 8, subst2
					if len(subjects2) >= 1:
						tmp29 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp29)
						except ValueError:
							pass
						else:
							# State 8507
							if len(subjects2) == 0:
								# State 8508
								if len(subjects) == 0:
									# 8: v**m
									yield 8, subst2
						subjects2.appendleft(tmp29)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8888
						if len(subjects2) == 0:
							# State 8889
							if len(subjects) == 0:
								# 11: v**n
								yield 11, subst2
					if len(subjects2) >= 1:
						tmp32 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp32)
						except ValueError:
							pass
						else:
							# State 8888
							if len(subjects2) == 0:
								# State 8889
								if len(subjects) == 0:
									# 11: v**n
									yield 11, subst2
						subjects2.appendleft(tmp32)
				subjects2.appendleft(tmp21)
			if len(subjects2) >= 1:
				tmp34 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp34)
				except ValueError:
					pass
				else:
					# State 8466
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8467
						if len(subjects2) == 0:
							# State 8468
							if len(subjects) == 0:
								# 7: w**n2
								yield 7, subst2
					if len(subjects2) >= 1:
						tmp37 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp37)
						except ValueError:
							pass
						else:
							# State 8467
							if len(subjects2) == 0:
								# State 8468
								if len(subjects) == 0:
									# 7: w**n2
									yield 7, subst2
						subjects2.appendleft(tmp37)
					if len(subjects2) >= 1:
						tmp39 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp39)
						except ValueError:
							pass
						else:
							# State 8534
							if len(subjects2) == 0:
								# State 8535
								if len(subjects) == 0:
									# 9: y**n
									yield 9, subst2
						subjects2.appendleft(tmp39)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8650
						if len(subjects2) == 0:
							# State 8651
							if len(subjects) == 0:
								# 10: w**p
								yield 10, subst2
					if len(subjects2) >= 1:
						tmp42 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp42)
						except ValueError:
							pass
						else:
							# State 8650
							if len(subjects2) == 0:
								# State 8651
								if len(subjects) == 0:
									# 10: w**p
									yield 10, subst2
						subjects2.appendleft(tmp42)
				subjects2.appendleft(tmp34)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp44 = subjects2.popleft()
				associative1 = tmp44
				associative_type1 = type(tmp44)
				subjects45 = deque(op_iter(tmp44))
				matcher = CommutativeMatcher7164.get()
				tmp46 = subjects45
				subjects45 = []
				for s in tmp46:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp46, subst0):
					if pattern_index == 0:
						# State 7170
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp47 = subjects2.popleft()
							# State 7171
							if len(subjects2) == 0:
								# State 7172
								if len(subjects) == 0:
									# 0: sqrt(d + x*e)
									yield 0, subst1
							subjects2.appendleft(tmp47)
					if pattern_index == 1:
						# State 7186
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp48 = subjects2.popleft()
							# State 7187
							if len(subjects2) == 0:
								# State 7188
								if len(subjects) == 0:
									# 1: 1/sqrt(f + x*g)
									yield 1, subst1
							subjects2.appendleft(tmp48)
					if pattern_index == 2:
						# State 7335
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp49 = subjects2.popleft()
							# State 7336
							if len(subjects2) == 0:
								# State 7337
								if len(subjects) == 0:
									# 2: sqrt(x*e + 1)
									yield 2, subst1
							subjects2.appendleft(tmp49)
					if pattern_index == 3:
						# State 7340
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp50 = subjects2.popleft()
							# State 7341
							if len(subjects2) == 0:
								# State 7342
								if len(subjects) == 0:
									# 3: 1/sqrt(x*g + 1)
									yield 3, subst1
							subjects2.appendleft(tmp50)
				subjects2.appendleft(tmp44)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 8464
			if len(subjects) >= 1:
				tmp52 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp52)
				except ValueError:
					pass
				else:
					# State 8465
					if len(subjects) == 0:
						# 7: w**n2
						yield 7, subst2
				subjects.appendleft(tmp52)
			if len(subjects) >= 1:
				tmp54 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp54)
				except ValueError:
					pass
				else:
					# State 8887
					if len(subjects) == 0:
						# 11: v**n
						yield 11, subst2
				subjects.appendleft(tmp54)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2', 1)
		except ValueError:
			pass
		else:
			# State 8505
			if len(subjects) >= 1:
				tmp57 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp57)
				except ValueError:
					pass
				else:
					# State 8506
					if len(subjects) == 0:
						# 8: v**m
						yield 8, subst2
				subjects.appendleft(tmp57)
			if len(subjects) >= 1:
				tmp59 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp59)
				except ValueError:
					pass
				else:
					# State 8649
					if len(subjects) == 0:
						# 10: w**p
						yield 10, subst2
				subjects.appendleft(tmp59)
		return
		yield


class CommutativeMatcher5763(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    2: (2, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, None), Add)
]),
    3: (3, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    4: (4, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    5: (5, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    6: (6, Multiset({4: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    7: (7, Multiset({5: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    8: (8, Multiset({6: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    9: (9, Multiset({7: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    10: (10, Multiset({7: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    11: (11, Multiset({7: 1, 8: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    12: (12, Multiset({9: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    13: (13, Multiset({9: 1, 10: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
]),
    14: (14, Multiset({11: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    15: (15, Multiset({12: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Add)
]),
    16: (16, Multiset({9: 1, 8: 1}), [
      
]),
    17: (17, Multiset({9: 1, 13: 1}), [
      (VariableWithCount('i2.2.0', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5763._instance is None:
			CommutativeMatcher5763._instance = CommutativeMatcher5763()
		return CommutativeMatcher5763._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5762
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 5764
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 5765
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst2
				subjects.appendleft(tmp2)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2_1', 1)
			except ValueError:
				pass
			else:
				# State 8458
				if len(subjects) >= 1:
					tmp5 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1_1', tmp5)
					except ValueError:
						pass
					else:
						# State 8459
						if len(subjects) == 0:
							# 8: c*w**n2
							yield 8, subst3
					subjects.appendleft(tmp5)
				if len(subjects) >= 1:
					tmp7 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp7)
					except ValueError:
						pass
					else:
						# State 8883
						if len(subjects) == 0:
							# 13: b*v**n
							yield 13, subst3
					subjects.appendleft(tmp7)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp9 = subjects.popleft()
				subjects10 = deque(op_iter(tmp9))
				# State 8460
				if len(subjects10) >= 1:
					tmp11 = subjects10.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_1', tmp11)
					except ValueError:
						pass
					else:
						# State 8461
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8462
							if len(subjects10) == 0:
								# State 8463
								if len(subjects) == 0:
									# 8: c*w**n2
									yield 8, subst3
						if len(subjects10) >= 1:
							tmp14 = subjects10.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp14)
							except ValueError:
								pass
							else:
								# State 8462
								if len(subjects10) == 0:
									# State 8463
									if len(subjects) == 0:
										# 8: c*w**n2
										yield 8, subst3
							subjects10.appendleft(tmp14)
						if len(subjects10) >= 1:
							tmp16 = subjects10.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp16)
							except ValueError:
								pass
							else:
								# State 8532
								if len(subjects10) == 0:
									# State 8533
									if len(subjects) == 0:
										# 10: b*y**n
										yield 10, subst3
							subjects10.appendleft(tmp16)
					subjects10.appendleft(tmp11)
				if len(subjects10) >= 1:
					tmp18 = subjects10.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp18)
					except ValueError:
						pass
					else:
						# State 8884
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8885
							if len(subjects10) == 0:
								# State 8886
								if len(subjects) == 0:
									# 13: b*v**n
									yield 13, subst3
						if len(subjects10) >= 1:
							tmp21 = subjects10.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp21)
							except ValueError:
								pass
							else:
								# State 8885
								if len(subjects10) == 0:
									# State 8886
									if len(subjects) == 0:
										# 13: b*v**n
										yield 13, subst3
							subjects10.appendleft(tmp21)
					subjects10.appendleft(tmp18)
				subjects.appendleft(tmp9)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 5801
			if len(subjects) >= 1:
				tmp24 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp24)
				except ValueError:
					pass
				else:
					# State 5802
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst2
				subjects.appendleft(tmp24)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_3', 1)
		except ValueError:
			pass
		else:
			# State 6203
			if len(subjects) >= 1:
				tmp27 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp27)
				except ValueError:
					pass
				else:
					# State 6204
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst2
				subjects.appendleft(tmp27)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 7472
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp30 = subjects.popleft()
				subjects31 = deque(op_iter(tmp30))
				# State 7473
				if len(subjects31) >= 1:
					tmp32 = subjects31.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp32)
					except ValueError:
						pass
					else:
						# State 7474
						if len(subjects31) >= 1 and isinstance(subjects31[0], Mul):
							tmp34 = subjects31.popleft()
							associative1 = tmp34
							associative_type1 = type(tmp34)
							subjects35 = deque(op_iter(tmp34))
							matcher = CommutativeMatcher7476.get()
							tmp36 = subjects35
							subjects35 = []
							for s in tmp36:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp36, subst2):
								if pattern_index == 0:
									# State 7514
									if len(subjects31) == 0:
										# State 7515
										if len(subjects) == 0:
											# 5: b*F**(c*sqrt(d + x*e)/sqrt(f + x*g))
											yield 5, subst3
								if pattern_index == 1:
									# State 7775
									if len(subjects31) == 0:
										# State 7776
										if len(subjects) == 0:
											# 6: b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
											yield 6, subst3
							subjects31.appendleft(tmp34)
						if len(subjects31) >= 1:
							tmp37 = subjects31.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp37)
							except ValueError:
								pass
							else:
								# State 8231
								if len(subjects31) == 0:
									# State 8232
									if len(subjects) == 0:
										# 7: a*u**n
										yield 7, subst3
							subjects31.appendleft(tmp37)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2', 1)
						except ValueError:
							pass
						else:
							# State 8503
							if len(subjects31) == 0:
								# State 8504
								if len(subjects) == 0:
									# 9: c*v**m
									yield 9, subst3
						if len(subjects31) >= 1:
							tmp40 = subjects31.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp40)
							except ValueError:
								pass
							else:
								# State 8503
								if len(subjects31) == 0:
									# State 8504
									if len(subjects) == 0:
										# 9: c*v**m
										yield 9, subst3
							subjects31.appendleft(tmp40)
					subjects31.appendleft(tmp32)
				subjects.appendleft(tmp30)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2', 1)
			except ValueError:
				pass
			else:
				# State 8501
				if len(subjects) >= 1:
					tmp43 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp43)
					except ValueError:
						pass
					else:
						# State 8502
						if len(subjects) == 0:
							# 9: c*v**m
							yield 9, subst3
					subjects.appendleft(tmp43)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp45 = subjects.popleft()
			associative1 = tmp45
			associative_type1 = type(tmp45)
			subjects46 = deque(op_iter(tmp45))
			matcher = CommutativeMatcher5767.get()
			tmp47 = subjects46
			subjects46 = []
			for s in tmp47:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp47, subst0):
				if pattern_index == 0:
					# State 5768
					if len(subjects) == 0:
						# 0: x*b
						yield 0, subst1
				if pattern_index == 1:
					# State 5803
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst1
				if pattern_index == 2:
					# State 6205
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst1
				if pattern_index == 3:
					# State 7189
					if len(subjects) == 0:
						# 3: F*b*c*sqrt(d + x*e)/sqrt(f + x*g)
						yield 3, subst1
				if pattern_index == 4:
					# State 7343
					if len(subjects) == 0:
						# 4: F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1)
						yield 4, subst1
				if pattern_index == 5:
					# State 7558
					if len(subjects) == 0:
						# 5: b*F**(c*sqrt(d + x*e)/sqrt(f + x*g))
						yield 5, subst1
				if pattern_index == 6:
					# State 7786
					if len(subjects) == 0:
						# 6: b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1))
						yield 6, subst1
				if pattern_index == 7:
					# State 8235
					if len(subjects) == 0:
						# 7: a*u**n
						yield 7, subst1
				if pattern_index == 8:
					# State 8469
					if len(subjects) == 0:
						# 8: c*w**n2
						yield 8, subst1
				if pattern_index == 9:
					# State 8509
					if len(subjects) == 0:
						# 9: c*v**m
						yield 9, subst1
				if pattern_index == 10:
					# State 8536
					if len(subjects) == 0:
						# 10: b*y**n
						yield 10, subst1
				if pattern_index == 11:
					# State 8652
					if len(subjects) == 0:
						# 11: b*v**m*w**p
						yield 11, subst1
				if pattern_index == 12:
					# State 8664
					if len(subjects) == 0:
						# 12: b*v**m*w**n2
						yield 12, subst1
				if pattern_index == 13:
					# State 8890
					if len(subjects) == 0:
						# 13: b*v**n
						yield 13, subst1
			subjects.appendleft(tmp45)
		return
		yield


class CommutativeMatcher6081(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6081._instance is None:
			CommutativeMatcher6081._instance = CommutativeMatcher6081()
		return CommutativeMatcher6081._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6080
		return
		yield


class CommutativeMatcher5846(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    2: (2, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    3: (3, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5846._instance is None:
			CommutativeMatcher5846._instance = CommutativeMatcher5846()
		return CommutativeMatcher5846._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5845
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8554
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp3)
				except ValueError:
					pass
				else:
					# State 8555
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8556
							if len(subjects2) == 0:
								# State 8557
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			if len(subjects2) >= 1:
				tmp7 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp7)
				except ValueError:
					pass
				else:
					# State 9057
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 9058
						if len(subjects2) == 0:
							# State 9059
							if len(subjects) == 0:
								# 1: v**n
								yield 1, subst2
					if len(subjects2) >= 1:
						tmp10 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp10)
						except ValueError:
							pass
						else:
							# State 9058
							if len(subjects2) == 0:
								# State 9059
								if len(subjects) == 0:
									# 1: v**n
									yield 1, subst2
						subjects2.appendleft(tmp10)
				subjects2.appendleft(tmp7)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 9055
			if len(subjects) >= 1:
				tmp13 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp13)
				except ValueError:
					pass
				else:
					# State 9056
					if len(subjects) == 0:
						# 1: v**n
						yield 1, subst2
				subjects.appendleft(tmp13)
		return
		yield


class CommutativeMatcher6140(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6140._instance is None:
			CommutativeMatcher6140._instance = CommutativeMatcher6140()
		return CommutativeMatcher6140._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6139
		return
		yield


class CommutativeMatcher5853(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    3: (3, Multiset({}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    4: (4, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    5: (5, Multiset({1: 1}), [
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5853._instance is None:
			CommutativeMatcher5853._instance = CommutativeMatcher5853()
		return CommutativeMatcher5853._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5852
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8564
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp3)
				except ValueError:
					pass
				else:
					# State 8565
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8566
							if len(subjects2) == 0:
								# State 8567
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			if len(subjects2) >= 1:
				tmp7 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp7)
				except ValueError:
					pass
				else:
					# State 9068
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 9069
						if len(subjects2) == 0:
							# State 9070
							if len(subjects) == 0:
								# 1: v**n
								yield 1, subst2
					if len(subjects2) >= 1:
						tmp10 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2_1', tmp10)
						except ValueError:
							pass
						else:
							# State 9069
							if len(subjects2) == 0:
								# State 9070
								if len(subjects) == 0:
									# 1: v**n
									yield 1, subst2
						subjects2.appendleft(tmp10)
				subjects2.appendleft(tmp7)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.2_1', 1)
		except ValueError:
			pass
		else:
			# State 9066
			if len(subjects) >= 1:
				tmp13 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp13)
				except ValueError:
					pass
				else:
					# State 9067
					if len(subjects) == 0:
						# 1: v**n
						yield 1, subst2
				subjects.appendleft(tmp13)
		return
		yield


class CommutativeMatcher5849(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    1: (1, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, None), Add)
]),
    2: (2, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, None), Add)
]),
    3: (3, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    4: (4, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    5: (5, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    6: (6, Multiset({4: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
]),
    7: (7, Multiset({5: 1}), [
      (VariableWithCount('i2.2.0_1', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5849._instance is None:
			CommutativeMatcher5849._instance = CommutativeMatcher5849()
		return CommutativeMatcher5849._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5848
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 5850
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 5851
					if len(subjects) == 0:
						# 0: x*d
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0', 1)
		except ValueError:
			pass
		else:
			# State 6087
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', tmp5)
				except ValueError:
					pass
				else:
					# State 6088
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst2
				subjects.appendleft(tmp5)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_3', 1)
		except ValueError:
			pass
		else:
			# State 6142
			if len(subjects) >= 1:
				tmp8 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp8)
				except ValueError:
					pass
				else:
					# State 6143
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst2
				subjects.appendleft(tmp8)
			if len(subjects) >= 1:
				tmp10 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_2', tmp10)
				except ValueError:
					pass
				else:
					# State 8255
					if len(subjects) == 0:
						# 3: y*b
						yield 3, subst2
				subjects.appendleft(tmp10)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 8559
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp13 = subjects.popleft()
				subjects14 = deque(op_iter(tmp13))
				# State 8560
				if len(subjects14) >= 1:
					tmp15 = subjects14.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_1', tmp15)
					except ValueError:
						pass
					else:
						# State 8561
						if len(subjects14) >= 1:
							tmp17 = subjects14.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp17)
							except ValueError:
								pass
							else:
								# State 8562
								if len(subjects14) == 0:
									# State 8563
									if len(subjects) == 0:
										# 4: b*y**n
										yield 4, subst3
							subjects14.appendleft(tmp17)
					subjects14.appendleft(tmp15)
				if len(subjects14) >= 1:
					tmp19 = subjects14.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1', tmp19)
					except ValueError:
						pass
					else:
						# State 9063
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.2_1', 1)
						except ValueError:
							pass
						else:
							# State 9064
							if len(subjects14) == 0:
								# State 9065
								if len(subjects) == 0:
									# 5: b*v**n
									yield 5, subst3
						if len(subjects14) >= 1:
							tmp22 = subjects14.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2_1', tmp22)
							except ValueError:
								pass
							else:
								# State 9064
								if len(subjects14) == 0:
									# State 9065
									if len(subjects) == 0:
										# 5: b*v**n
										yield 5, subst3
							subjects14.appendleft(tmp22)
					subjects14.appendleft(tmp19)
				subjects.appendleft(tmp13)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.1.2_1', 1)
			except ValueError:
				pass
			else:
				# State 9061
				if len(subjects) >= 1:
					tmp25 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.1', tmp25)
					except ValueError:
						pass
					else:
						# State 9062
						if len(subjects) == 0:
							# 5: b*v**n
							yield 5, subst3
					subjects.appendleft(tmp25)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp27 = subjects.popleft()
			associative1 = tmp27
			associative_type1 = type(tmp27)
			subjects28 = deque(op_iter(tmp27))
			matcher = CommutativeMatcher5853.get()
			tmp29 = subjects28
			subjects28 = []
			for s in tmp29:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp29, subst0):
				if pattern_index == 0:
					# State 5854
					if len(subjects) == 0:
						# 0: x*d
						yield 0, subst1
				if pattern_index == 1:
					# State 6089
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst1
				if pattern_index == 2:
					# State 6144
					if len(subjects) == 0:
						# 2: x*f
						yield 2, subst1
				if pattern_index == 3:
					# State 8256
					if len(subjects) == 0:
						# 3: y*b
						yield 3, subst1
				if pattern_index == 4:
					# State 8568
					if len(subjects) == 0:
						# 4: b*y**n
						yield 4, subst1
				if pattern_index == 5:
					# State 9071
					if len(subjects) == 0:
						# 5: b*v**n
						yield 5, subst1
			subjects.appendleft(tmp27)
		return
		yield


class CommutativeMatcher6032(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0_4', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_5', 1, 1, 1), Mul)
]),
    2: (2, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6032._instance is None:
			CommutativeMatcher6032._instance = CommutativeMatcher6032()
		return CommutativeMatcher6032._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6031
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8597
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_2', tmp3)
				except ValueError:
					pass
				else:
					# State 8598
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8599
							if len(subjects2) == 0:
								# State 8600
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6173(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6173._instance is None:
			CommutativeMatcher6173._instance = CommutativeMatcher6173()
		return CommutativeMatcher6173._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6172
		return
		yield


class CommutativeMatcher6039(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_3', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_1', 1, 1, 1), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.2.1.0_4', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_5', 1, 1, 1), Mul)
]),
    3: (3, Multiset({0: 1}), [
      (VariableWithCount('i2.2.1.0_2', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6039._instance is None:
			CommutativeMatcher6039._instance = CommutativeMatcher6039()
		return CommutativeMatcher6039._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6038
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8607
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_2', tmp3)
				except ValueError:
					pass
				else:
					# State 8608
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8609
							if len(subjects2) == 0:
								# State 8610
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6035(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
]),
    2: (2, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, None), Add)
]),
    3: (3, Multiset({2: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
]),
    4: (4, Multiset({3: 1}), [
      (VariableWithCount('i2.2.0_2', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6035._instance is None:
			CommutativeMatcher6035._instance = CommutativeMatcher6035()
		return CommutativeMatcher6035._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6034
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_3', 1)
		except ValueError:
			pass
		else:
			# State 6036
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6037
					if len(subjects) == 0:
						# 0: x*f
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6175
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', tmp5)
				except ValueError:
					pass
				else:
					# State 6176
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst2
				subjects.appendleft(tmp5)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_5', 1)
		except ValueError:
			pass
		else:
			# State 8276
			if len(subjects) >= 1:
				tmp8 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_4', tmp8)
				except ValueError:
					pass
				else:
					# State 8277
					if len(subjects) == 0:
						# 2: y*b
						yield 2, subst2
				subjects.appendleft(tmp8)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_2', 1)
		except ValueError:
			pass
		else:
			# State 8602
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp11 = subjects.popleft()
				subjects12 = deque(op_iter(tmp11))
				# State 8603
				if len(subjects12) >= 1:
					tmp13 = subjects12.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.1.1_2', tmp13)
					except ValueError:
						pass
					else:
						# State 8604
						if len(subjects12) >= 1:
							tmp15 = subjects12.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp15)
							except ValueError:
								pass
							else:
								# State 8605
								if len(subjects12) == 0:
									# State 8606
									if len(subjects) == 0:
										# 3: b*y**n
										yield 3, subst3
							subjects12.appendleft(tmp15)
					subjects12.appendleft(tmp13)
				subjects.appendleft(tmp11)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp17 = subjects.popleft()
			associative1 = tmp17
			associative_type1 = type(tmp17)
			subjects18 = deque(op_iter(tmp17))
			matcher = CommutativeMatcher6039.get()
			tmp19 = subjects18
			subjects18 = []
			for s in tmp19:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp19, subst0):
				if pattern_index == 0:
					# State 6040
					if len(subjects) == 0:
						# 0: x*f
						yield 0, subst1
				if pattern_index == 1:
					# State 6177
					if len(subjects) == 0:
						# 1: x*d
						yield 1, subst1
				if pattern_index == 2:
					# State 8278
					if len(subjects) == 0:
						# 2: y*b
						yield 2, subst1
				if pattern_index == 3:
					# State 8611
					if len(subjects) == 0:
						# 3: b*y**n
						yield 3, subst1
			subjects.appendleft(tmp17)
		return
		yield


class CommutativeMatcher6065(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6065._instance is None:
			CommutativeMatcher6065._instance = CommutativeMatcher6065()
		return CommutativeMatcher6065._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6064
		return
		yield


class CommutativeMatcher6456(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.1.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6456._instance is None:
			CommutativeMatcher6456._instance = CommutativeMatcher6456()
		return CommutativeMatcher6456._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6455
		return
		yield


class CommutativeMatcher6618(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_4', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0_6', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_7', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6618._instance is None:
			CommutativeMatcher6618._instance = CommutativeMatcher6618()
		return CommutativeMatcher6618._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6617
		return
		yield


class CommutativeMatcher6625(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_4', 1, 1, 1), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.2.1.0_6', 1, 1, None), Mul),
      (VariableWithCount('i2.2.1.0_7', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6625._instance is None:
			CommutativeMatcher6625._instance = CommutativeMatcher6625()
		return CommutativeMatcher6625._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6624
		return
		yield


class CommutativeMatcher6621(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.2.0_3', 1, 1, 0), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6621._instance is None:
			CommutativeMatcher6621._instance = CommutativeMatcher6621()
		return CommutativeMatcher6621._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6620
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_4', 1)
		except ValueError:
			pass
		else:
			# State 6622
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6623
					if len(subjects) == 0:
						# 0: x*h
						yield 0, subst2
				subjects.appendleft(tmp2)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2.1.0_7', 1)
		except ValueError:
			pass
		else:
			# State 8299
			if len(subjects) >= 1:
				tmp5 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_6', tmp5)
				except ValueError:
					pass
				else:
					# State 8300
					if len(subjects) == 0:
						# 1: z*h
						yield 1, subst2
				subjects.appendleft(tmp5)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp7 = subjects.popleft()
			associative1 = tmp7
			associative_type1 = type(tmp7)
			subjects8 = deque(op_iter(tmp7))
			matcher = CommutativeMatcher6625.get()
			tmp9 = subjects8
			subjects8 = []
			for s in tmp9:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp9, subst0):
				if pattern_index == 0:
					# State 6626
					if len(subjects) == 0:
						# 0: x*h
						yield 0, subst1
				if pattern_index == 1:
					# State 8301
					if len(subjects) == 0:
						# 1: z*h
						yield 1, subst1
			subjects.appendleft(tmp7)
		return
		yield


class CommutativeMatcher6072(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul)
]),
    1: (1, Multiset({}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.0', 1, 1, None), Mul)
]),
    2: (2, Multiset({}), [
      (VariableWithCount('i2.1.1.0_1', 1, 1, 1), Mul),
      (VariableWithCount('i2.2.1.0', 1, 1, None), Mul)
]),
    3: (3, Multiset({0: 1}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul)
]),
    4: (4, Multiset({1: 1}), [
      (VariableWithCount('i2.1.1.0', 1, 1, 1), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6072._instance is None:
			CommutativeMatcher6072._instance = CommutativeMatcher6072()
		return CommutativeMatcher6072._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6071
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 8340
			if len(subjects2) >= 1:
				tmp3 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.1.1.1', tmp3)
				except ValueError:
					pass
				else:
					# State 8341
					if len(subjects2) >= 1:
						tmp5 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.1.1.2', tmp5)
						except ValueError:
							pass
						else:
							# State 8342
							if len(subjects2) == 0:
								# State 8343
								if len(subjects) == 0:
									# 0: y**n
									yield 0, subst2
						subjects2.appendleft(tmp5)
					if len(subjects2) >= 1:
						tmp7 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1.2', tmp7)
						except ValueError:
							pass
						else:
							# State 8485
							if len(subjects2) == 0:
								# State 8486
								if len(subjects) == 0:
									# 1: y**n
									yield 1, subst2
						subjects2.appendleft(tmp7)
				subjects2.appendleft(tmp3)
			subjects.appendleft(tmp1)
		return
		yield


class CommutativeMatcher6068(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, 0), Add)
]),
    1: (1, Multiset({1: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, None), Add)
]),
    2: (2, Multiset({0: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, None), Add)
]),
    3: (3, Multiset({2: 1}), [
      (VariableWithCount('i2.1.0_1', 1, 1, 0), Add)
]),
    4: (4, Multiset({3: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, None), Add)
]),
    5: (5, Multiset({4: 1}), [
      (VariableWithCount('i2.1.0', 1, 1, None), Add)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Add
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher6068._instance is None:
			CommutativeMatcher6068._instance = CommutativeMatcher6068()
		return CommutativeMatcher6068._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 6067
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.1.1.0', 1)
		except ValueError:
			pass
		else:
			# State 6069
			if len(subjects) >= 1:
				tmp2 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp2)
				except ValueError:
					pass
				else:
					# State 6070
					if len(subjects) == 0:
						# 0: b*x
						yield 0, subst2
				subjects.appendleft(tmp2)
			if len(subjects) >= 1:
				tmp4 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', tmp4)
				except ValueError:
					pass
				else:
					# State 6093
					if len(subjects) == 0:
						# 1: b*x
						yield 1, subst2
				subjects.appendleft(tmp4)
			if len(subjects) >= 1 and isinstance(subjects[0], Pow):
				tmp6 = subjects.popleft()
				subjects7 = deque(op_iter(tmp6))
				# State 8336
				if len(subjects7) >= 1:
					tmp8 = subjects7.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.1.1.1', tmp8)
					except ValueError:
						pass
					else:
						# State 8337
						if len(subjects7) >= 1:
							tmp10 = subjects7.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.1.1.2', tmp10)
							except ValueError:
								pass
							else:
								# State 8338
								if len(subjects7) == 0:
									# State 8339
									if len(subjects) == 0:
										# 3: b*y**n
										yield 3, subst3
							subjects7.appendleft(tmp10)
						if len(subjects7) >= 1:
							tmp12 = subjects7.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.2', tmp12)
							except ValueError:
								pass
							else:
								# State 8483
								if len(subjects7) == 0:
									# State 8484
									if len(subjects) == 0:
										# 4: B*y**n
										yield 4, subst3
							subjects7.appendleft(tmp12)
					subjects7.appendleft(tmp8)
				subjects.appendleft(tmp6)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.1.1.0_1', 1)
		except ValueError:
			pass
		else:
			# State 6458
			if len(subjects) >= 1:
				tmp15 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', tmp15)
				except ValueError:
					pass
				else:
					# State 6459
					if len(subjects) == 0:
						# 2: h*x
						yield 2, subst2
				subjects.appendleft(tmp15)
		if len(subjects) >= 1 and isinstance(subjects[0], Mul):
			tmp17 = subjects.popleft()
			associative1 = tmp17
			associative_type1 = type(tmp17)
			subjects18 = deque(op_iter(tmp17))
			matcher = CommutativeMatcher6072.get()
			tmp19 = subjects18
			subjects18 = []
			for s in tmp19:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp19, subst0):
				if pattern_index == 0:
					# State 6073
					if len(subjects) == 0:
						# 0: b*x
						yield 0, subst1
				if pattern_index == 1:
					# State 6094
					if len(subjects) == 0:
						# 1: b*x
						yield 1, subst1
				if pattern_index == 2:
					# State 6460
					if len(subjects) == 0:
						# 2: h*x
						yield 2, subst1
				if pattern_index == 3:
					# State 8344
					if len(subjects) == 0:
						# 3: b*y**n
						yield 3, subst1
				if pattern_index == 4:
					# State 8487
					if len(subjects) == 0:
						# 4: B*y**n
						yield 4, subst1
			subjects.appendleft(tmp17)
		return
		yield


class CommutativeMatcher5705(CommutativeMatcher):
	_instance = None
	patterns = {
    0: (0, Multiset({0: 1, 1: 1}), [
      
]),
    1: (1, Multiset({2: 1, 3: 1}), [
      
]),
    2: (2, Multiset({4: 1, 5: 1}), [
      
]),
    3: (3, Multiset({6: 1, 7: 1}), [
      
]),
    4: (4, Multiset({8: 1, 9: 1}), [
      
]),
    5: (5, Multiset({10: 1, 11: 1}), [
      
]),
    6: (6, Multiset({12: 1, 13: 1}), [
      
]),
    7: (7, Multiset({14: 1, 15: 1}), [
      
]),
    8: (8, Multiset({16: 1, 17: 1}), [
      
]),
    9: (9, Multiset({18: 1, 19: 1}), [
      
]),
    10: (10, Multiset({20: 1, 21: 1}), [
      
]),
    11: (11, Multiset({22: 1, 21: 1}), [
      
]),
    12: (12, Multiset({23: 1, 24: 1}), [
      
]),
    13: (13, Multiset({25: 1, 26: 1}), [
      
]),
    14: (14, Multiset({27: 1, 28: 1}), [
      
]),
    15: (15, Multiset({29: 1, 30: 1}), [
      
]),
    16: (16, Multiset({2: 1, 31: 1}), [
      
]),
    17: (17, Multiset({2: 1, 32: 1}), [
      
]),
    18: (18, Multiset({33: 1, 34: 1}), [
      
]),
    19: (19, Multiset({35: 1, 36: 1}), [
      
]),
    20: (20, Multiset({33: 1, 37: 1}), [
      
]),
    21: (21, Multiset({35: 1, 38: 1}), [
      
]),
    22: (22, Multiset({2: 1, 39: 1}), [
      
]),
    23: (23, Multiset({40: 1, 41: 1}), [
      
]),
    24: (24, Multiset({42: 1, 43: 1}), [
      
]),
    25: (25, Multiset({44: 1, 45: 1}), [
      
]),
    26: (26, Multiset({46: 1, 47: 1}), [
      
]),
    27: (27, Multiset({48: 1, 49: 1}), [
      
]),
    28: (28, Multiset({50: 1, 51: 1}), [
      
]),
    29: (29, Multiset({52: 1, 53: 1}), [
      
]),
    30: (30, Multiset({54: 1, 55: 1}), [
      
]),
    31: (31, Multiset({56: 1, 57: 1}), [
      
]),
    32: (32, Multiset({58: 1, 59: 1}), [
      
]),
    33: (33, Multiset({60: 1, 61: 1}), [
      
]),
    34: (34, Multiset({62: 1, 63: 1}), [
      
]),
    35: (35, Multiset({64: 1, 65: 1}), [
      
]),
    36: (36, Multiset({66: 1, 67: 1}), [
      
]),
    37: (37, Multiset({68: 1, 69: 1}), [
      
]),
    38: (38, Multiset({70: 1, 71: 1}), [
      
]),
    39: (39, Multiset({72: 1, 73: 1}), [
      
]),
    40: (40, Multiset({74: 1, 75: 1}), [
      
]),
    41: (41, Multiset({76: 1, 77: 1}), [
      
]),
    42: (42, Multiset({78: 1, 79: 1}), [
      
]),
    43: (43, Multiset({80: 1, 81: 1}), [
      
]),
    44: (44, Multiset({82: 1, 83: 1}), [
      
]),
    45: (45, Multiset({84: 1, 85: 1}), [
      
]),
    46: (46, Multiset({86: 1, 87: 1, 88: 1}), [
      
]),
    47: (47, Multiset({89: 1, 90: 1, 91: 1}), [
      
]),
    48: (48, Multiset({92: 1, 93: 1, 94: 1}), [
      
]),
    49: (49, Multiset({95: 1, 96: 1, 97: 1}), [
      
]),
    50: (50, Multiset({98: 1, 99: 1, 100: 1}), [
      
]),
    51: (51, Multiset({101: 1, 102: 1, 103: 1}), [
      
]),
    52: (52, Multiset({104: 1, 105: 1, 106: 1}), [
      
]),
    53: (53, Multiset({107: 1, 108: 1, 103: 1}), [
      
]),
    54: (54, Multiset({107: 1, 109: 1, 103: 1}), [
      
]),
    55: (55, Multiset({110: 1, 111: 1, 112: 1}), [
      
]),
    56: (56, Multiset({113: 1, 114: 1, 115: 1}), [
      
]),
    57: (57, Multiset({116: 1, 117: 1, 118: 1}), [
      
]),
    58: (58, Multiset({116: 1, 117: 1, 119: 1}), [
      
]),
    59: (59, Multiset({116: 1, 117: 1, 120: 1}), [
      
]),
    60: (60, Multiset({116: 1, 117: 1, 121: 1}), [
      
]),
    61: (61, Multiset({122: 1, 123: 1, 124: 1}), [
      
]),
    62: (62, Multiset({116: 1, 125: 1, 126: 1}), [
      
]),
    63: (63, Multiset({127: 1, 128: 1, 129: 1}), [
      
]),
    64: (64, Multiset({130: 1, 131: 1, 132: 1}), [
      
]),
    65: (65, Multiset({130: 1, 133: 1, 134: 1}), [
      
]),
    66: (66, Multiset({135: 1, 136: 1, 137: 1}), [
      
]),
    67: (67, Multiset({138: 1, 139: 1, 140: 1}), [
      
]),
    68: (68, Multiset({141: 1, 142: 1, 143: 1}), [
      
]),
    69: (69, Multiset({144: 1, 145: 1, 146: 1}), [
      
]),
    70: (70, Multiset({147: 1, 148: 1, 149: 1}), [
      
]),
    71: (71, Multiset({150: 1, 151: 1, 152: 1}), [
      
]),
    72: (72, Multiset({153: 1, 154: 1, 155: 1}), [
      
]),
    73: (73, Multiset({156: 1, 157: 1, 158: 1}), [
      
]),
    74: (74, Multiset({156: 1, 159: 1, 158: 1}), [
      
]),
    75: (75, Multiset({160: 1, 161: 1, 162: 1}), [
      
]),
    76: (76, Multiset({163: 1, 164: 1, 165: 1}), [
      
]),
    77: (77, Multiset({166: 1, 167: 1, 168: 1}), [
      
]),
    78: (78, Multiset({169: 1, 170: 1, 171: 1}), [
      
]),
    79: (79, Multiset({172: 1, 173: 1, 174: 1}), [
      
]),
    80: (80, Multiset({175: 1, 176: 1, 177: 1}), [
      
]),
    81: (81, Multiset({116: 1, 178: 1, 179: 1}), [
      
]),
    82: (82, Multiset({116: 1, 180: 1, 181: 1}), [
      
]),
    83: (83, Multiset({116: 1, 178: 1, 182: 1}), [
      
]),
    84: (84, Multiset({116: 1, 180: 1, 183: 1}), [
      
]),
    85: (85, Multiset({184: 1, 185: 1, 186: 1}), [
      
]),
    86: (86, Multiset({187: 1, 188: 1, 186: 1}), [
      
]),
    87: (87, Multiset({189: 1, 190: 1, 191: 1}), [
      
]),
    88: (88, Multiset({192: 1, 193: 1, 194: 1}), [
      
]),
    89: (89, Multiset({195: 1, 196: 1, 197: 1}), [
      
]),
    90: (90, Multiset({198: 1, 199: 1, 200: 1}), [
      
]),
    91: (91, Multiset({201: 1, 202: 1, 203: 1}), [
      
]),
    92: (92, Multiset({189: 1, 204: 1, 205: 1}), [
      
]),
    93: (93, Multiset({206: 1, 207: 1, 208: 1}), [
      
]),
    94: (94, Multiset({209: 1, 210: 1, 211: 1}), [
      
]),
    95: (95, Multiset({212: 1, 213: 1, 214: 1}), [
      
]),
    96: (96, Multiset({215: 1, 216: 1, 217: 1}), [
      
]),
    97: (97, Multiset({218: 1, 216: 1, 217: 1}), [
      
]),
    98: (98, Multiset({219: 1, 220: 1, 221: 1}), [
      
]),
    99: (99, Multiset({219: 1, 222: 1, 223: 1}), [
      
]),
    100: (100, Multiset({224: 1, 225: 1, 226: 1}), [
      
]),
    101: (101, Multiset({227: 1, 228: 1, 229: 1}), [
      
]),
    102: (102, Multiset({230: 1, 231: 1, 232: 1}), [
      
]),
    103: (103, Multiset({233: 1, 234: 1, 235: 1}), [
      
]),
    104: (104, Multiset({236: 1, 237: 1, 238: 1}), [
      
]),
    105: (105, Multiset({239: 1, 240: 1, 241: 1}), [
      
]),
    106: (106, Multiset({242: 1, 243: 1, 244: 1}), [
      
]),
    107: (107, Multiset({239: 1, 245: 1, 246: 1}), [
      
]),
    108: (108, Multiset({247: 1, 248: 1, 249: 1}), [
      
]),
    109: (109, Multiset({250: 1, 251: 1, 252: 1}), [
      
]),
    110: (110, Multiset({253: 1, 254: 1, 255: 1}), [
      
]),
    111: (111, Multiset({256: 1, 257: 1, 258: 1}), [
      
]),
    112: (112, Multiset({259: 1, 260: 1, 261: 1}), [
      
]),
    113: (113, Multiset({262: 1, 263: 1, 264: 1}), [
      
]),
    114: (114, Multiset({265: 1, 266: 1, 267: 1, 268: 1}), [
      
]),
    115: (115, Multiset({269: 1, 270: 1, 271: 1, 272: 1}), [
      
]),
    116: (116, Multiset({273: 1, 274: 1, 267: 1, 268: 1}), [
      
]),
    117: (117, Multiset({275: 1, 276: 1, 271: 1, 272: 1}), [
      
]),
    118: (118, Multiset({277: 1, 278: 1, 271: 1, 272: 1}), [
      
]),
    119: (119, Multiset({279: 1, 280: 1, 271: 1, 272: 1}), [
      
]),
    120: (120, Multiset({281: 1, 282: 1, 283: 1, 284: 1}), [
      
]),
    121: (121, Multiset({285: 1, 286: 1, 287: 1, 288: 1}), [
      
]),
    122: (122, Multiset({289: 1, 290: 1, 291: 1, 288: 1}), [
      
]),
    123: (123, Multiset({292: 1, 293: 1, 294: 1, 295: 1}), [
      
]),
    124: (124, Multiset({296: 1, 297: 1, 298: 1, 295: 1}), [
      
]),
    125: (125, Multiset({299: 1, 300: 1, 301: 1, 295: 1}), [
      
]),
    126: (126, Multiset({302: 1, 303: 1, 304: 1, 295: 1}), [
      
]),
    127: (127, Multiset({305: 1, 306: 1, 307: 1, 295: 1}), [
      
]),
    128: (128, Multiset({308: 1, 309: 1, 310: 1, 311: 1}), [
      
]),
    129: (129, Multiset({312: 1, 313: 1, 314: 1, 315: 1}), [
      
]),
    130: (130, Multiset({316: 1, 317: 1, 318: 1, 319: 1}), [
      
]),
    131: (131, Multiset({320: 1, 321: 1, 322: 1, 323: 1}), [
      
]),
    132: (132, Multiset({324: 1, 325: 1, 326: 1, 327: 1}), [
      
]),
    133: (133, Multiset({328: 1, 329: 1, 330: 1, 331: 1}), [
      
]),
    134: (134, Multiset({332: 1, 333: 1, 334: 1, 335: 1}), [
      
]),
    135: (135, Multiset({328: 1, 329: 1, 336: 1, 337: 1}), [
      
]),
    136: (136, Multiset({338: 1, 329: 1, 330: 1, 331: 1}), [
      
]),
    137: (137, Multiset({339: 1, 340: 1, 330: 1, 331: 1}), [
      
]),
    138: (138, Multiset({341: 1, 329: 1, 330: 1, 331: 1}), [
      
]),
    139: (139, Multiset({339: 1, 329: 1, 330: 1, 331: 1}), [
      
]),
    140: (140, Multiset({341: 1, 340: 1, 330: 1, 331: 1}), [
      
]),
    141: (141, Multiset({342: 1, 329: 1, 330: 1, 331: 1}), [
      
]),
    142: (142, Multiset({343: 1, 344: 1, 345: 1, 346: 1}), [
      
]),
    143: (143, Multiset({347: 1, 348: 1, 349: 1, 350: 1}), [
      
]),
    144: (144, Multiset({351: 1, 352: 1, 353: 1, 354: 1}), [
      
]),
    145: (145, Multiset({262: 1, 263: 1, 355: 1, 356: 1}), [
      
]),
    146: (146, Multiset({357: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    147: (147, Multiset({358: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    148: (148, Multiset({359: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    149: (149, Multiset({360: 1, 361: 1}), [
      
]),
    150: (150, Multiset({362: 1, 363: 1}), [
      
]),
    151: (151, Multiset({364: 1, 365: 1}), [
      
]),
    152: (152, Multiset({366: 1, 367: 1}), [
      
]),
    153: (153, Multiset({368: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    154: (154, Multiset({369: 1, 370: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    155: (155, Multiset({371: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    156: (156, Multiset({372: 1, 373: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    157: (157, Multiset({374: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    158: (158, Multiset({375: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    159: (159, Multiset({376: 1, 377: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    160: (160, Multiset({378: 1, 379: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    161: (161, Multiset({380: 1, 381: 1, 382: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    162: (162, Multiset({383: 1, 384: 1, 385: 1, 386: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    163: (163, Multiset({387: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    164: (164, Multiset({388: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    165: (165, Multiset({389: 1, 390: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    166: (166, Multiset({391: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    167: (167, Multiset({392: 1, 393: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    168: (168, Multiset({394: 1, 395: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    169: (169, Multiset({396: 1, 397: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    170: (170, Multiset({398: 1, 399: 1, 400: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    171: (171, Multiset({401: 1, 402: 1, 403: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    172: (172, Multiset({404: 1, 405: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    173: (173, Multiset({406: 1, 407: 1, 408: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    174: (174, Multiset({409: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    175: (175, Multiset({410: 1, 411: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    176: (176, Multiset({412: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    177: (177, Multiset({413: 1, 414: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    178: (178, Multiset({415: 1, 416: 1, 417: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    179: (179, Multiset({418: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    180: (180, Multiset({419: 1, 420: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    181: (181, Multiset({421: 1, 422: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    182: (182, Multiset({423: 1, 424: 1, 425: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    183: (183, Multiset({426: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    184: (184, Multiset({427: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    185: (185, Multiset({428: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    186: (186, Multiset({429: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    187: (187, Multiset({430: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    188: (188, Multiset({431: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    189: (189, Multiset({432: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    190: (190, Multiset({433: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    191: (191, Multiset({434: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    192: (192, Multiset({435: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    193: (193, Multiset({436: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    194: (194, Multiset({437: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    195: (195, Multiset({438: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    196: (196, Multiset({439: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    197: (197, Multiset({440: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    198: (198, Multiset({441: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    199: (199, Multiset({442: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
]),
    200: (200, Multiset({443: 1, 444: 1}), [
      (VariableWithCount('i2.0', 1, 1, 1), Mul)
]),
    201: (201, Multiset({445: 1}), [
      (VariableWithCount('i2.0', 1, 1, None), Mul)
])
}
	subjects = {}
	subjects_by_id = {}
	bipartite = BipartiteGraph()
	associative = Mul
	max_optional_count = 1
	anonymous_patterns = set()

	def __init__(self):
		self.add_subject(None)

	@staticmethod
	def get():
		if CommutativeMatcher5705._instance is None:
			CommutativeMatcher5705._instance = CommutativeMatcher5705()
		return CommutativeMatcher5705._instance

	@staticmethod
	def get_match_iter(subject):
		subjects = deque([subject]) if subject is not None else deque()
		subst0 = Substitution()
		# State 5704
		if len(subjects) >= 1 and isinstance(subjects[0], Pow):
			tmp1 = subjects.popleft()
			subjects2 = deque(op_iter(tmp1))
			# State 5706
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp3 = subjects2.popleft()
				associative1 = tmp3
				associative_type1 = type(tmp3)
				subjects4 = deque(op_iter(tmp3))
				matcher = CommutativeMatcher5708.get()
				tmp5 = subjects4
				subjects4 = []
				for s in tmp5:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp5, subst0):
					if pattern_index == 0:
						# State 5714
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp6 = subjects2.popleft()
							# State 5715
							if len(subjects2) == 0:
								# State 5716
								if len(subjects) == 0:
									# 0: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 0, subst1
									# 42: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71)
									yield 42, subst1
							subjects2.appendleft(tmp6)
						if len(subjects2) >= 1:
							tmp7 = []
							tmp7.append(subjects2.popleft())
							while True:
								if len(tmp7) > 1:
									tmp8 = create_operation_expression(associative1, tmp7)
								elif len(tmp7) == 1:
									tmp8 = tmp7[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp8)
								except ValueError:
									pass
								else:
									# State 5781
									if len(subjects2) == 0:
										# State 5782
										if len(subjects) == 0:
											# 256: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f120) and (cons_f205)
											yield 256, subst2
											# 259: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f201) and (cons_f202) and (cons_f206)
											yield 259, subst2
											# 6: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f73)
											yield 6, subst2
											# 40: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f23)
											yield 40, subst2
											# 10: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f74)
											yield 10, subst2
											# 78: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f71) and (cons_f18)
											yield 78, subst2
											# 80: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f18) and (cons_f120) and (cons_f121)
											yield 80, subst2
											# 18: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f77)
											yield 18, subst2
											# 82: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f18) and (cons_f122)
											yield 82, subst2
											# 23: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f79) and (cons_f81)
											yield 23, subst2
											# 25: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f79) and (cons_f82)
											yield 25, subst2
											# 250: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f201) and (cons_f202)
											yield 250, subst2
											# 247: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f120) and (cons_f200)
											yield 247, subst2
											# 253: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f120) and (cons_f182) and (cons_f203) and (cons_f204)
											yield 253, subst2
								if len(subjects2) == 0:
									break
								tmp7.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp7))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 5799
							if len(subjects2) == 0:
								# State 5800
								if len(subjects) == 0:
									# 98: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
									yield 98, subst2
									# 12: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
									yield 12, subst2
									# 29: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f84) and (cons_f86)
									yield 29, subst2
									# 86: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f17)
									yield 86, subst2
						if len(subjects2) >= 1:
							tmp11 = []
							tmp11.append(subjects2.popleft())
							while True:
								if len(tmp11) > 1:
									tmp12 = create_operation_expression(associative1, tmp11)
								elif len(tmp11) == 1:
									tmp12 = tmp11[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp12)
								except ValueError:
									pass
								else:
									# State 5799
									if len(subjects2) == 0:
										# State 5800
										if len(subjects) == 0:
											# 98: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
											yield 98, subst2
											# 12: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
											yield 12, subst2
											# 29: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f84) and (cons_f86)
											yield 29, subst2
											# 86: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f17)
											yield 86, subst2
								if len(subjects2) == 0:
									break
								tmp11.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp11))
						if len(subjects2) >= 1 and subjects2[0] == -3/2:
							tmp14 = subjects2.popleft()
							# State 5788
							if len(subjects2) == 0:
								# State 5789
								if len(subjects) == 0:
									# 8: (a + x*b)**(-3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 8, subst1
							subjects2.appendleft(tmp14)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp15 = subjects2.popleft()
							# State 5810
							if len(subjects2) == 0:
								# State 5811
								if len(subjects) == 0:
									# 192: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f183) and (cons_f184)
									yield 192, subst1
									# 195: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f183)
									yield 195, subst1
									# 206: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f189)
									yield 206, subst1
									# 14: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f43) and (cons_f76)
									yield 14, subst1
									# 16: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 16, subst1
									# 209: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f190)
									yield 209, subst1
									# 50: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f102) and (cons_f103)
									yield 50, subst1
									# 212: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f156) and (cons_f188)
									yield 212, subst1
							subjects2.appendleft(tmp15)
						if len(subjects2) >= 1 and subjects2[0] == -5/4:
							tmp16 = subjects2.popleft()
							# State 5823
							if len(subjects2) == 0:
								# State 5824
								if len(subjects) == 0:
									# 20: (a + x*b)**(-5/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f78)
									yield 20, subst1
							subjects2.appendleft(tmp16)
						if len(subjects2) >= 1 and subjects2[0] == -9/4:
							tmp17 = subjects2.popleft()
							# State 5830
							if len(subjects2) == 0:
								# State 5831
								if len(subjects) == 0:
									# 22: (a + x*b)**(-9/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f78)
									yield 22, subst1
							subjects2.appendleft(tmp17)
					if pattern_index == 1:
						# State 5720
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp18 = subjects2.popleft()
							# State 5721
							if len(subjects2) == 0:
								# State 5722
								if len(subjects) == 0:
									# 1: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 1, subst1
							subjects2.appendleft(tmp18)
						if len(subjects2) >= 1:
							tmp19 = []
							tmp19.append(subjects2.popleft())
							while True:
								if len(tmp19) > 1:
									tmp20 = create_operation_expression(associative1, tmp19)
								elif len(tmp19) == 1:
									tmp20 = tmp19[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp20)
								except ValueError:
									pass
								else:
									# State 5776
									if len(subjects2) == 0:
										# State 5777
										if len(subjects) == 0:
											# 5: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72)
											yield 5, subst2
											# 79: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f71) and (cons_f85)
											yield 79, subst2
											# 81: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f23) and (cons_f120) and (cons_f121)
											yield 81, subst2
											# 83: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f23) and (cons_f122)
											yield 83, subst2
											# 24: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f80) and (cons_f81)
											yield 24, subst2
											# 26: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f80) and (cons_f82)
											yield 26, subst2
								if len(subjects2) == 0:
									break
								tmp19.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp19))
						if len(subjects2) >= 1:
							tmp22 = []
							tmp22.append(subjects2.popleft())
							while True:
								if len(tmp22) > 1:
									tmp23 = create_operation_expression(associative1, tmp22)
								elif len(tmp22) == 1:
									tmp23 = tmp22[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp23)
								except ValueError:
									pass
								else:
									# State 5783
									if len(subjects2) == 0:
										# State 5784
										if len(subjects) == 0:
											# 11: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f74)
											yield 11, subst2
											# 59: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f31) and (cons_f107) and (cons_f108)
											yield 59, subst2
											# 19: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f77)
											yield 19, subst2
											# 7: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f73)
											yield 7, subst2
								if len(subjects2) == 0:
									break
								tmp22.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp22))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 5805
							if len(subjects2) == 0:
								# State 5806
								if len(subjects) == 0:
									# 13: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
									yield 13, subst2
						if len(subjects2) >= 1:
							tmp26 = []
							tmp26.append(subjects2.popleft())
							while True:
								if len(tmp26) > 1:
									tmp27 = create_operation_expression(associative1, tmp26)
								elif len(tmp26) == 1:
									tmp27 = tmp26[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp27)
								except ValueError:
									pass
								else:
									# State 5805
									if len(subjects2) == 0:
										# State 5806
										if len(subjects) == 0:
											# 13: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
											yield 13, subst2
								if len(subjects2) == 0:
									break
								tmp26.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp26))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 6025
							if len(subjects2) == 0:
								# State 6026
								if len(subjects) == 0:
									# 87: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
									yield 87, subst2
						if len(subjects2) >= 1:
							tmp30 = []
							tmp30.append(subjects2.popleft())
							while True:
								if len(tmp30) > 1:
									tmp31 = create_operation_expression(associative1, tmp30)
								elif len(tmp30) == 1:
									tmp31 = tmp30[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp31)
								except ValueError:
									pass
								else:
									# State 6025
									if len(subjects2) == 0:
										# State 6026
										if len(subjects) == 0:
											# 87: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
											yield 87, subst2
								if len(subjects2) == 0:
									break
								tmp30.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp30))
						if len(subjects2) >= 1 and subjects2[0] == -3/2:
							tmp33 = subjects2.popleft()
							# State 5790
							if len(subjects2) == 0:
								# State 5791
								if len(subjects) == 0:
									# 9: (c + x*d)**(-3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 9, subst1
							subjects2.appendleft(tmp33)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp34 = subjects2.popleft()
							# State 5812
							if len(subjects2) == 0:
								# State 5813
								if len(subjects) == 0:
									# 193: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f183) and (cons_f184)
									yield 193, subst1
									# 196: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f183)
									yield 196, subst1
									# 207: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f156) and (cons_f188) and (cons_f189)
									yield 207, subst1
									# 15: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f76)
									yield 15, subst1
									# 17: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
									yield 17, subst1
									# 210: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f156) and (cons_f188) and (cons_f190)
									yield 210, subst1
									# 213: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f156) and (cons_f188)
									yield 213, subst1
									# 55: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f106)
									yield 55, subst1
									# 317: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
									yield 317, subst1
							subjects2.appendleft(tmp34)
						if len(subjects2) >= 1 and subjects2[0] == -1/4:
							tmp35 = subjects2.popleft()
							# State 5825
							if len(subjects2) == 0:
								# State 5826
								if len(subjects) == 0:
									# 21: (c + x*d)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f78)
									yield 21, subst1
							subjects2.appendleft(tmp35)
					if pattern_index == 2:
						# State 5736
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp36 = subjects2.popleft()
							# State 5737
							if len(subjects2) == 0:
								# State 5738
								if len(subjects) == 0:
									# 33: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
									yield 33, subst1
									# 2: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
									yield 2, subst1
									# 35: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
									yield 35, subst1
									# 324: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
									yield 324, subst1
									# 328: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 328, subst1
									# 332: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
									yield 332, subst1
									# 116: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
									yield 116, subst1
									# 308: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 308, subst1
									# 215: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
									yield 215, subst1
									# 312: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
									yield 312, subst1
									# 122: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
									yield 122, subst1
							subjects2.appendleft(tmp36)
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 5774
							if len(subjects2) == 0:
								# State 5775
								if len(subjects) == 0:
									# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
									yield 163, subst2
									# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
									yield 4, subst2
									# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
									yield 101, subst2
									# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
									yield 262, subst2
									# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
									yield 227, subst2
									# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
									yield 104, subst2
									# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
									yield 265, subst2
									# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
									yield 383, subst2
									# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
									yield 107, subst2
									# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
									yield 127, subst2
									# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
									yield 84, subst2
									# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
									yield 279, subst2
									# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
									yield 89, subst2
									# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
									yield 378, subst2
									# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
									yield 27, subst2
									# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
									yield 380, subst2
									# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
									yield 351, subst2
						if len(subjects2) >= 1:
							tmp38 = []
							tmp38.append(subjects2.popleft())
							while True:
								if len(tmp38) > 1:
									tmp39 = create_operation_expression(associative1, tmp38)
								elif len(tmp38) == 1:
									tmp39 = tmp38[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp39)
								except ValueError:
									pass
								else:
									# State 5774
									if len(subjects2) == 0:
										# State 5775
										if len(subjects) == 0:
											# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
											yield 163, subst2
											# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
											yield 4, subst2
											# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
											yield 101, subst2
											# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
											yield 262, subst2
											# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
											yield 227, subst2
											# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
											yield 104, subst2
											# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
											yield 265, subst2
											# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
											yield 383, subst2
											# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
											yield 107, subst2
											# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
											yield 127, subst2
											# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
											yield 84, subst2
											# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
											yield 279, subst2
											# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
											yield 89, subst2
											# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
											yield 378, subst2
											# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
											yield 27, subst2
											# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
											yield 380, subst2
											# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 351, subst2
								if len(subjects2) == 0:
									break
								tmp38.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp38))
						if len(subjects2) >= 1:
							tmp41 = []
							tmp41.append(subjects2.popleft())
							while True:
								if len(tmp41) > 1:
									tmp42 = create_operation_expression(associative1, tmp41)
								elif len(tmp41) == 1:
									tmp42 = tmp41[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp42)
								except ValueError:
									pass
								else:
									# State 5920
									if len(subjects2) == 0:
										# State 5921
										if len(subjects) == 0:
											# 269: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f66) and (cons_f210)
											yield 269, subst2
											# 141: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f107) and (cons_f156)
											yield 141, subst2
											# 144: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
											yield 144, subst2
											# 273: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f94)
											yield 273, subst2
											# 147: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160) and (cons_f66)
											yield 147, subst2
											# 275: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
											yield 275, subst2
											# 277: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f212) and (cons_f66) and (cons_f213)
											yield 277, subst2
											# 150: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f161)
											yield 150, subst2
											# 281: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 281, subst2
											# 153: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f94) and (cons_f164)
											yield 153, subst2
											# 156: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f94) and (cons_f164)
											yield 156, subst2
											# 285: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f17)
											yield 285, subst2
											# 160: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f17)
											yield 160, subst2
											# 289: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f170)
											yield 289, subst2
											# 292: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
											yield 292, subst2
											# 166: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f170)
											yield 166, subst2
											# 296: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
											yield 296, subst2
											# 169: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
											yield 169, subst2
											# 299: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f17)
											yield 299, subst2
											# 44: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f95) and (cons_f96) and (cons_f97)
											yield 44, subst2
											# 172: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
											yield 172, subst2
											# 46: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f98) and (cons_f97)
											yield 46, subst2
											# 175: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
											yield 175, subst2
											# 48: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
											yield 48, subst2
											# 302: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f170)
											yield 302, subst2
											# 305: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
											yield 305, subst2
											# 58: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f31) and (cons_f107) and (cons_f108)
											yield 58, subst2
											# 64: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f111)
											yield 64, subst2
											# 320: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 320, subst2
											# 66: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f112) and (cons_f97)
											yield 66, subst2
											# 68: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f66) and (cons_f114)
											yield 68, subst2
											# 343: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
											yield 343, subst2
											# 218: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191) and (cons_f17) and (cons_f94)
											yield 218, subst2
											# 347: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 347, subst2
											# 230: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
											yield 230, subst2
											# 233: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
											yield 233, subst2
											# 236: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
											yield 236, subst2
								if len(subjects2) == 0:
									break
								tmp41.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp41))
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp44 = subjects2.popleft()
							# State 5950
							if len(subjects2) == 0:
								# State 5951
								if len(subjects) == 0:
									# 138: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
									yield 138, subst1
									# 338: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 338, subst1
									# 52: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104) and (cons_f105)
									yield 52, subst1
									# 54: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f106)
									yield 54, subst1
									# 56: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
									yield 56, subst1
									# 316: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
									yield 316, subst1
							subjects2.appendleft(tmp44)
						if len(subjects2) >= 1 and subjects2[0] == -1/3:
							tmp45 = subjects2.popleft()
							# State 5968
							if len(subjects2) == 0:
								# State 5969
								if len(subjects) == 0:
									# 60: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
									yield 60, subst1
									# 62: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
									yield 62, subst1
									# 135: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
									yield 135, subst1
							subjects2.appendleft(tmp45)
						if len(subjects2) >= 1 and subjects2[0] == 2:
							tmp46 = subjects2.popleft()
							# State 6121
							if len(subjects2) == 0:
								# State 6122
								if len(subjects) == 0:
									# 130: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
									yield 130, subst1
									# 110: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f141)
									yield 110, subst1
							subjects2.appendleft(tmp46)
						if len(subjects2) >= 1 and subjects2[0] == -3/2:
							tmp47 = subjects2.popleft()
							# State 6566
							if len(subjects2) == 0:
								# State 6567
								if len(subjects) == 0:
									# 339: (a + x*b)**(-3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 339, subst1
							subjects2.appendleft(tmp47)
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp48 = subjects2.popleft()
							# State 6581
							if len(subjects2) == 0:
								# State 6582
								if len(subjects) == 0:
									# 341: sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 341, subst1
							subjects2.appendleft(tmp48)
						if len(subjects2) >= 1 and subjects2[0] == 3/2:
							tmp49 = subjects2.popleft()
							# State 6596
							if len(subjects2) == 0:
								# State 6597
								if len(subjects) == 0:
									# 342: (a + x*b)**(3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 342, subst1
							subjects2.appendleft(tmp49)
					if pattern_index == 3:
						# State 5749
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp50 = subjects2.popleft()
							# State 5750
							if len(subjects2) == 0:
								# State 5751
								if len(subjects) == 0:
									# 3: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
									yield 3, subst1
									# 325: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
									yield 325, subst1
									# 309: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 309, subst1
									# 117: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
									yield 117, subst1
									# 123: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
									yield 123, subst1
							subjects2.appendleft(tmp50)
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 5860
							if len(subjects2) == 0:
								# State 5861
								if len(subjects) == 0:
									# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
									yield 128, subst2
									# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
									yield 263, subst2
									# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
									yield 266, subst2
									# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
									yield 270, subst2
									# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
									yield 145, subst2
									# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
									yield 148, subst2
									# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
									yield 276, subst2
									# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
									yield 278, subst2
									# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
									yield 151, subst2
									# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
									yield 280, subst2
									# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
									yield 154, subst2
									# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
									yield 28, subst2
									# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
									yield 157, subst2
									# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
									yield 30, subst2
									# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
									yield 159, subst2
									# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
									yield 161, subst2
									# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
									yield 164, subst2
									# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
									yield 167, subst2
									# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
									yield 170, subst2
									# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
									yield 173, subst2
									# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
									yield 85, subst2
									# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
									yield 90, subst2
									# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
									yield 352, subst2
									# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
									yield 99, subst2
									# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
									yield 228, subst2
									# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
									yield 102, subst2
									# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
									yield 231, subst2
									# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
									yield 105, subst2
									# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
									yield 234, subst2
									# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
									yield 108, subst2
									# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
									yield 109, subst2
						if len(subjects2) >= 1:
							tmp52 = []
							tmp52.append(subjects2.popleft())
							while True:
								if len(tmp52) > 1:
									tmp53 = create_operation_expression(associative1, tmp52)
								elif len(tmp52) == 1:
									tmp53 = tmp52[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp53)
								except ValueError:
									pass
								else:
									# State 5860
									if len(subjects2) == 0:
										# State 5861
										if len(subjects) == 0:
											# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
											yield 128, subst2
											# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
											yield 263, subst2
											# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
											yield 266, subst2
											# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
											yield 270, subst2
											# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
											yield 145, subst2
											# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
											yield 148, subst2
											# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
											yield 276, subst2
											# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
											yield 278, subst2
											# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
											yield 151, subst2
											# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
											yield 280, subst2
											# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
											yield 154, subst2
											# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
											yield 28, subst2
											# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
											yield 157, subst2
											# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
											yield 30, subst2
											# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
											yield 159, subst2
											# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
											yield 161, subst2
											# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
											yield 164, subst2
											# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
											yield 167, subst2
											# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
											yield 170, subst2
											# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 173, subst2
											# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
											yield 85, subst2
											# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
											yield 90, subst2
											# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 352, subst2
											# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
											yield 99, subst2
											# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
											yield 228, subst2
											# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
											yield 102, subst2
											# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 231, subst2
											# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
											yield 105, subst2
											# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
											yield 234, subst2
											# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
											yield 108, subst2
											# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
											yield 109, subst2
								if len(subjects2) == 0:
									break
								tmp52.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp52))
						if len(subjects2) >= 1:
							tmp55 = []
							tmp55.append(subjects2.popleft())
							while True:
								if len(tmp55) > 1:
									tmp56 = create_operation_expression(associative1, tmp55)
								elif len(tmp55) == 1:
									tmp56 = tmp55[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp56)
								except ValueError:
									pass
								else:
									# State 5872
									if len(subjects2) == 0:
										# State 5873
										if len(subjects) == 0:
											# 32: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f89)
											yield 32, subst2
											# 39: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f92)
											yield 39, subst2
											# 43: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f23)
											yield 43, subst2
											# 333: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f80)
											yield 333, subst2
											# 313: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
											yield 313, subst2
											# 31: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f88)
											yield 31, subst2
								if len(subjects2) == 0:
									break
								tmp55.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp55))
						if len(subjects2) >= 1:
							tmp58 = []
							tmp58.append(subjects2.popleft())
							while True:
								if len(tmp58) > 1:
									tmp59 = create_operation_expression(associative1, tmp58)
								elif len(tmp58) == 1:
									tmp59 = tmp58[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp59)
								except ValueError:
									pass
								else:
									# State 5926
									if len(subjects2) == 0:
										# State 5927
										if len(subjects) == 0:
											# 257: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120)
											yield 257, subst2
											# 260: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f201) and (cons_f202) and (cons_f206)
											yield 260, subst2
											# 142: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f156)
											yield 142, subst2
											# 274: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f89)
											yield 274, subst2
											# 282: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 282, subst2
											# 286: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88)
											yield 286, subst2
											# 290: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88) and (cons_f170)
											yield 290, subst2
											# 293: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
											yield 293, subst2
											# 297: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 297, subst2
											# 300: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
											yield 300, subst2
											# 45: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f95) and (cons_f96) and (cons_f97)
											yield 45, subst2
											# 47: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f98) and (cons_f97)
											yield 47, subst2
											# 176: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
											yield 176, subst2
											# 49: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
											yield 49, subst2
											# 303: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
											yield 303, subst2
											# 306: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 306, subst2
											# 65: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f111)
											yield 65, subst2
											# 321: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 321, subst2
											# 67: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f92) and (cons_f112) and (cons_f97)
											yield 67, subst2
											# 69: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f114)
											yield 69, subst2
											# 344: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
											yield 344, subst2
											# 348: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 348, subst2
											# 237: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157) and (cons_f23)
											yield 237, subst2
											# 248: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f120) and (cons_f200)
											yield 248, subst2
											# 251: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f201) and (cons_f202)
											yield 251, subst2
											# 254: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120) and (cons_f203) and (cons_f204)
											yield 254, subst2
								if len(subjects2) == 0:
									break
								tmp58.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp58))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 6134
							if len(subjects2) == 0:
								# State 6135
								if len(subjects) == 0:
									# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
									yield 131, subst2
									# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
									yield 125, subst2
									# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
									yield 133, subst2
									# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
									yield 111, subst2
						if len(subjects2) >= 1:
							tmp62 = []
							tmp62.append(subjects2.popleft())
							while True:
								if len(tmp62) > 1:
									tmp63 = create_operation_expression(associative1, tmp62)
								elif len(tmp62) == 1:
									tmp63 = tmp62[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp63)
								except ValueError:
									pass
								else:
									# State 6134
									if len(subjects2) == 0:
										# State 6135
										if len(subjects) == 0:
											# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
											yield 131, subst2
											# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
											yield 125, subst2
											# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
											yield 133, subst2
											# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
											yield 111, subst2
								if len(subjects2) == 0:
									break
								tmp62.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp62))
						if len(subjects2) >= 1 and subjects2[0] == -1/3:
							tmp65 = subjects2.popleft()
							# State 5884
							if len(subjects2) == 0:
								# State 5885
								if len(subjects) == 0:
									# 216: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
									yield 216, subst1
									# 34: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
									yield 34, subst1
									# 36: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
									yield 36, subst1
							subjects2.appendleft(tmp65)
						if len(subjects2) >= 1 and subjects2[0] == -2/3:
							tmp66 = subjects2.popleft()
							# State 5896
							if len(subjects2) == 0:
								# State 5897
								if len(subjects) == 0:
									# 37: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
									yield 37, subst1
									# 38: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
									yield 38, subst1
									# 136: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
									yield 136, subst1
									# 61: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
									yield 61, subst1
									# 63: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
									yield 63, subst1
							subjects2.appendleft(tmp66)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp67 = subjects2.popleft()
							# State 5941
							if len(subjects2) == 0:
								# State 5942
								if len(subjects) == 0:
									# 329: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 329, subst1
									# 139: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
									yield 139, subst1
									# 178: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
									yield 178, subst1
									# 51: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f102) and (cons_f103)
									yield 51, subst1
									# 180: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
									yield 180, subst1
									# 53: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104)
									yield 53, subst1
									# 57: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
									yield 57, subst1
							subjects2.appendleft(tmp67)
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp68 = subjects2.popleft()
							# State 6572
							if len(subjects2) == 0:
								# State 6573
								if len(subjects) == 0:
									# 340: sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 340, subst1
							subjects2.appendleft(tmp68)
					if pattern_index == 4:
						# State 5997
						if len(subjects2) >= 1:
							tmp69 = []
							tmp69.append(subjects2.popleft())
							while True:
								if len(tmp69) > 1:
									tmp70 = create_operation_expression(associative1, tmp69)
								elif len(tmp69) == 1:
									tmp70 = tmp69[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp70)
								except ValueError:
									pass
								else:
									# State 5998
									if len(subjects2) == 0:
										# State 5999
										if len(subjects) == 0:
											# 71: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f115)
											yield 71, subst2
											# 73: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f116)
											yield 73, subst2
											# 75: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f117) and (cons_f118) and (cons_f119)
											yield 75, subst2
											# 77: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f117) and (cons_f118)
											yield 77, subst2
											# 240: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f177)
											yield 240, subst2
											# 243: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f198) and (cons_f199)
											yield 243, subst2
											# 245: (x*d + c)**n /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f117)
											yield 245, subst2
								if len(subjects2) == 0:
									break
								tmp69.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp69))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 6091
							if len(subjects2) == 0:
								# State 6092
								if len(subjects) == 0:
									# 96: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f131) and (cons_f132) and (cons_f133)
									yield 96, subst2
									# 93: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f129) and (cons_f130)
									yield 93, subst2
						if len(subjects2) >= 1:
							tmp73 = []
							tmp73.append(subjects2.popleft())
							while True:
								if len(tmp73) > 1:
									tmp74 = create_operation_expression(associative1, tmp73)
								elif len(tmp73) == 1:
									tmp74 = tmp73[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp74)
								except ValueError:
									pass
								else:
									# State 6091
									if len(subjects2) == 0:
										# State 6092
										if len(subjects) == 0:
											# 96: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f131) and (cons_f132) and (cons_f133)
											yield 96, subst2
											# 93: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f129) and (cons_f130)
											yield 93, subst2
								if len(subjects2) == 0:
									break
								tmp73.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp73))
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp76 = subjects2.popleft()
							# State 6331
							if len(subjects2) == 0:
								# State 6332
								if len(subjects) == 0:
									# 199: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f177) and (cons_f186)
									yield 199, subst1
									# 202: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f177) and (cons_f187)
									yield 202, subst1
									# 204: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f181)
									yield 204, subst1
									# 185: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f177) and (cons_f179)
									yield 185, subst1
									# 188: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f177) and (cons_f180)
									yield 188, subst1
									# 190: 1/sqrt(x*d + c) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f181)
									yield 190, subst1
							subjects2.appendleft(tmp76)
					if pattern_index == 5:
						# State 6055
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', 1)
						except ValueError:
							pass
						else:
							# State 6056
							if len(subjects2) == 0:
								# State 6057
								if len(subjects) == 0:
									# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
									yield 129, subst2
									# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
									yield 162, subst2
									# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
									yield 355, subst2
									# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
									yield 353, subst2
									# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
									yield 165, subst2
									# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
									yield 229, subst2
									# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
									yield 168, subst2
									# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
									yield 232, subst2
									# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
									yield 171, subst2
									# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
									yield 174, subst2
									# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
									yield 146, subst2
									# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
									yield 149, subst2
									# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
									yield 88, subst2
									# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
									yield 155, subst2
									# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
									yield 152, subst2
									# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
									yield 158, subst2
						if len(subjects2) >= 1:
							tmp78 = []
							tmp78.append(subjects2.popleft())
							while True:
								if len(tmp78) > 1:
									tmp79 = create_operation_expression(associative1, tmp78)
								elif len(tmp78) == 1:
									tmp79 = tmp78[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp79)
								except ValueError:
									pass
								else:
									# State 6056
									if len(subjects2) == 0:
										# State 6057
										if len(subjects) == 0:
											# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
											yield 129, subst2
											# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
											yield 162, subst2
											# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
											yield 355, subst2
											# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 353, subst2
											# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
											yield 165, subst2
											# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
											yield 229, subst2
											# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
											yield 168, subst2
											# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 232, subst2
											# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
											yield 171, subst2
											# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 174, subst2
											# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
											yield 146, subst2
											# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
											yield 149, subst2
											# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
											yield 88, subst2
											# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
											yield 155, subst2
											# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
											yield 152, subst2
											# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
											yield 158, subst2
								if len(subjects2) == 0:
									break
								tmp78.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp78))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 6150
							if len(subjects2) == 0:
								# State 6151
								if len(subjects) == 0:
									# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
									yield 112, subst2
									# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
									yield 132, subst2
									# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
									yield 134, subst2
						if len(subjects2) >= 1:
							tmp82 = []
							tmp82.append(subjects2.popleft())
							while True:
								if len(tmp82) > 1:
									tmp83 = create_operation_expression(associative1, tmp82)
								elif len(tmp82) == 1:
									tmp83 = tmp82[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp83)
								except ValueError:
									pass
								else:
									# State 6150
									if len(subjects2) == 0:
										# State 6151
										if len(subjects) == 0:
											# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
											yield 112, subst2
											# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
											yield 132, subst2
											# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
											yield 134, subst2
								if len(subjects2) == 0:
									break
								tmp82.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp82))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 6211
							if len(subjects2) == 0:
								# State 6212
								if len(subjects) == 0:
									# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
									yield 118, subst2
									# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
									yield 119, subst2
						if len(subjects2) >= 1:
							tmp86 = []
							tmp86.append(subjects2.popleft())
							while True:
								if len(tmp86) > 1:
									tmp87 = create_operation_expression(associative1, tmp86)
								elif len(tmp86) == 1:
									tmp87 = tmp86[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp87)
								except ValueError:
									pass
								else:
									# State 6211
									if len(subjects2) == 0:
										# State 6212
										if len(subjects) == 0:
											# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
											yield 118, subst2
											# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
											yield 119, subst2
								if len(subjects2) == 0:
									break
								tmp86.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp86))
						if len(subjects2) >= 1:
							tmp89 = []
							tmp89.append(subjects2.popleft())
							while True:
								if len(tmp89) > 1:
									tmp90 = create_operation_expression(associative1, tmp89)
								elif len(tmp89) == 1:
									tmp90 = tmp89[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp90)
								except ValueError:
									pass
								else:
									# State 6223
									if len(subjects2) == 0:
										# State 6224
										if len(subjects) == 0:
											# 326: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50) and (cons_f13) and (cons_f145)
											yield 326, subst2
											# 310: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
											yield 310, subst2
											# 120: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f146)
											yield 120, subst2
											# 121: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f137)
											yield 121, subst2
											# 124: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f147)
											yield 124, subst2
								if len(subjects2) == 0:
									break
								tmp89.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp89))
						if len(subjects2) >= 1:
							tmp92 = []
							tmp92.append(subjects2.popleft())
							while True:
								if len(tmp92) > 1:
									tmp93 = create_operation_expression(associative1, tmp92)
								elif len(tmp92) == 1:
									tmp93 = tmp92[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp93)
								except ValueError:
									pass
								else:
									# State 6238
									if len(subjects2) == 0:
										# State 6239
										if len(subjects) == 0:
											# 314: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
											yield 314, subst2
											# 126: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f149) and (cons_f137)
											yield 126, subst2
								if len(subjects2) == 0:
									break
								tmp92.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp92))
						if len(subjects2) >= 1:
							tmp95 = []
							tmp95.append(subjects2.popleft())
							while True:
								if len(tmp95) > 1:
									tmp96 = create_operation_expression(associative1, tmp95)
								elif len(tmp95) == 1:
									tmp96 = tmp95[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp96)
								except ValueError:
									pass
								else:
									# State 6411
									if len(subjects2) == 0:
										# State 6412
										if len(subjects) == 0:
											# 258: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f205)
											yield 258, subst2
											# 291: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f170)
											yield 291, subst2
											# 322: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 322, subst2
											# 261: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f202) and (cons_f206)
											yield 261, subst2
											# 294: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
											yield 294, subst2
											# 249: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f200)
											yield 249, subst2
											# 255: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f182) and (cons_f203) and (cons_f204)
											yield 255, subst2
											# 298: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 298, subst2
											# 235: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
											yield 235, subst2
											# 301: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
											yield 301, subst2
											# 238: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
											yield 238, subst2
											# 304: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
											yield 304, subst2
											# 307: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 307, subst2
											# 345: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
											yield 345, subst2
											# 283: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 283, subst2
											# 252: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f202)
											yield 252, subst2
											# 349: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 349, subst2
											# 287: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
											yield 287, subst2
								if len(subjects2) == 0:
									break
								tmp95.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp95))
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp98 = subjects2.popleft()
							# State 6256
							if len(subjects2) == 0:
								# State 6257
								if len(subjects) == 0:
									# 137: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
									yield 137, subst1
									# 177: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4)
									yield 177, subst1
									# 140: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
									yield 140, subst1
									# 143: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f156)
									yield 143, subst1
							subjects2.appendleft(tmp98)
						if len(subjects2) >= 1 and subjects2[0] == -1/4:
							tmp99 = subjects2.popleft()
							# State 6307
							if len(subjects2) == 0:
								# State 6308
								if len(subjects) == 0:
									# 179: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
									yield 179, subst1
									# 181: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
									yield 181, subst1
							subjects2.appendleft(tmp99)
						if len(subjects2) >= 1 and subjects2[0] == -3/4:
							tmp100 = subjects2.popleft()
							# State 6319
							if len(subjects2) == 0:
								# State 6320
								if len(subjects) == 0:
									# 182: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
									yield 182, subst1
									# 183: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
									yield 183, subst1
							subjects2.appendleft(tmp100)
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp101 = subjects2.popleft()
							# State 6349
							if len(subjects2) == 0:
								# State 6350
								if len(subjects) == 0:
									# 336: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 336, subst1
									# 194: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f182) and (cons_f184)
									yield 194, subst1
									# 197: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185)
									yield 197, subst1
							subjects2.appendleft(tmp101)
						if len(subjects2) >= 1 and subjects2[0] == -1/3:
							tmp102 = subjects2.popleft()
							# State 6384
							if len(subjects2) == 0:
								# State 6385
								if len(subjects) == 0:
									# 217: (e + x*f)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
									yield 217, subst1
							subjects2.appendleft(tmp102)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp103 = subjects2.popleft()
							# State 6536
							if len(subjects2) == 0:
								# State 6537
								if len(subjects) == 0:
									# 330: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 330, subst1
									# 334: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
									yield 334, subst1
							subjects2.appendleft(tmp103)
					if pattern_index == 6:
						# State 6166
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 6167
							if len(subjects2) == 0:
								# State 6168
								if len(subjects) == 0:
									# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
									yield 225, subst2
									# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
									yield 114, subst2
									# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
									yield 220, subst2
									# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
									yield 222, subst2
						if len(subjects2) >= 1:
							tmp105 = []
							tmp105.append(subjects2.popleft())
							while True:
								if len(tmp105) > 1:
									tmp106 = create_operation_expression(associative1, tmp105)
								elif len(tmp105) == 1:
									tmp106 = tmp105[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp106)
								except ValueError:
									pass
								else:
									# State 6167
									if len(subjects2) == 0:
										# State 6168
										if len(subjects) == 0:
											# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
											yield 225, subst2
											# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
											yield 114, subst2
											# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
											yield 220, subst2
											# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
											yield 222, subst2
								if len(subjects2) == 0:
									break
								tmp105.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp105))
					if pattern_index == 7:
						# State 6191
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', 1)
						except ValueError:
							pass
						else:
							# State 6192
							if len(subjects2) == 0:
								# State 6193
								if len(subjects) == 0:
									# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
									yield 226, subst2
									# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
									yield 115, subst2
									# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
									yield 221, subst2
									# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
									yield 223, subst2
						if len(subjects2) >= 1:
							tmp109 = []
							tmp109.append(subjects2.popleft())
							while True:
								if len(tmp109) > 1:
									tmp110 = create_operation_expression(associative1, tmp109)
								elif len(tmp109) == 1:
									tmp110 = tmp109[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp110)
								except ValueError:
									pass
								else:
									# State 6192
									if len(subjects2) == 0:
										# State 6193
										if len(subjects) == 0:
											# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
											yield 226, subst2
											# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
											yield 115, subst2
											# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
											yield 221, subst2
											# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
											yield 223, subst2
								if len(subjects2) == 0:
									break
								tmp109.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp109))
					if pattern_index == 8:
						# State 6333
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp112 = subjects2.popleft()
							# State 6334
							if len(subjects2) == 0:
								# State 6335
								if len(subjects) == 0:
									# 186: sqrt(x*d + e) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f178)
									yield 186, subst1
									# 191: sqrt(x*d + e) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f181)
									yield 191, subst1
							subjects2.appendleft(tmp112)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp113 = subjects2.popleft()
							# State 6357
							if len(subjects2) == 0:
								# State 6358
								if len(subjects) == 0:
									# 200: 1/sqrt(x*d + e) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f178) and (cons_f186)
									yield 200, subst1
									# 203: 1/sqrt(x*d + e) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f178) and (cons_f187)
									yield 203, subst1
									# 205: 1/sqrt(x*d + e) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f181)
									yield 205, subst1
							subjects2.appendleft(tmp113)
						if len(subjects2) >= 1:
							tmp114 = []
							tmp114.append(subjects2.popleft())
							while True:
								if len(tmp114) > 1:
									tmp115 = create_operation_expression(associative1, tmp114)
								elif len(tmp114) == 1:
									tmp115 = tmp114[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp115)
								except ValueError:
									pass
								else:
									# State 6419
									if len(subjects2) == 0:
										# State 6420
										if len(subjects) == 0:
											# 241: (x*d + e)**p /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f197)
											yield 241, subst2
											# 244: (x*d + e)**p /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f199)
											yield 244, subst2
											# 246: (x*d + e)**p /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
											yield 246, subst2
								if len(subjects2) == 0:
									break
								tmp114.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp114))
					if pattern_index == 9:
						# State 6368
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp117 = subjects2.popleft()
							# State 6369
							if len(subjects2) == 0:
								# State 6370
								if len(subjects) == 0:
									# 208: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f189)
									yield 208, subst1
									# 211: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f190)
									yield 211, subst1
									# 214: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f156) and (cons_f188)
									yield 214, subst1
									# 318: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
									yield 318, subst1
							subjects2.appendleft(tmp117)
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', 1)
						except ValueError:
							pass
						else:
							# State 6446
							if len(subjects2) == 0:
								# State 6447
								if len(subjects) == 0:
									# 264: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
									yield 264, subst2
						if len(subjects2) >= 1:
							tmp119 = []
							tmp119.append(subjects2.popleft())
							while True:
								if len(tmp119) > 1:
									tmp120 = create_operation_expression(associative1, tmp119)
								elif len(tmp119) == 1:
									tmp120 = tmp119[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp120)
								except ValueError:
									pass
								else:
									# State 6446
									if len(subjects2) == 0:
										# State 6447
										if len(subjects) == 0:
											# 264: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
											yield 264, subst2
								if len(subjects2) == 0:
									break
								tmp119.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp119))
					if pattern_index == 10:
						# State 6526
						if len(subjects2) >= 1:
							tmp122 = []
							tmp122.append(subjects2.popleft())
							while True:
								if len(tmp122) > 1:
									tmp123 = create_operation_expression(associative1, tmp122)
								elif len(tmp122) == 1:
									tmp123 = tmp122[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp123)
								except ValueError:
									pass
								else:
									# State 6527
									if len(subjects2) == 0:
										# State 6528
										if len(subjects) == 0:
											# 327: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
											yield 327, subst2
								if len(subjects2) == 0:
									break
								tmp122.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp122))
						if len(subjects2) >= 1:
							tmp125 = []
							tmp125.append(subjects2.popleft())
							while True:
								if len(tmp125) > 1:
									tmp126 = create_operation_expression(associative1, tmp125)
								elif len(tmp125) == 1:
									tmp126 = tmp125[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_3', tmp126)
								except ValueError:
									pass
								else:
									# State 6605
									if len(subjects2) == 0:
										# State 6606
										if len(subjects) == 0:
											# 346: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
											yield 346, subst2
											# 350: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f221)
											yield 350, subst2
								if len(subjects2) == 0:
									break
								tmp125.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp125))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_3', 1)
						except ValueError:
							pass
						else:
							# State 6632
							if len(subjects2) == 0:
								# State 6633
								if len(subjects) == 0:
									# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
									yield 354, subst2
									# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
									yield 356, subst2
						if len(subjects2) >= 1:
							tmp129 = []
							tmp129.append(subjects2.popleft())
							while True:
								if len(tmp129) > 1:
									tmp130 = create_operation_expression(associative1, tmp129)
								elif len(tmp129) == 1:
									tmp130 = tmp129[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_3', tmp130)
								except ValueError:
									pass
								else:
									# State 6632
									if len(subjects2) == 0:
										# State 6633
										if len(subjects) == 0:
											# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 354, subst2
											# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
											yield 356, subst2
								if len(subjects2) == 0:
									break
								tmp129.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp129))
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp132 = subjects2.popleft()
							# State 6542
							if len(subjects2) == 0:
								# State 6543
								if len(subjects) == 0:
									# 331: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 331, subst1
									# 335: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
									yield 335, subst1
							subjects2.appendleft(tmp132)
						if len(subjects2) >= 1 and subjects2[0] == 1/2:
							tmp133 = subjects2.popleft()
							# State 6554
							if len(subjects2) == 0:
								# State 6555
								if len(subjects) == 0:
									# 337: sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
									yield 337, subst1
							subjects2.appendleft(tmp133)
					if pattern_index == 11:
						# State 7269
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 7270
							if len(subjects2) == 0:
								# State 7271
								if len(subjects) == 0:
									# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
									yield 360, subst2
						if len(subjects2) >= 1:
							tmp135 = []
							tmp135.append(subjects2.popleft())
							while True:
								if len(tmp135) > 1:
									tmp136 = create_operation_expression(associative1, tmp135)
								elif len(tmp135) == 1:
									tmp136 = tmp135[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp136)
								except ValueError:
									pass
								else:
									# State 7270
									if len(subjects2) == 0:
										# State 7271
										if len(subjects) == 0:
											# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
											yield 360, subst2
								if len(subjects2) == 0:
									break
								tmp135.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp135))
					if pattern_index == 12:
						# State 7282
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp138 = subjects2.popleft()
							# State 7283
							if len(subjects2) == 0:
								# State 7284
								if len(subjects) == 0:
									# 361: 1/(A + C*x**2 + B*x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2005) and (cons_f2006)
									yield 361, subst1
							subjects2.appendleft(tmp138)
					if pattern_index == 13:
						# State 7309
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp139 = subjects2.popleft()
							# State 7310
							if len(subjects2) == 0:
								# State 7311
								if len(subjects) == 0:
									# 362: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
									yield 362, subst1
							subjects2.appendleft(tmp139)
					if pattern_index == 14:
						# State 7379
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 7380
							if len(subjects2) == 0:
								# State 7381
								if len(subjects) == 0:
									# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
									yield 363, subst2
						if len(subjects2) >= 1:
							tmp141 = []
							tmp141.append(subjects2.popleft())
							while True:
								if len(tmp141) > 1:
									tmp142 = create_operation_expression(associative1, tmp141)
								elif len(tmp141) == 1:
									tmp142 = tmp141[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp142)
								except ValueError:
									pass
								else:
									# State 7380
									if len(subjects2) == 0:
										# State 7381
										if len(subjects) == 0:
											# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
											yield 363, subst2
								if len(subjects2) == 0:
									break
								tmp141.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp141))
					if pattern_index == 15:
						# State 7730
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 7731
							if len(subjects2) == 0:
								# State 7732
								if len(subjects) == 0:
									# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
									yield 364, subst2
						if len(subjects2) >= 1:
							tmp145 = []
							tmp145.append(subjects2.popleft())
							while True:
								if len(tmp145) > 1:
									tmp146 = create_operation_expression(associative1, tmp145)
								elif len(tmp145) == 1:
									tmp146 = tmp145[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp146)
								except ValueError:
									pass
								else:
									# State 7731
									if len(subjects2) == 0:
										# State 7732
										if len(subjects) == 0:
											# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
											yield 364, subst2
								if len(subjects2) == 0:
									break
								tmp145.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp145))
					if pattern_index == 16:
						# State 7743
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp148 = subjects2.popleft()
							# State 7744
							if len(subjects2) == 0:
								# State 7745
								if len(subjects) == 0:
									# 365: 1/(A + C*x**2 + B*x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2005) and (cons_f2006)
									yield 365, subst1
							subjects2.appendleft(tmp148)
					if pattern_index == 17:
						# State 7830
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 7831
							if len(subjects2) == 0:
								# State 7832
								if len(subjects) == 0:
									# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
									yield 366, subst2
						if len(subjects2) >= 1:
							tmp150 = []
							tmp150.append(subjects2.popleft())
							while True:
								if len(tmp150) > 1:
									tmp151 = create_operation_expression(associative1, tmp150)
								elif len(tmp150) == 1:
									tmp151 = tmp150[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp151)
								except ValueError:
									pass
								else:
									# State 7831
									if len(subjects2) == 0:
										# State 7832
										if len(subjects) == 0:
											# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
											yield 366, subst2
								if len(subjects2) == 0:
									break
								tmp150.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp150))
					if pattern_index == 18:
						# State 7846
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp153 = subjects2.popleft()
							# State 7847
							if len(subjects2) == 0:
								# State 7848
								if len(subjects) == 0:
									# 367: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
									yield 367, subst1
							subjects2.appendleft(tmp153)
					if pattern_index == 19:
						# State 8217
						if len(subjects2) >= 1:
							tmp154 = []
							tmp154.append(subjects2.popleft())
							while True:
								if len(tmp154) > 1:
									tmp155 = create_operation_expression(associative1, tmp154)
								elif len(tmp154) == 1:
									tmp155 = tmp154[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp155)
								except ValueError:
									pass
								else:
									# State 8218
									if len(subjects2) == 0:
										# State 8219
										if len(subjects) == 0:
											# 374: (f*sqrt(c + d*x**n) + e*sqrt(a + b*x**n))**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1037)
											yield 374, subst2
											# 375: (f*sqrt(c + d*x**n) + e*sqrt(a + b*x**n))**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1036)
											yield 375, subst2
								if len(subjects2) == 0:
									break
								tmp154.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp154))
					if pattern_index == 20:
						# State 8242
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8243
							if len(subjects2) == 0:
								# State 8244
								if len(subjects) == 0:
									# 376: (v + a*u**n)**p /; (cons_f2) and (cons_f4) and (cons_f38) and (cons_f2008) and (cons_f10)
									yield 376, subst2
						if len(subjects2) >= 1:
							tmp158 = []
							tmp158.append(subjects2.popleft())
							while True:
								if len(tmp158) > 1:
									tmp159 = create_operation_expression(associative1, tmp158)
								elif len(tmp158) == 1:
									tmp159 = tmp158[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp159)
								except ValueError:
									pass
								else:
									# State 8243
									if len(subjects2) == 0:
										# State 8244
										if len(subjects) == 0:
											# 376: (v + a*u**n)**p /; (cons_f2) and (cons_f4) and (cons_f38) and (cons_f2008) and (cons_f10)
											yield 376, subst2
								if len(subjects2) == 0:
									break
								tmp158.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp158))
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp161 = subjects2.popleft()
							# State 8878
							if len(subjects2) == 0:
								# State 8879
								if len(subjects) == 0:
									# 434: 1/(v + a*u**n) /; (cons_f2) and (cons_f3) and (cons_f148) and (With6979)
									yield 434, subst1
							subjects2.appendleft(tmp161)
					if pattern_index == 21:
						# State 8267
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8268
							if len(subjects2) == 0:
								# State 8269
								if len(subjects) == 0:
									# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
									yield 384, subst2
									# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
									yield 379, subst2
									# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
									yield 381, subst2
						if len(subjects2) >= 1:
							tmp163 = []
							tmp163.append(subjects2.popleft())
							while True:
								if len(tmp163) > 1:
									tmp164 = create_operation_expression(associative1, tmp163)
								elif len(tmp163) == 1:
									tmp164 = tmp163[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp164)
								except ValueError:
									pass
								else:
									# State 8268
									if len(subjects2) == 0:
										# State 8269
										if len(subjects) == 0:
											# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
											yield 384, subst2
											# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
											yield 379, subst2
											# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
											yield 381, subst2
								if len(subjects2) == 0:
									break
								tmp163.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp163))
					if pattern_index == 22:
						# State 8290
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', 1)
						except ValueError:
							pass
						else:
							# State 8291
							if len(subjects2) == 0:
								# State 8292
								if len(subjects) == 0:
									# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
									yield 385, subst2
									# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
									yield 382, subst2
						if len(subjects2) >= 1:
							tmp167 = []
							tmp167.append(subjects2.popleft())
							while True:
								if len(tmp167) > 1:
									tmp168 = create_operation_expression(associative1, tmp167)
								elif len(tmp167) == 1:
									tmp168 = tmp167[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp168)
								except ValueError:
									pass
								else:
									# State 8291
									if len(subjects2) == 0:
										# State 8292
										if len(subjects) == 0:
											# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
											yield 385, subst2
											# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
											yield 382, subst2
								if len(subjects2) == 0:
									break
								tmp167.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp167))
					if pattern_index == 23:
						# State 8313
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_3', 1)
						except ValueError:
							pass
						else:
							# State 8314
							if len(subjects2) == 0:
								# State 8315
								if len(subjects) == 0:
									# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
									yield 386, subst2
						if len(subjects2) >= 1:
							tmp171 = []
							tmp171.append(subjects2.popleft())
							while True:
								if len(tmp171) > 1:
									tmp172 = create_operation_expression(associative1, tmp171)
								elif len(tmp171) == 1:
									tmp172 = tmp171[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_3', tmp172)
								except ValueError:
									pass
								else:
									# State 8314
									if len(subjects2) == 0:
										# State 8315
										if len(subjects) == 0:
											# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
											yield 386, subst2
								if len(subjects2) == 0:
									break
								tmp171.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp171))
					if pattern_index == 24:
						# State 8391
						if len(subjects2) >= 1:
							tmp174 = []
							tmp174.append(subjects2.popleft())
							while True:
								if len(tmp174) > 1:
									tmp175 = create_operation_expression(associative1, tmp174)
								elif len(tmp174) == 1:
									tmp175 = tmp174[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp175)
								except ValueError:
									pass
								else:
									# State 8392
									if len(subjects2) == 0:
										# State 8393
										if len(subjects) == 0:
											# 388: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
											yield 388, subst2
											# 430: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
											yield 430, subst2
											# 431: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
											yield 431, subst2
								if len(subjects2) == 0:
									break
								tmp174.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp174))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8407
							if len(subjects2) == 0:
								# State 8408
								if len(subjects) == 0:
									# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
									yield 404, subst2
									# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
									yield 389, subst2
									# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
									yield 406, subst2
						if len(subjects2) >= 1:
							tmp178 = []
							tmp178.append(subjects2.popleft())
							while True:
								if len(tmp178) > 1:
									tmp179 = create_operation_expression(associative1, tmp178)
								elif len(tmp178) == 1:
									tmp179 = tmp178[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp179)
								except ValueError:
									pass
								else:
									# State 8407
									if len(subjects2) == 0:
										# State 8408
										if len(subjects) == 0:
											# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
											yield 404, subst2
											# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
											yield 389, subst2
											# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
											yield 406, subst2
								if len(subjects2) == 0:
									break
								tmp178.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp178))
					if pattern_index == 25:
						# State 8452
						if len(subjects2) >= 1:
							tmp181 = []
							tmp181.append(subjects2.popleft())
							while True:
								if len(tmp181) > 1:
									tmp182 = create_operation_expression(associative1, tmp181)
								elif len(tmp181) == 1:
									tmp182 = tmp181[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp182)
								except ValueError:
									pass
								else:
									# State 8453
									if len(subjects2) == 0:
										# State 8454
										if len(subjects) == 0:
											# 391: (a + b*y**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (With6952)
											yield 391, subst2
								if len(subjects2) == 0:
									break
								tmp181.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp181))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8538
							if len(subjects2) == 0:
								# State 8539
								if len(subjects) == 0:
									# 396: (a + b*y**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6955)
									yield 396, subst2
						if len(subjects2) >= 1:
							tmp185 = []
							tmp185.append(subjects2.popleft())
							while True:
								if len(tmp185) > 1:
									tmp186 = create_operation_expression(associative1, tmp185)
								elif len(tmp185) == 1:
									tmp186 = tmp185[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp186)
								except ValueError:
									pass
								else:
									# State 8538
									if len(subjects2) == 0:
										# State 8539
										if len(subjects) == 0:
											# 396: (a + b*y**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6955)
											yield 396, subst2
								if len(subjects2) == 0:
									break
								tmp185.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp185))
					if pattern_index == 26:
						# State 8480
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8481
							if len(subjects2) == 0:
								# State 8482
								if len(subjects) == 0:
									# 392: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6953)
									yield 392, subst2
									# 398: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6956)
									yield 398, subst2
						if len(subjects2) >= 1:
							tmp189 = []
							tmp189.append(subjects2.popleft())
							while True:
								if len(tmp189) > 1:
									tmp190 = create_operation_expression(associative1, tmp189)
								elif len(tmp189) == 1:
									tmp190 = tmp189[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp190)
								except ValueError:
									pass
								else:
									# State 8481
									if len(subjects2) == 0:
										# State 8482
										if len(subjects) == 0:
											# 392: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6953)
											yield 392, subst2
											# 398: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6956)
											yield 398, subst2
								if len(subjects2) == 0:
									break
								tmp189.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp189))
					if pattern_index == 27:
						# State 8526
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8527
							if len(subjects2) == 0:
								# State 8528
								if len(subjects) == 0:
									# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
									yield 401, subst2
									# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
									yield 394, subst2
									# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
									yield 443, subst2
						if len(subjects2) >= 1:
							tmp193 = []
							tmp193.append(subjects2.popleft())
							while True:
								if len(tmp193) > 1:
									tmp194 = create_operation_expression(associative1, tmp193)
								elif len(tmp193) == 1:
									tmp194 = tmp193[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp194)
								except ValueError:
									pass
								else:
									# State 8527
									if len(subjects2) == 0:
										# State 8528
										if len(subjects) == 0:
											# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
											yield 401, subst2
											# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
											yield 394, subst2
											# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 443, subst2
								if len(subjects2) == 0:
									break
								tmp193.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp193))
					if pattern_index == 28:
						# State 8586
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 8587
							if len(subjects2) == 0:
								# State 8588
								if len(subjects) == 0:
									# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
									yield 405, subst2
									# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
									yield 407, subst2
						if len(subjects2) >= 1:
							tmp197 = []
							tmp197.append(subjects2.popleft())
							while True:
								if len(tmp197) > 1:
									tmp198 = create_operation_expression(associative1, tmp197)
								elif len(tmp197) == 1:
									tmp198 = tmp197[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp198)
								except ValueError:
									pass
								else:
									# State 8587
									if len(subjects2) == 0:
										# State 8588
										if len(subjects) == 0:
											# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
											yield 405, subst2
											# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
											yield 407, subst2
								if len(subjects2) == 0:
									break
								tmp197.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp197))
					if pattern_index == 29:
						# State 8635
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', 1)
						except ValueError:
							pass
						else:
							# State 8636
							if len(subjects2) == 0:
								# State 8637
								if len(subjects) == 0:
									# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
									yield 408, subst2
						if len(subjects2) >= 1:
							tmp201 = []
							tmp201.append(subjects2.popleft())
							while True:
								if len(tmp201) > 1:
									tmp202 = create_operation_expression(associative1, tmp201)
								elif len(tmp201) == 1:
									tmp202 = tmp201[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_2', tmp202)
								except ValueError:
									pass
								else:
									# State 8636
									if len(subjects2) == 0:
										# State 8637
										if len(subjects) == 0:
											# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
											yield 408, subst2
								if len(subjects2) == 0:
									break
								tmp201.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp201))
					if pattern_index == 30:
						# State 8658
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8659
							if len(subjects2) == 0:
								# State 8660
								if len(subjects) == 0:
									# 412: (a + b*v**m*w**p)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f38) and (With6962)
									yield 412, subst2
						if len(subjects2) >= 1:
							tmp205 = []
							tmp205.append(subjects2.popleft())
							while True:
								if len(tmp205) > 1:
									tmp206 = create_operation_expression(associative1, tmp205)
								elif len(tmp205) == 1:
									tmp206 = tmp205[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp206)
								except ValueError:
									pass
								else:
									# State 8659
									if len(subjects2) == 0:
										# State 8660
										if len(subjects) == 0:
											# 412: (a + b*v**m*w**p)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f38) and (With6962)
											yield 412, subst2
								if len(subjects2) == 0:
									break
								tmp205.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp205))
					if pattern_index == 31:
						# State 8667
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8668
							if len(subjects2) == 0:
								# State 8669
								if len(subjects) == 0:
									# 413: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2014) and (cons_f2016) and (With6963)
									yield 413, subst2
									# 415: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2017) and (cons_f2016) and (With6964)
									yield 415, subst2
						if len(subjects2) >= 1:
							tmp209 = []
							tmp209.append(subjects2.popleft())
							while True:
								if len(tmp209) > 1:
									tmp210 = create_operation_expression(associative1, tmp209)
								elif len(tmp209) == 1:
									tmp210 = tmp209[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp210)
								except ValueError:
									pass
								else:
									# State 8668
									if len(subjects2) == 0:
										# State 8669
										if len(subjects) == 0:
											# 413: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2014) and (cons_f2016) and (With6963)
											yield 413, subst2
											# 415: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2017) and (cons_f2016) and (With6964)
											yield 415, subst2
								if len(subjects2) == 0:
									break
								tmp209.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp209))
					if pattern_index == 32:
						# State 8681
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8682
							if len(subjects2) == 0:
								# State 8683
								if len(subjects) == 0:
									# 418: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2018) and (cons_f38) and (cons_f17) and (With6965)
									yield 418, subst2
									# 419: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2019) and (cons_f586) and (cons_f17) and (With6966)
									yield 419, subst2
									# 421: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2020) and (cons_f2022) and (cons_f17) and (With6967)
									yield 421, subst2
									# 423: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2023) and (cons_f2022) and (cons_f17) and (With6968)
									yield 423, subst2
						if len(subjects2) >= 1:
							tmp213 = []
							tmp213.append(subjects2.popleft())
							while True:
								if len(tmp213) > 1:
									tmp214 = create_operation_expression(associative1, tmp213)
								elif len(tmp213) == 1:
									tmp214 = tmp213[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp214)
								except ValueError:
									pass
								else:
									# State 8682
									if len(subjects2) == 0:
										# State 8683
										if len(subjects) == 0:
											# 418: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2018) and (cons_f38) and (cons_f17) and (With6965)
											yield 418, subst2
											# 419: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2019) and (cons_f586) and (cons_f17) and (With6966)
											yield 419, subst2
											# 421: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2020) and (cons_f2022) and (cons_f17) and (With6967)
											yield 421, subst2
											# 423: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2023) and (cons_f2022) and (cons_f17) and (With6968)
											yield 423, subst2
								if len(subjects2) == 0:
									break
								tmp213.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp213))
					if pattern_index == 33:
						# State 8844
						if len(subjects2) >= 1:
							tmp216 = []
							tmp216.append(subjects2.popleft())
							while True:
								if len(tmp216) > 1:
									tmp217 = create_operation_expression(associative1, tmp216)
								elif len(tmp216) == 1:
									tmp217 = tmp216[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp217)
								except ValueError:
									pass
								else:
									# State 8845
									if len(subjects2) == 0:
										# State 8846
										if len(subjects) == 0:
											# 432: (a + b*u**n*w**n2)**p /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840)
											yield 432, subst2
								if len(subjects2) == 0:
									break
								tmp216.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp216))
					if pattern_index == 34:
						# State 8872
						if len(subjects2) >= 1:
							tmp219 = []
							tmp219.append(subjects2.popleft())
							while True:
								if len(tmp219) > 1:
									tmp220 = create_operation_expression(associative1, tmp219)
								elif len(tmp219) == 1:
									tmp220 = tmp219[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp220)
								except ValueError:
									pass
								else:
									# State 8873
									if len(subjects2) == 0:
										# State 8874
										if len(subjects) == 0:
											# 433: (b*v**n + a*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f18) and (cons_f2031) and (With6978)
											yield 433, subst2
								if len(subjects2) == 0:
									break
								tmp219.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp219))
					if pattern_index == 35:
						# State 8892
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 8893
							if len(subjects2) == 0:
								# State 8894
								if len(subjects) == 0:
									# 435: (a + b*v**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f46) and (cons_f45) and (cons_f38) and (cons_f2032)
									yield 435, subst2
						if len(subjects2) >= 1:
							tmp223 = []
							tmp223.append(subjects2.popleft())
							while True:
								if len(tmp223) > 1:
									tmp224 = create_operation_expression(associative1, tmp223)
								elif len(tmp223) == 1:
									tmp224 = tmp223[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp224)
								except ValueError:
									pass
								else:
									# State 8893
									if len(subjects2) == 0:
										# State 8894
										if len(subjects) == 0:
											# 435: (a + b*v**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f46) and (cons_f45) and (cons_f38) and (cons_f2032)
											yield 435, subst2
								if len(subjects2) == 0:
									break
								tmp223.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp223))
						if len(subjects2) >= 1:
							tmp226 = []
							tmp226.append(subjects2.popleft())
							while True:
								if len(tmp226) > 1:
									tmp227 = create_operation_expression(associative1, tmp226)
								elif len(tmp226) == 1:
									tmp227 = tmp226[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp227)
								except ValueError:
									pass
								else:
									# State 8898
									if len(subjects2) == 0:
										# State 8899
										if len(subjects) == 0:
											# 436: (a + b*v**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f45) and (cons_f147) and (cons_f2032)
											yield 436, subst2
								if len(subjects2) == 0:
									break
								tmp226.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp226))
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp229 = subjects2.popleft()
							# State 8903
							if len(subjects2) == 0:
								# State 8904
								if len(subjects) == 0:
									# 437: 1/(a + b*v**n + c*v**m) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f46) and (cons_f148) and (With6982)
									yield 437, subst1
							subjects2.appendleft(tmp229)
					if pattern_index == 36:
						# State 8999
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp230 = subjects2.popleft()
							# State 9000
							if len(subjects2) == 0:
								# State 9001
								if len(subjects) == 0:
									# 438: 1/(a*x**m + b*sqrt(c*x**n)) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
									yield 438, subst1
							subjects2.appendleft(tmp230)
					if pattern_index == 37:
						# State 9044
						if len(subjects2) >= 1 and subjects2[0] == -1:
							tmp231 = subjects2.popleft()
							# State 9045
							if len(subjects2) == 0:
								# State 9046
								if len(subjects) == 0:
									# 442: 1/(a + c*v**m) /; (cons_f2) and (cons_f3) and (cons_f148) and (cons_f2035)
									yield 442, subst1
							subjects2.appendleft(tmp231)
					if pattern_index == 38:
						# State 9090
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', 1)
						except ValueError:
							pass
						else:
							# State 9091
							if len(subjects2) == 0:
								# State 9092
								if len(subjects) == 0:
									# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
									yield 444, subst2
						if len(subjects2) >= 1:
							tmp233 = []
							tmp233.append(subjects2.popleft())
							while True:
								if len(tmp233) > 1:
									tmp234 = create_operation_expression(associative1, tmp233)
								elif len(tmp233) == 1:
									tmp234 = tmp233[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2_1', tmp234)
								except ValueError:
									pass
								else:
									# State 9091
									if len(subjects2) == 0:
										# State 9092
										if len(subjects) == 0:
											# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 444, subst2
								if len(subjects2) == 0:
									break
								tmp233.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp233))
					if pattern_index == 39:
						# State 9096
						if len(subjects2) >= 1:
							tmp236 = []
							tmp236.append(subjects2.popleft())
							while True:
								if len(tmp236) > 1:
									tmp237 = create_operation_expression(associative1, tmp236)
								elif len(tmp236) == 1:
									tmp237 = tmp236[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp237)
								except ValueError:
									pass
								else:
									# State 9097
									if len(subjects2) == 0:
										# State 9098
										if len(subjects) == 0:
											# 445: (a + b*v**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f45) and (cons_f347)
											yield 445, subst2
								if len(subjects2) == 0:
									break
								tmp236.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp236))
				subjects2.appendleft(tmp3)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 5726
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 5727
					if len(subjects2) >= 1:
						tmp241 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0', tmp241)
						except ValueError:
							pass
						else:
							# State 5728
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp243 = subjects2.popleft()
								# State 5729
								if len(subjects2) == 0:
									# State 5730
									if len(subjects) == 0:
										# 33: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 33, subst3
										# 2: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 2, subst3
										# 35: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 35, subst3
										# 324: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
										yield 324, subst3
										# 328: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 328, subst3
										# 332: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 332, subst3
										# 116: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
										yield 116, subst3
										# 308: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 308, subst3
										# 215: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 215, subst3
										# 312: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
										yield 312, subst3
										# 122: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
										yield 122, subst3
								subjects2.appendleft(tmp243)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 5770
								if len(subjects2) == 0:
									# State 5771
									if len(subjects) == 0:
										# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
										yield 163, subst4
										# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
										yield 4, subst4
										# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
										yield 101, subst4
										# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
										yield 262, subst4
										# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
										yield 227, subst4
										# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
										yield 104, subst4
										# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
										yield 265, subst4
										# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
										yield 383, subst4
										# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
										yield 107, subst4
										# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
										yield 127, subst4
										# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
										yield 84, subst4
										# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
										yield 279, subst4
										# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
										yield 89, subst4
										# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
										yield 378, subst4
										# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
										yield 27, subst4
										# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
										yield 380, subst4
										# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 351, subst4
							if len(subjects2) >= 1:
								tmp245 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp245)
								except ValueError:
									pass
								else:
									# State 5770
									if len(subjects2) == 0:
										# State 5771
										if len(subjects) == 0:
											# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
											yield 163, subst4
											# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
											yield 4, subst4
											# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
											yield 101, subst4
											# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
											yield 262, subst4
											# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
											yield 227, subst4
											# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
											yield 104, subst4
											# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
											yield 265, subst4
											# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
											yield 383, subst4
											# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
											yield 107, subst4
											# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
											yield 127, subst4
											# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
											yield 84, subst4
											# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
											yield 279, subst4
											# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
											yield 89, subst4
											# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
											yield 378, subst4
											# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
											yield 27, subst4
											# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
											yield 380, subst4
											# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 351, subst4
								subjects2.appendleft(tmp245)
							if len(subjects2) >= 1:
								tmp247 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp247)
								except ValueError:
									pass
								else:
									# State 5916
									if len(subjects2) == 0:
										# State 5917
										if len(subjects) == 0:
											# 269: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f66) and (cons_f210)
											yield 269, subst4
											# 141: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f107) and (cons_f156)
											yield 141, subst4
											# 144: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
											yield 144, subst4
											# 273: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f94)
											yield 273, subst4
											# 147: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160) and (cons_f66)
											yield 147, subst4
											# 275: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
											yield 275, subst4
											# 277: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f212) and (cons_f66) and (cons_f213)
											yield 277, subst4
											# 150: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f161)
											yield 150, subst4
											# 281: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 281, subst4
											# 153: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f94) and (cons_f164)
											yield 153, subst4
											# 156: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f94) and (cons_f164)
											yield 156, subst4
											# 285: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f17)
											yield 285, subst4
											# 160: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f17)
											yield 160, subst4
											# 289: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f170)
											yield 289, subst4
											# 292: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
											yield 292, subst4
											# 166: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f170)
											yield 166, subst4
											# 296: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
											yield 296, subst4
											# 169: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
											yield 169, subst4
											# 299: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f17)
											yield 299, subst4
											# 44: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f95) and (cons_f96) and (cons_f97)
											yield 44, subst4
											# 172: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
											yield 172, subst4
											# 46: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f98) and (cons_f97)
											yield 46, subst4
											# 175: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
											yield 175, subst4
											# 48: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
											yield 48, subst4
											# 302: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f170)
											yield 302, subst4
											# 305: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
											yield 305, subst4
											# 58: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f31) and (cons_f107) and (cons_f108)
											yield 58, subst4
											# 64: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f111)
											yield 64, subst4
											# 320: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 320, subst4
											# 66: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f112) and (cons_f97)
											yield 66, subst4
											# 68: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f66) and (cons_f114)
											yield 68, subst4
											# 343: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
											yield 343, subst4
											# 218: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191) and (cons_f17) and (cons_f94)
											yield 218, subst4
											# 347: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 347, subst4
											# 230: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
											yield 230, subst4
											# 233: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
											yield 233, subst4
											# 236: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
											yield 236, subst4
								subjects2.appendleft(tmp247)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp249 = subjects2.popleft()
								# State 5946
								if len(subjects2) == 0:
									# State 5947
									if len(subjects) == 0:
										# 138: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 138, subst3
										# 338: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 338, subst3
										# 52: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104) and (cons_f105)
										yield 52, subst3
										# 54: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f106)
										yield 54, subst3
										# 56: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 56, subst3
										# 316: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
										yield 316, subst3
								subjects2.appendleft(tmp249)
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp250 = subjects2.popleft()
								# State 5964
								if len(subjects2) == 0:
									# State 5965
									if len(subjects) == 0:
										# 60: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
										yield 60, subst3
										# 62: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
										yield 62, subst3
										# 135: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 135, subst3
								subjects2.appendleft(tmp250)
							if len(subjects2) >= 1 and subjects2[0] == 2:
								tmp251 = subjects2.popleft()
								# State 6117
								if len(subjects2) == 0:
									# State 6118
									if len(subjects) == 0:
										# 130: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
										yield 130, subst3
										# 110: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f141)
										yield 110, subst3
								subjects2.appendleft(tmp251)
							if len(subjects2) >= 1 and subjects2[0] == -3/2:
								tmp252 = subjects2.popleft()
								# State 6562
								if len(subjects2) == 0:
									# State 6563
									if len(subjects) == 0:
										# 339: (a + x*b)**(-3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 339, subst3
								subjects2.appendleft(tmp252)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp253 = subjects2.popleft()
								# State 6577
								if len(subjects2) == 0:
									# State 6578
									if len(subjects) == 0:
										# 341: sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 341, subst3
								subjects2.appendleft(tmp253)
							if len(subjects2) >= 1 and subjects2[0] == 3/2:
								tmp254 = subjects2.popleft()
								# State 6592
								if len(subjects2) == 0:
									# State 6593
									if len(subjects) == 0:
										# 342: (a + x*b)**(3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 342, subst3
								subjects2.appendleft(tmp254)
						subjects2.appendleft(tmp241)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 7288
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp256 = subjects2.popleft()
						subjects257 = deque(op_iter(tmp256))
						# State 7289
						if len(subjects257) >= 1:
							tmp258 = subjects257.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.1', tmp258)
							except ValueError:
								pass
							else:
								# State 7290
								if len(subjects257) >= 1 and subjects257[0] == 2:
									tmp260 = subjects257.popleft()
									# State 7291
									if len(subjects257) == 0:
										# State 7292
										if len(subjects2) >= 1 and subjects2[0] == -1:
											tmp261 = subjects2.popleft()
											# State 7293
											if len(subjects2) == 0:
												# State 7294
												if len(subjects) == 0:
													# 362: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
													yield 362, subst3
											subjects2.appendleft(tmp261)
									subjects257.appendleft(tmp260)
								if len(subjects257) >= 1 and isinstance(subjects257[0], Mul):
									tmp262 = subjects257.popleft()
									associative1 = tmp262
									associative_type1 = type(tmp262)
									subjects263 = deque(op_iter(tmp262))
									matcher = CommutativeMatcher7561.get()
									tmp264 = subjects263
									subjects263 = []
									for s in tmp264:
										matcher.add_subject(s)
									for pattern_index, subst4 in matcher.match(tmp264, subst3):
										if pattern_index == 0:
											# State 7599
											if len(subjects257) == 0:
												# State 7600
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2', 1)
												except ValueError:
													pass
												else:
													# State 7601
													if len(subjects2) == 0:
														# State 7602
														if len(subjects) == 0:
															# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
															yield 364, subst5
												if len(subjects2) >= 1:
													tmp266 = subjects2.popleft()
													subst5 = Substitution(subst4)
													try:
														subst5.try_add_variable('i2.2', tmp266)
													except ValueError:
														pass
													else:
														# State 7601
														if len(subjects2) == 0:
															# State 7602
															if len(subjects) == 0:
																# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
																yield 364, subst5
													subjects2.appendleft(tmp266)
										if pattern_index == 1:
											# State 7795
											if len(subjects257) == 0:
												# State 7796
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2', 1)
												except ValueError:
													pass
												else:
													# State 7797
													if len(subjects2) == 0:
														# State 7798
														if len(subjects) == 0:
															# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
															yield 366, subst5
												if len(subjects2) >= 1:
													tmp269 = subjects2.popleft()
													subst5 = Substitution(subst4)
													try:
														subst5.try_add_variable('i2.2', tmp269)
													except ValueError:
														pass
													else:
														# State 7797
														if len(subjects2) == 0:
															# State 7798
															if len(subjects) == 0:
																# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
																yield 366, subst5
													subjects2.appendleft(tmp269)
									subjects257.appendleft(tmp262)
								if len(subjects257) >= 1:
									tmp271 = subjects257.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2', tmp271)
									except ValueError:
										pass
									else:
										# State 8382
										if len(subjects257) == 0:
											# State 8383
											if len(subjects2) >= 1:
												tmp273 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2', tmp273)
												except ValueError:
													pass
												else:
													# State 8384
													if len(subjects2) == 0:
														# State 8385
														if len(subjects) == 0:
															# 388: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
															yield 388, subst5
															# 430: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
															yield 430, subst5
															# 431: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
															yield 431, subst5
												subjects2.appendleft(tmp273)
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2', 1)
											except ValueError:
												pass
											else:
												# State 8403
												if len(subjects2) == 0:
													# State 8404
													if len(subjects) == 0:
														# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
														yield 404, subst5
														# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
														yield 389, subst5
														# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
														yield 406, subst5
											if len(subjects2) >= 1:
												tmp276 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2', tmp276)
												except ValueError:
													pass
												else:
													# State 8403
													if len(subjects2) == 0:
														# State 8404
														if len(subjects) == 0:
															# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
															yield 404, subst5
															# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
															yield 389, subst5
															# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
															yield 406, subst5
												subjects2.appendleft(tmp276)
									subjects257.appendleft(tmp271)
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 8515
									if len(subjects257) == 0:
										# State 8516
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2', 1)
										except ValueError:
											pass
										else:
											# State 8517
											if len(subjects2) == 0:
												# State 8518
												if len(subjects) == 0:
													# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
													yield 401, subst5
													# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
													yield 394, subst5
													# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
													yield 443, subst5
										if len(subjects2) >= 1:
											tmp280 = subjects2.popleft()
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2', tmp280)
											except ValueError:
												pass
											else:
												# State 8517
												if len(subjects2) == 0:
													# State 8518
													if len(subjects) == 0:
														# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
														yield 401, subst5
														# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
														yield 394, subst5
														# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
														yield 443, subst5
											subjects2.appendleft(tmp280)
								if len(subjects257) >= 1:
									tmp282 = subjects257.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2', tmp282)
									except ValueError:
										pass
									else:
										# State 8515
										if len(subjects257) == 0:
											# State 8516
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2', 1)
											except ValueError:
												pass
											else:
												# State 8517
												if len(subjects2) == 0:
													# State 8518
													if len(subjects) == 0:
														# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
														yield 401, subst5
														# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
														yield 394, subst5
														# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
														yield 443, subst5
											if len(subjects2) >= 1:
												tmp285 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2', tmp285)
												except ValueError:
													pass
												else:
													# State 8517
													if len(subjects2) == 0:
														# State 8518
														if len(subjects) == 0:
															# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
															yield 401, subst5
															# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
															yield 394, subst5
															# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
															yield 443, subst5
												subjects2.appendleft(tmp285)
									subjects257.appendleft(tmp282)
							subjects257.appendleft(tmp258)
						subjects2.appendleft(tmp256)
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8511
						if len(subjects2) >= 1:
							tmp288 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1', tmp288)
							except ValueError:
								pass
							else:
								# State 8512
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2', 1)
								except ValueError:
									pass
								else:
									# State 8513
									if len(subjects2) == 0:
										# State 8514
										if len(subjects) == 0:
											# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
											yield 401, subst5
											# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
											yield 394, subst5
											# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 443, subst5
								if len(subjects2) >= 1:
									tmp291 = subjects2.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2', tmp291)
									except ValueError:
										pass
									else:
										# State 8513
										if len(subjects2) == 0:
											# State 8514
											if len(subjects) == 0:
												# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
												yield 401, subst5
												# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
												yield 394, subst5
												# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 443, subst5
									subjects2.appendleft(tmp291)
							subjects2.appendleft(tmp288)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp293 = subjects2.popleft()
					associative1 = tmp293
					associative_type1 = type(tmp293)
					subjects294 = deque(op_iter(tmp293))
					matcher = CommutativeMatcher5732.get()
					tmp295 = subjects294
					subjects294 = []
					for s in tmp295:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp295, subst1):
						if pattern_index == 0:
							# State 5733
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp296 = subjects2.popleft()
								# State 5734
								if len(subjects2) == 0:
									# State 5735
									if len(subjects) == 0:
										# 33: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 33, subst2
										# 2: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 2, subst2
										# 35: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 35, subst2
										# 324: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
										yield 324, subst2
										# 328: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 328, subst2
										# 332: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 332, subst2
										# 116: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
										yield 116, subst2
										# 308: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 308, subst2
										# 215: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 215, subst2
										# 312: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
										yield 312, subst2
										# 122: 1/(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
										yield 122, subst2
								subjects2.appendleft(tmp296)
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 5772
								if len(subjects2) == 0:
									# State 5773
									if len(subjects) == 0:
										# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
										yield 163, subst3
										# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
										yield 4, subst3
										# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
										yield 101, subst3
										# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
										yield 262, subst3
										# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
										yield 227, subst3
										# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
										yield 104, subst3
										# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
										yield 265, subst3
										# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
										yield 383, subst3
										# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
										yield 107, subst3
										# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
										yield 127, subst3
										# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
										yield 84, subst3
										# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
										yield 279, subst3
										# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
										yield 89, subst3
										# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
										yield 378, subst3
										# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
										yield 27, subst3
										# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
										yield 380, subst3
										# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 351, subst3
							if len(subjects2) >= 1:
								tmp298 = []
								tmp298.append(subjects2.popleft())
								while True:
									if len(tmp298) > 1:
										tmp299 = create_operation_expression(associative1, tmp298)
									elif len(tmp298) == 1:
										tmp299 = tmp298[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp299)
									except ValueError:
										pass
									else:
										# State 5772
										if len(subjects2) == 0:
											# State 5773
											if len(subjects) == 0:
												# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
												yield 163, subst3
												# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
												yield 4, subst3
												# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
												yield 101, subst3
												# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
												yield 262, subst3
												# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
												yield 227, subst3
												# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
												yield 104, subst3
												# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
												yield 265, subst3
												# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
												yield 383, subst3
												# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
												yield 107, subst3
												# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
												yield 127, subst3
												# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
												yield 84, subst3
												# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
												yield 279, subst3
												# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
												yield 89, subst3
												# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
												yield 378, subst3
												# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
												yield 27, subst3
												# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
												yield 380, subst3
												# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
												yield 351, subst3
									if len(subjects2) == 0:
										break
									tmp298.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp298))
							if len(subjects2) >= 1:
								tmp301 = []
								tmp301.append(subjects2.popleft())
								while True:
									if len(tmp301) > 1:
										tmp302 = create_operation_expression(associative1, tmp301)
									elif len(tmp301) == 1:
										tmp302 = tmp301[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp302)
									except ValueError:
										pass
									else:
										# State 5918
										if len(subjects2) == 0:
											# State 5919
											if len(subjects) == 0:
												# 269: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f66) and (cons_f210)
												yield 269, subst3
												# 141: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f107) and (cons_f156)
												yield 141, subst3
												# 144: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
												yield 144, subst3
												# 273: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f94)
												yield 273, subst3
												# 147: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160) and (cons_f66)
												yield 147, subst3
												# 275: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
												yield 275, subst3
												# 277: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f212) and (cons_f66) and (cons_f213)
												yield 277, subst3
												# 150: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f161)
												yield 150, subst3
												# 281: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
												yield 281, subst3
												# 153: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f94) and (cons_f164)
												yield 153, subst3
												# 156: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f94) and (cons_f164)
												yield 156, subst3
												# 285: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f17)
												yield 285, subst3
												# 160: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f17)
												yield 160, subst3
												# 289: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f170)
												yield 289, subst3
												# 292: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
												yield 292, subst3
												# 166: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f170)
												yield 166, subst3
												# 296: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
												yield 296, subst3
												# 169: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
												yield 169, subst3
												# 299: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f17)
												yield 299, subst3
												# 44: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f95) and (cons_f96) and (cons_f97)
												yield 44, subst3
												# 172: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
												yield 172, subst3
												# 46: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f98) and (cons_f97)
												yield 46, subst3
												# 175: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
												yield 175, subst3
												# 48: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
												yield 48, subst3
												# 302: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f170)
												yield 302, subst3
												# 305: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
												yield 305, subst3
												# 58: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f31) and (cons_f107) and (cons_f108)
												yield 58, subst3
												# 64: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f111)
												yield 64, subst3
												# 320: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 320, subst3
												# 66: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f112) and (cons_f97)
												yield 66, subst3
												# 68: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f66) and (cons_f114)
												yield 68, subst3
												# 343: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
												yield 343, subst3
												# 218: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191) and (cons_f17) and (cons_f94)
												yield 218, subst3
												# 347: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 347, subst3
												# 230: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
												yield 230, subst3
												# 233: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
												yield 233, subst3
												# 236: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
												yield 236, subst3
									if len(subjects2) == 0:
										break
									tmp301.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp301))
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp304 = subjects2.popleft()
								# State 5948
								if len(subjects2) == 0:
									# State 5949
									if len(subjects) == 0:
										# 138: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 138, subst2
										# 338: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 338, subst2
										# 52: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104) and (cons_f105)
										yield 52, subst2
										# 54: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f106)
										yield 54, subst2
										# 56: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 56, subst2
										# 316: 1/sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
										yield 316, subst2
								subjects2.appendleft(tmp304)
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp305 = subjects2.popleft()
								# State 5966
								if len(subjects2) == 0:
									# State 5967
									if len(subjects) == 0:
										# 60: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
										yield 60, subst2
										# 62: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
										yield 62, subst2
										# 135: (a + x*b)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 135, subst2
								subjects2.appendleft(tmp305)
							if len(subjects2) >= 1 and subjects2[0] == 2:
								tmp306 = subjects2.popleft()
								# State 6119
								if len(subjects2) == 0:
									# State 6120
									if len(subjects) == 0:
										# 130: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
										yield 130, subst2
										# 110: (a + x*b)**2 /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f141)
										yield 110, subst2
								subjects2.appendleft(tmp306)
							if len(subjects2) >= 1 and subjects2[0] == -3/2:
								tmp307 = subjects2.popleft()
								# State 6564
								if len(subjects2) == 0:
									# State 6565
									if len(subjects) == 0:
										# 339: (a + x*b)**(-3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 339, subst2
								subjects2.appendleft(tmp307)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp308 = subjects2.popleft()
								# State 6579
								if len(subjects2) == 0:
									# State 6580
									if len(subjects) == 0:
										# 341: sqrt(a + x*b) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 341, subst2
								subjects2.appendleft(tmp308)
							if len(subjects2) >= 1 and subjects2[0] == 3/2:
								tmp309 = subjects2.popleft()
								# State 6594
								if len(subjects2) == 0:
									# State 6595
									if len(subjects) == 0:
										# 342: (a + x*b)**(3/2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 342, subst2
								subjects2.appendleft(tmp309)
						if pattern_index == 1:
							# State 7228
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 7229
								if len(subjects2) == 0:
									# State 7230
									if len(subjects) == 0:
										# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
										yield 360, subst3
							if len(subjects2) >= 1:
								tmp311 = []
								tmp311.append(subjects2.popleft())
								while True:
									if len(tmp311) > 1:
										tmp312 = create_operation_expression(associative1, tmp311)
									elif len(tmp311) == 1:
										tmp312 = tmp311[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp312)
									except ValueError:
										pass
									else:
										# State 7229
										if len(subjects2) == 0:
											# State 7230
											if len(subjects) == 0:
												# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
												yield 360, subst3
									if len(subjects2) == 0:
										break
									tmp311.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp311))
						if pattern_index == 2:
							# State 7298
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp314 = subjects2.popleft()
								# State 7299
								if len(subjects2) == 0:
									# State 7300
									if len(subjects) == 0:
										# 362: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
										yield 362, subst2
								subjects2.appendleft(tmp314)
						if pattern_index == 3:
							# State 7644
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 7645
								if len(subjects2) == 0:
									# State 7646
									if len(subjects) == 0:
										# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
										yield 364, subst3
							if len(subjects2) >= 1:
								tmp316 = []
								tmp316.append(subjects2.popleft())
								while True:
									if len(tmp316) > 1:
										tmp317 = create_operation_expression(associative1, tmp316)
									elif len(tmp316) == 1:
										tmp317 = tmp316[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp317)
									except ValueError:
										pass
									else:
										# State 7645
										if len(subjects2) == 0:
											# State 7646
											if len(subjects) == 0:
												# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
												yield 364, subst3
									if len(subjects2) == 0:
										break
									tmp316.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp316))
						if pattern_index == 4:
							# State 7808
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 7809
								if len(subjects2) == 0:
									# State 7810
									if len(subjects) == 0:
										# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
										yield 366, subst3
							if len(subjects2) >= 1:
								tmp320 = []
								tmp320.append(subjects2.popleft())
								while True:
									if len(tmp320) > 1:
										tmp321 = create_operation_expression(associative1, tmp320)
									elif len(tmp320) == 1:
										tmp321 = tmp320[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp321)
									except ValueError:
										pass
									else:
										# State 7809
										if len(subjects2) == 0:
											# State 7810
											if len(subjects) == 0:
												# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
												yield 366, subst3
									if len(subjects2) == 0:
										break
									tmp320.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp320))
						if pattern_index == 5:
							# State 8388
							if len(subjects2) >= 1:
								tmp323 = []
								tmp323.append(subjects2.popleft())
								while True:
									if len(tmp323) > 1:
										tmp324 = create_operation_expression(associative1, tmp323)
									elif len(tmp323) == 1:
										tmp324 = tmp323[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp324)
									except ValueError:
										pass
									else:
										# State 8389
										if len(subjects2) == 0:
											# State 8390
											if len(subjects) == 0:
												# 388: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
												yield 388, subst3
												# 430: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
												yield 430, subst3
												# 431: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
												yield 431, subst3
									if len(subjects2) == 0:
										break
									tmp323.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp323))
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 8405
								if len(subjects2) == 0:
									# State 8406
									if len(subjects) == 0:
										# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
										yield 404, subst3
										# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
										yield 389, subst3
										# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
										yield 406, subst3
							if len(subjects2) >= 1:
								tmp327 = []
								tmp327.append(subjects2.popleft())
								while True:
									if len(tmp327) > 1:
										tmp328 = create_operation_expression(associative1, tmp327)
									elif len(tmp327) == 1:
										tmp328 = tmp327[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp328)
									except ValueError:
										pass
									else:
										# State 8405
										if len(subjects2) == 0:
											# State 8406
											if len(subjects) == 0:
												# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
												yield 404, subst3
												# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
												yield 389, subst3
												# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
												yield 406, subst3
									if len(subjects2) == 0:
										break
									tmp327.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp327))
						if pattern_index == 6:
							# State 8523
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 8524
								if len(subjects2) == 0:
									# State 8525
									if len(subjects) == 0:
										# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
										yield 401, subst3
										# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
										yield 394, subst3
										# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
										yield 443, subst3
							if len(subjects2) >= 1:
								tmp331 = []
								tmp331.append(subjects2.popleft())
								while True:
									if len(tmp331) > 1:
										tmp332 = create_operation_expression(associative1, tmp331)
									elif len(tmp331) == 1:
										tmp332 = tmp331[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp332)
									except ValueError:
										pass
									else:
										# State 8524
										if len(subjects2) == 0:
											# State 8525
											if len(subjects) == 0:
												# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
												yield 401, subst3
												# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
												yield 394, subst3
												# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 443, subst3
									if len(subjects2) == 0:
										break
									tmp331.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp331))
						if pattern_index == 7:
							# State 8840
							if len(subjects2) >= 1:
								tmp334 = []
								tmp334.append(subjects2.popleft())
								while True:
									if len(tmp334) > 1:
										tmp335 = create_operation_expression(associative1, tmp334)
									elif len(tmp334) == 1:
										tmp335 = tmp334[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp335)
									except ValueError:
										pass
									else:
										# State 8841
										if len(subjects2) == 0:
											# State 8842
											if len(subjects) == 0:
												# 432: (a + b*u**n*w**n2)**p /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840)
												yield 432, subst3
									if len(subjects2) == 0:
										break
									tmp334.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp334))
					subjects2.appendleft(tmp293)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 5739
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 5740
					if len(subjects2) >= 1:
						tmp339 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0', tmp339)
						except ValueError:
							pass
						else:
							# State 5741
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp341 = subjects2.popleft()
								# State 5742
								if len(subjects2) == 0:
									# State 5743
									if len(subjects) == 0:
										# 3: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 3, subst3
										# 325: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
										yield 325, subst3
										# 309: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 309, subst3
										# 117: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
										yield 117, subst3
										# 123: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
										yield 123, subst3
								subjects2.appendleft(tmp341)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 5856
								if len(subjects2) == 0:
									# State 5857
									if len(subjects) == 0:
										# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
										yield 128, subst4
										# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
										yield 263, subst4
										# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
										yield 266, subst4
										# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
										yield 270, subst4
										# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
										yield 145, subst4
										# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
										yield 148, subst4
										# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
										yield 276, subst4
										# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
										yield 278, subst4
										# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
										yield 151, subst4
										# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
										yield 280, subst4
										# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
										yield 154, subst4
										# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
										yield 28, subst4
										# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
										yield 157, subst4
										# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
										yield 30, subst4
										# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
										yield 159, subst4
										# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
										yield 161, subst4
										# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
										yield 164, subst4
										# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
										yield 167, subst4
										# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
										yield 170, subst4
										# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
										yield 173, subst4
										# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
										yield 85, subst4
										# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
										yield 90, subst4
										# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 352, subst4
										# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
										yield 99, subst4
										# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
										yield 228, subst4
										# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
										yield 102, subst4
										# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
										yield 231, subst4
										# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
										yield 105, subst4
										# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
										yield 234, subst4
										# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
										yield 108, subst4
										# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
										yield 109, subst4
							if len(subjects2) >= 1:
								tmp343 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp343)
								except ValueError:
									pass
								else:
									# State 5856
									if len(subjects2) == 0:
										# State 5857
										if len(subjects) == 0:
											# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
											yield 128, subst4
											# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
											yield 263, subst4
											# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
											yield 266, subst4
											# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
											yield 270, subst4
											# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
											yield 145, subst4
											# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
											yield 148, subst4
											# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
											yield 276, subst4
											# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
											yield 278, subst4
											# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
											yield 151, subst4
											# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
											yield 280, subst4
											# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
											yield 154, subst4
											# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
											yield 28, subst4
											# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
											yield 157, subst4
											# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
											yield 30, subst4
											# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
											yield 159, subst4
											# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
											yield 161, subst4
											# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
											yield 164, subst4
											# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
											yield 167, subst4
											# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
											yield 170, subst4
											# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 173, subst4
											# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
											yield 85, subst4
											# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
											yield 90, subst4
											# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 352, subst4
											# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
											yield 99, subst4
											# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
											yield 228, subst4
											# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
											yield 102, subst4
											# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 231, subst4
											# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
											yield 105, subst4
											# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
											yield 234, subst4
											# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
											yield 108, subst4
											# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
											yield 109, subst4
								subjects2.appendleft(tmp343)
							if len(subjects2) >= 1:
								tmp345 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp345)
								except ValueError:
									pass
								else:
									# State 5868
									if len(subjects2) == 0:
										# State 5869
										if len(subjects) == 0:
											# 32: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f89)
											yield 32, subst4
											# 39: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f92)
											yield 39, subst4
											# 43: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f23)
											yield 43, subst4
											# 333: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f80)
											yield 333, subst4
											# 313: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
											yield 313, subst4
											# 31: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f88)
											yield 31, subst4
								subjects2.appendleft(tmp345)
							if len(subjects2) >= 1:
								tmp347 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp347)
								except ValueError:
									pass
								else:
									# State 5922
									if len(subjects2) == 0:
										# State 5923
										if len(subjects) == 0:
											# 257: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120)
											yield 257, subst4
											# 260: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f201) and (cons_f202) and (cons_f206)
											yield 260, subst4
											# 142: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f156)
											yield 142, subst4
											# 274: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f89)
											yield 274, subst4
											# 282: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 282, subst4
											# 286: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88)
											yield 286, subst4
											# 290: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88) and (cons_f170)
											yield 290, subst4
											# 293: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
											yield 293, subst4
											# 297: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 297, subst4
											# 300: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
											yield 300, subst4
											# 45: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f95) and (cons_f96) and (cons_f97)
											yield 45, subst4
											# 47: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f98) and (cons_f97)
											yield 47, subst4
											# 176: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
											yield 176, subst4
											# 49: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
											yield 49, subst4
											# 303: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
											yield 303, subst4
											# 306: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 306, subst4
											# 65: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f111)
											yield 65, subst4
											# 321: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 321, subst4
											# 67: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f92) and (cons_f112) and (cons_f97)
											yield 67, subst4
											# 69: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f114)
											yield 69, subst4
											# 344: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
											yield 344, subst4
											# 348: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 348, subst4
											# 237: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157) and (cons_f23)
											yield 237, subst4
											# 248: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f120) and (cons_f200)
											yield 248, subst4
											# 251: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f201) and (cons_f202)
											yield 251, subst4
											# 254: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120) and (cons_f203) and (cons_f204)
											yield 254, subst4
								subjects2.appendleft(tmp347)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 6130
								if len(subjects2) == 0:
									# State 6131
									if len(subjects) == 0:
										# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
										yield 131, subst4
										# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
										yield 125, subst4
										# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
										yield 133, subst4
										# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
										yield 111, subst4
							if len(subjects2) >= 1:
								tmp350 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp350)
								except ValueError:
									pass
								else:
									# State 6130
									if len(subjects2) == 0:
										# State 6131
										if len(subjects) == 0:
											# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
											yield 131, subst4
											# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
											yield 125, subst4
											# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
											yield 133, subst4
											# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
											yield 111, subst4
								subjects2.appendleft(tmp350)
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp352 = subjects2.popleft()
								# State 5880
								if len(subjects2) == 0:
									# State 5881
									if len(subjects) == 0:
										# 216: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 216, subst3
										# 34: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 34, subst3
										# 36: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 36, subst3
								subjects2.appendleft(tmp352)
							if len(subjects2) >= 1 and subjects2[0] == -2/3:
								tmp353 = subjects2.popleft()
								# State 5892
								if len(subjects2) == 0:
									# State 5893
									if len(subjects) == 0:
										# 37: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 37, subst3
										# 38: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 38, subst3
										# 136: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 136, subst3
										# 61: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
										yield 61, subst3
										# 63: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
										yield 63, subst3
								subjects2.appendleft(tmp353)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp354 = subjects2.popleft()
								# State 5937
								if len(subjects2) == 0:
									# State 5938
									if len(subjects) == 0:
										# 329: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 329, subst3
										# 139: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 139, subst3
										# 178: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 178, subst3
										# 51: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f102) and (cons_f103)
										yield 51, subst3
										# 180: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 180, subst3
										# 53: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104)
										yield 53, subst3
										# 57: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 57, subst3
								subjects2.appendleft(tmp354)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp355 = subjects2.popleft()
								# State 6568
								if len(subjects2) == 0:
									# State 6569
									if len(subjects) == 0:
										# 340: sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 340, subst3
								subjects2.appendleft(tmp355)
						subjects2.appendleft(tmp339)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 7833
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp357 = subjects2.popleft()
						subjects358 = deque(op_iter(tmp357))
						# State 7834
						if len(subjects358) >= 1:
							tmp359 = subjects358.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.3.2.1.0', tmp359)
							except ValueError:
								pass
							else:
								# State 7835
								if len(subjects358) >= 1 and subjects358[0] == 2:
									tmp361 = subjects358.popleft()
									# State 7836
									if len(subjects358) == 0:
										# State 7837
										if len(subjects2) >= 1 and subjects2[0] == -1:
											tmp362 = subjects2.popleft()
											# State 7838
											if len(subjects2) == 0:
												# State 7839
												if len(subjects) == 0:
													# 367: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
													yield 367, subst3
											subjects2.appendleft(tmp362)
									subjects358.appendleft(tmp361)
							subjects358.appendleft(tmp359)
						if len(subjects358) >= 1:
							tmp363 = subjects358.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.1_1', tmp363)
							except ValueError:
								pass
							else:
								# State 8570
								if len(subjects358) >= 1:
									tmp365 = subjects358.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2', tmp365)
									except ValueError:
										pass
									else:
										# State 8571
										if len(subjects358) == 0:
											# State 8572
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2_1', 1)
											except ValueError:
												pass
											else:
												# State 8573
												if len(subjects2) == 0:
													# State 8574
													if len(subjects) == 0:
														# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
														yield 405, subst5
														# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
														yield 407, subst5
											if len(subjects2) >= 1:
												tmp368 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2_1', tmp368)
												except ValueError:
													pass
												else:
													# State 8573
													if len(subjects2) == 0:
														# State 8574
														if len(subjects) == 0:
															# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
															yield 405, subst5
															# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
															yield 407, subst5
												subjects2.appendleft(tmp368)
									subjects358.appendleft(tmp365)
							subjects358.appendleft(tmp363)
						if len(subjects358) >= 1:
							tmp370 = subjects358.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.1', tmp370)
							except ValueError:
								pass
							else:
								# State 9077
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.2_1', 1)
								except ValueError:
									pass
								else:
									# State 9078
									if len(subjects358) == 0:
										# State 9079
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2_1', 1)
										except ValueError:
											pass
										else:
											# State 9080
											if len(subjects2) == 0:
												# State 9081
												if len(subjects) == 0:
													# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
													yield 444, subst5
										if len(subjects2) >= 1:
											tmp374 = subjects2.popleft()
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2_1', tmp374)
											except ValueError:
												pass
											else:
												# State 9080
												if len(subjects2) == 0:
													# State 9081
													if len(subjects) == 0:
														# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
														yield 444, subst5
											subjects2.appendleft(tmp374)
								if len(subjects358) >= 1:
									tmp376 = subjects358.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2_1', tmp376)
									except ValueError:
										pass
									else:
										# State 9078
										if len(subjects358) == 0:
											# State 9079
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2_1', 1)
											except ValueError:
												pass
											else:
												# State 9080
												if len(subjects2) == 0:
													# State 9081
													if len(subjects) == 0:
														# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
														yield 444, subst5
											if len(subjects2) >= 1:
												tmp379 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2_1', tmp379)
												except ValueError:
													pass
												else:
													# State 9080
													if len(subjects2) == 0:
														# State 9081
														if len(subjects) == 0:
															# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
															yield 444, subst5
												subjects2.appendleft(tmp379)
									subjects358.appendleft(tmp376)
							subjects358.appendleft(tmp370)
						subjects2.appendleft(tmp357)
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 9073
						if len(subjects2) >= 1:
							tmp382 = subjects2.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1', tmp382)
							except ValueError:
								pass
							else:
								# State 9074
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2_1', 1)
								except ValueError:
									pass
								else:
									# State 9075
									if len(subjects2) == 0:
										# State 9076
										if len(subjects) == 0:
											# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 444, subst5
								if len(subjects2) >= 1:
									tmp385 = subjects2.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2_1', tmp385)
									except ValueError:
										pass
									else:
										# State 9075
										if len(subjects2) == 0:
											# State 9076
											if len(subjects) == 0:
												# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 444, subst5
									subjects2.appendleft(tmp385)
							subjects2.appendleft(tmp382)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 8258
					if len(subjects2) >= 1:
						tmp388 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0_2', tmp388)
						except ValueError:
							pass
						else:
							# State 8259
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 8260
								if len(subjects2) == 0:
									# State 8261
									if len(subjects) == 0:
										# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
										yield 384, subst4
										# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
										yield 379, subst4
										# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
										yield 381, subst4
							if len(subjects2) >= 1:
								tmp391 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp391)
								except ValueError:
									pass
								else:
									# State 8260
									if len(subjects2) == 0:
										# State 8261
										if len(subjects) == 0:
											# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
											yield 384, subst4
											# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
											yield 379, subst4
											# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
											yield 381, subst4
								subjects2.appendleft(tmp391)
						subjects2.appendleft(tmp388)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp393 = subjects2.popleft()
					associative1 = tmp393
					associative_type1 = type(tmp393)
					subjects394 = deque(op_iter(tmp393))
					matcher = CommutativeMatcher5745.get()
					tmp395 = subjects394
					subjects394 = []
					for s in tmp395:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp395, subst1):
						if pattern_index == 0:
							# State 5746
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp396 = subjects2.popleft()
								# State 5747
								if len(subjects2) == 0:
									# State 5748
									if len(subjects) == 0:
										# 3: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 3, subst2
										# 325: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
										yield 325, subst2
										# 309: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 309, subst2
										# 117: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
										yield 117, subst2
										# 123: 1/(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5)
										yield 123, subst2
								subjects2.appendleft(tmp396)
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 5858
								if len(subjects2) == 0:
									# State 5859
									if len(subjects) == 0:
										# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
										yield 128, subst3
										# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
										yield 263, subst3
										# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
										yield 266, subst3
										# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
										yield 270, subst3
										# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
										yield 145, subst3
										# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
										yield 148, subst3
										# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
										yield 276, subst3
										# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
										yield 278, subst3
										# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
										yield 151, subst3
										# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
										yield 280, subst3
										# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
										yield 154, subst3
										# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
										yield 28, subst3
										# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
										yield 157, subst3
										# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
										yield 30, subst3
										# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
										yield 159, subst3
										# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
										yield 161, subst3
										# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
										yield 164, subst3
										# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
										yield 167, subst3
										# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
										yield 170, subst3
										# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
										yield 173, subst3
										# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
										yield 85, subst3
										# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
										yield 90, subst3
										# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 352, subst3
										# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
										yield 99, subst3
										# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
										yield 228, subst3
										# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
										yield 102, subst3
										# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
										yield 231, subst3
										# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
										yield 105, subst3
										# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
										yield 234, subst3
										# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
										yield 108, subst3
										# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
										yield 109, subst3
							if len(subjects2) >= 1:
								tmp398 = []
								tmp398.append(subjects2.popleft())
								while True:
									if len(tmp398) > 1:
										tmp399 = create_operation_expression(associative1, tmp398)
									elif len(tmp398) == 1:
										tmp399 = tmp398[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp399)
									except ValueError:
										pass
									else:
										# State 5858
										if len(subjects2) == 0:
											# State 5859
											if len(subjects) == 0:
												# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
												yield 128, subst3
												# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
												yield 263, subst3
												# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
												yield 266, subst3
												# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
												yield 270, subst3
												# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
												yield 145, subst3
												# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
												yield 148, subst3
												# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
												yield 276, subst3
												# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
												yield 278, subst3
												# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
												yield 151, subst3
												# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
												yield 280, subst3
												# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
												yield 154, subst3
												# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
												yield 28, subst3
												# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
												yield 157, subst3
												# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
												yield 30, subst3
												# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
												yield 159, subst3
												# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
												yield 161, subst3
												# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
												yield 164, subst3
												# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
												yield 167, subst3
												# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
												yield 170, subst3
												# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
												yield 173, subst3
												# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
												yield 85, subst3
												# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
												yield 90, subst3
												# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
												yield 352, subst3
												# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
												yield 99, subst3
												# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
												yield 228, subst3
												# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
												yield 102, subst3
												# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
												yield 231, subst3
												# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
												yield 105, subst3
												# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
												yield 234, subst3
												# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
												yield 108, subst3
												# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
												yield 109, subst3
									if len(subjects2) == 0:
										break
									tmp398.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp398))
							if len(subjects2) >= 1:
								tmp401 = []
								tmp401.append(subjects2.popleft())
								while True:
									if len(tmp401) > 1:
										tmp402 = create_operation_expression(associative1, tmp401)
									elif len(tmp401) == 1:
										tmp402 = tmp401[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp402)
									except ValueError:
										pass
									else:
										# State 5870
										if len(subjects2) == 0:
											# State 5871
											if len(subjects) == 0:
												# 32: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f89)
												yield 32, subst3
												# 39: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f92)
												yield 39, subst3
												# 43: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f23)
												yield 43, subst3
												# 333: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f80)
												yield 333, subst3
												# 313: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
												yield 313, subst3
												# 31: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f88)
												yield 31, subst3
									if len(subjects2) == 0:
										break
									tmp401.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp401))
							if len(subjects2) >= 1:
								tmp404 = []
								tmp404.append(subjects2.popleft())
								while True:
									if len(tmp404) > 1:
										tmp405 = create_operation_expression(associative1, tmp404)
									elif len(tmp404) == 1:
										tmp405 = tmp404[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp405)
									except ValueError:
										pass
									else:
										# State 5924
										if len(subjects2) == 0:
											# State 5925
											if len(subjects) == 0:
												# 257: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120)
												yield 257, subst3
												# 260: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f201) and (cons_f202) and (cons_f206)
												yield 260, subst3
												# 142: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f156)
												yield 142, subst3
												# 274: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f89)
												yield 274, subst3
												# 282: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
												yield 282, subst3
												# 286: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88)
												yield 286, subst3
												# 290: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f88) and (cons_f170)
												yield 290, subst3
												# 293: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
												yield 293, subst3
												# 297: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
												yield 297, subst3
												# 300: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
												yield 300, subst3
												# 45: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f95) and (cons_f96) and (cons_f97)
												yield 45, subst3
												# 47: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f98) and (cons_f97)
												yield 47, subst3
												# 176: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
												yield 176, subst3
												# 49: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
												yield 49, subst3
												# 303: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
												yield 303, subst3
												# 306: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
												yield 306, subst3
												# 65: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f111)
												yield 65, subst3
												# 321: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 321, subst3
												# 67: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f92) and (cons_f112) and (cons_f97)
												yield 67, subst3
												# 69: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f114)
												yield 69, subst3
												# 344: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
												yield 344, subst3
												# 348: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 348, subst3
												# 237: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157) and (cons_f23)
												yield 237, subst3
												# 248: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f120) and (cons_f200)
												yield 248, subst3
												# 251: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f201) and (cons_f202)
												yield 251, subst3
												# 254: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f23) and (cons_f120) and (cons_f203) and (cons_f204)
												yield 254, subst3
									if len(subjects2) == 0:
										break
									tmp404.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp404))
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 6132
								if len(subjects2) == 0:
									# State 6133
									if len(subjects) == 0:
										# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
										yield 131, subst3
										# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
										yield 125, subst3
										# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
										yield 133, subst3
										# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
										yield 111, subst3
							if len(subjects2) >= 1:
								tmp408 = []
								tmp408.append(subjects2.popleft())
								while True:
									if len(tmp408) > 1:
										tmp409 = create_operation_expression(associative1, tmp408)
									elif len(tmp408) == 1:
										tmp409 = tmp408[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp409)
									except ValueError:
										pass
									else:
										# State 6132
										if len(subjects2) == 0:
											# State 6133
											if len(subjects) == 0:
												# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
												yield 131, subst3
												# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
												yield 125, subst3
												# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
												yield 133, subst3
												# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
												yield 111, subst3
									if len(subjects2) == 0:
										break
									tmp408.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp408))
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp411 = subjects2.popleft()
								# State 5882
								if len(subjects2) == 0:
									# State 5883
									if len(subjects) == 0:
										# 216: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 216, subst2
										# 34: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 34, subst2
										# 36: (c + x*d)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 36, subst2
								subjects2.appendleft(tmp411)
							if len(subjects2) >= 1 and subjects2[0] == -2/3:
								tmp412 = subjects2.popleft()
								# State 5894
								if len(subjects2) == 0:
									# State 5895
									if len(subjects) == 0:
										# 37: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
										yield 37, subst2
										# 38: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
										yield 38, subst2
										# 136: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 136, subst2
										# 61: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
										yield 61, subst2
										# 63: (c + x*d)**(-2/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
										yield 63, subst2
								subjects2.appendleft(tmp412)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp413 = subjects2.popleft()
								# State 5939
								if len(subjects2) == 0:
									# State 5940
									if len(subjects) == 0:
										# 329: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 329, subst2
										# 139: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 139, subst2
										# 178: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 178, subst2
										# 51: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f102) and (cons_f103)
										yield 51, subst2
										# 180: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 180, subst2
										# 53: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104)
										yield 53, subst2
										# 57: 1/sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
										yield 57, subst2
								subjects2.appendleft(tmp413)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp414 = subjects2.popleft()
								# State 6570
								if len(subjects2) == 0:
									# State 6571
									if len(subjects) == 0:
										# 340: sqrt(c + x*d) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 340, subst2
								subjects2.appendleft(tmp414)
						if pattern_index == 1:
							# State 7363
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 7364
								if len(subjects2) == 0:
									# State 7365
									if len(subjects) == 0:
										# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
										yield 363, subst3
							if len(subjects2) >= 1:
								tmp416 = []
								tmp416.append(subjects2.popleft())
								while True:
									if len(tmp416) > 1:
										tmp417 = create_operation_expression(associative1, tmp416)
									elif len(tmp416) == 1:
										tmp417 = tmp416[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp417)
									except ValueError:
										pass
									else:
										# State 7364
										if len(subjects2) == 0:
											# State 7365
											if len(subjects) == 0:
												# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
												yield 363, subst3
									if len(subjects2) == 0:
										break
									tmp416.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp416))
						if pattern_index == 2:
							# State 7843
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp419 = subjects2.popleft()
								# State 7844
								if len(subjects2) == 0:
									# State 7845
									if len(subjects) == 0:
										# 367: 1/(A + C*x**2) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2007)
										yield 367, subst2
								subjects2.appendleft(tmp419)
						if pattern_index == 3:
							# State 8262
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 8263
								if len(subjects2) == 0:
									# State 8264
									if len(subjects) == 0:
										# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
										yield 384, subst3
										# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
										yield 379, subst3
										# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
										yield 381, subst3
							if len(subjects2) >= 1:
								tmp421 = []
								tmp421.append(subjects2.popleft())
								while True:
									if len(tmp421) > 1:
										tmp422 = create_operation_expression(associative1, tmp421)
									elif len(tmp421) == 1:
										tmp422 = tmp421[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp422)
									except ValueError:
										pass
									else:
										# State 8263
										if len(subjects2) == 0:
											# State 8264
											if len(subjects) == 0:
												# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
												yield 384, subst3
												# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
												yield 379, subst3
												# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
												yield 381, subst3
									if len(subjects2) == 0:
										break
									tmp421.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp421))
						if pattern_index == 4:
							# State 8578
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 8579
								if len(subjects2) == 0:
									# State 8580
									if len(subjects) == 0:
										# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
										yield 405, subst3
										# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
										yield 407, subst3
							if len(subjects2) >= 1:
								tmp425 = []
								tmp425.append(subjects2.popleft())
								while True:
									if len(tmp425) > 1:
										tmp426 = create_operation_expression(associative1, tmp425)
									elif len(tmp425) == 1:
										tmp426 = tmp425[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp426)
									except ValueError:
										pass
									else:
										# State 8579
										if len(subjects2) == 0:
											# State 8580
											if len(subjects) == 0:
												# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
												yield 405, subst3
												# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
												yield 407, subst3
									if len(subjects2) == 0:
										break
									tmp425.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp425))
						if pattern_index == 5:
							# State 9087
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 9088
								if len(subjects2) == 0:
									# State 9089
									if len(subjects) == 0:
										# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
										yield 444, subst3
							if len(subjects2) >= 1:
								tmp429 = []
								tmp429.append(subjects2.popleft())
								while True:
									if len(tmp429) > 1:
										tmp430 = create_operation_expression(associative1, tmp429)
									elif len(tmp429) == 1:
										tmp430 = tmp429[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp430)
									except ValueError:
										pass
									else:
										# State 9088
										if len(subjects2) == 0:
											# State 9089
											if len(subjects) == 0:
												# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 444, subst3
									if len(subjects2) == 0:
										break
									tmp429.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp429))
					subjects2.appendleft(tmp393)
			if len(subjects2) >= 1:
				tmp432 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.0', tmp432)
				except ValueError:
					pass
				else:
					# State 5907
					if len(subjects2) >= 1 and subjects2[0] == -1:
						tmp434 = subjects2.popleft()
						# State 5908
						if len(subjects2) == 0:
							# State 5909
							if len(subjects) == 0:
								# 41: 1/x /; (cons_f7) and (cons_f27) and (cons_f4)
								yield 41, subst1
						subjects2.appendleft(tmp434)
				subjects2.appendleft(tmp432)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0_1', 1)
			except ValueError:
				pass
			else:
				# State 5985
				if len(subjects2) >= 1:
					tmp436 = subjects2.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.0', tmp436)
					except ValueError:
						pass
					else:
						# State 5986
						if len(subjects2) >= 1:
							tmp438 = subjects2.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', tmp438)
							except ValueError:
								pass
							else:
								# State 5987
								if len(subjects2) == 0:
									# State 5988
									if len(subjects) == 0:
										# 70: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f115)
										yield 70, subst3
										# 72: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f116)
										yield 72, subst3
										# 74: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f118) and (cons_f119)
										yield 74, subst3
										# 76: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f118)
										yield 76, subst3
										# 239: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18)
										yield 239, subst3
										# 242: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f198)
										yield 242, subst3
							subjects2.appendleft(tmp438)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 6083
							if len(subjects2) == 0:
								# State 6084
								if len(subjects) == 0:
									# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
									yield 224, subst3
									# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
									yield 113, subst3
									# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
									yield 219, subst3
									# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
									yield 92, subst3
									# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
									yield 95, subst3
						if len(subjects2) >= 1:
							tmp441 = subjects2.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', tmp441)
							except ValueError:
								pass
							else:
								# State 6083
								if len(subjects2) == 0:
									# State 6084
									if len(subjects) == 0:
										# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
										yield 224, subst3
										# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
										yield 113, subst3
										# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
										yield 219, subst3
										# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
										yield 92, subst3
										# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
										yield 95, subst3
							subjects2.appendleft(tmp441)
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp443 = subjects2.popleft()
							# State 6327
							if len(subjects2) == 0:
								# State 6328
								if len(subjects) == 0:
									# 198: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f186)
									yield 198, subst2
									# 201: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f187)
									yield 201, subst2
									# 184: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f179)
									yield 184, subst2
									# 187: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f180)
									yield 187, subst2
									# 189: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
									yield 189, subst2
							subjects2.appendleft(tmp443)
					subjects2.appendleft(tmp436)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0_2', 0)
			except ValueError:
				pass
			else:
				# State 6042
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 6043
					if len(subjects2) >= 1:
						tmp446 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0', tmp446)
						except ValueError:
							pass
						else:
							# State 6044
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 6045
								if len(subjects2) == 0:
									# State 6046
									if len(subjects) == 0:
										# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
										yield 129, subst4
										# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
										yield 162, subst4
										# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
										yield 355, subst4
										# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 353, subst4
										# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
										yield 165, subst4
										# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
										yield 229, subst4
										# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
										yield 168, subst4
										# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
										yield 232, subst4
										# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
										yield 171, subst4
										# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
										yield 174, subst4
										# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
										yield 146, subst4
										# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
										yield 149, subst4
										# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
										yield 88, subst4
										# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
										yield 155, subst4
										# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
										yield 152, subst4
										# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
										yield 158, subst4
							if len(subjects2) >= 1:
								tmp449 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_2', tmp449)
								except ValueError:
									pass
								else:
									# State 6045
									if len(subjects2) == 0:
										# State 6046
										if len(subjects) == 0:
											# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
											yield 129, subst4
											# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
											yield 162, subst4
											# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
											yield 355, subst4
											# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 353, subst4
											# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
											yield 165, subst4
											# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
											yield 229, subst4
											# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
											yield 168, subst4
											# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 232, subst4
											# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
											yield 171, subst4
											# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 174, subst4
											# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
											yield 146, subst4
											# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
											yield 149, subst4
											# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
											yield 88, subst4
											# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
											yield 155, subst4
											# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
											yield 152, subst4
											# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
											yield 158, subst4
								subjects2.appendleft(tmp449)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 6146
								if len(subjects2) == 0:
									# State 6147
									if len(subjects) == 0:
										# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
										yield 112, subst4
										# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
										yield 132, subst4
										# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
										yield 134, subst4
							if len(subjects2) >= 1:
								tmp452 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp452)
								except ValueError:
									pass
								else:
									# State 6146
									if len(subjects2) == 0:
										# State 6147
										if len(subjects) == 0:
											# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
											yield 112, subst4
											# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
											yield 132, subst4
											# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
											yield 134, subst4
								subjects2.appendleft(tmp452)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 6207
								if len(subjects2) == 0:
									# State 6208
									if len(subjects) == 0:
										# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
										yield 118, subst4
										# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
										yield 119, subst4
							if len(subjects2) >= 1:
								tmp455 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp455)
								except ValueError:
									pass
								else:
									# State 6207
									if len(subjects2) == 0:
										# State 6208
										if len(subjects) == 0:
											# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
											yield 118, subst4
											# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
											yield 119, subst4
								subjects2.appendleft(tmp455)
							if len(subjects2) >= 1:
								tmp457 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp457)
								except ValueError:
									pass
								else:
									# State 6219
									if len(subjects2) == 0:
										# State 6220
										if len(subjects) == 0:
											# 326: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50) and (cons_f13) and (cons_f145)
											yield 326, subst4
											# 310: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
											yield 310, subst4
											# 120: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f146)
											yield 120, subst4
											# 121: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f137)
											yield 121, subst4
											# 124: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f147)
											yield 124, subst4
								subjects2.appendleft(tmp457)
							if len(subjects2) >= 1:
								tmp459 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp459)
								except ValueError:
									pass
								else:
									# State 6234
									if len(subjects2) == 0:
										# State 6235
										if len(subjects) == 0:
											# 314: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
											yield 314, subst4
											# 126: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f149) and (cons_f137)
											yield 126, subst4
								subjects2.appendleft(tmp459)
							if len(subjects2) >= 1:
								tmp461 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_2', tmp461)
								except ValueError:
									pass
								else:
									# State 6407
									if len(subjects2) == 0:
										# State 6408
										if len(subjects) == 0:
											# 258: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f205)
											yield 258, subst4
											# 291: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f170)
											yield 291, subst4
											# 322: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 322, subst4
											# 261: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f202) and (cons_f206)
											yield 261, subst4
											# 294: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
											yield 294, subst4
											# 249: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f200)
											yield 249, subst4
											# 255: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f182) and (cons_f203) and (cons_f204)
											yield 255, subst4
											# 298: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
											yield 298, subst4
											# 235: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
											yield 235, subst4
											# 301: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
											yield 301, subst4
											# 238: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
											yield 238, subst4
											# 304: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
											yield 304, subst4
											# 307: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
											yield 307, subst4
											# 345: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
											yield 345, subst4
											# 283: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
											yield 283, subst4
											# 252: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f202)
											yield 252, subst4
											# 349: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
											yield 349, subst4
											# 287: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
											yield 287, subst4
								subjects2.appendleft(tmp461)
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp463 = subjects2.popleft()
								# State 6252
								if len(subjects2) == 0:
									# State 6253
									if len(subjects) == 0:
										# 137: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 137, subst3
										# 177: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4)
										yield 177, subst3
										# 140: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 140, subst3
										# 143: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f156)
										yield 143, subst3
								subjects2.appendleft(tmp463)
							if len(subjects2) >= 1 and subjects2[0] == -1/4:
								tmp464 = subjects2.popleft()
								# State 6303
								if len(subjects2) == 0:
									# State 6304
									if len(subjects) == 0:
										# 179: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 179, subst3
										# 181: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 181, subst3
								subjects2.appendleft(tmp464)
							if len(subjects2) >= 1 and subjects2[0] == -3/4:
								tmp465 = subjects2.popleft()
								# State 6315
								if len(subjects2) == 0:
									# State 6316
									if len(subjects) == 0:
										# 182: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 182, subst3
										# 183: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 183, subst3
								subjects2.appendleft(tmp465)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp466 = subjects2.popleft()
								# State 6345
								if len(subjects2) == 0:
									# State 6346
									if len(subjects) == 0:
										# 336: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 336, subst3
										# 194: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f182) and (cons_f184)
										yield 194, subst3
										# 197: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185)
										yield 197, subst3
								subjects2.appendleft(tmp466)
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp467 = subjects2.popleft()
								# State 6380
								if len(subjects2) == 0:
									# State 6381
									if len(subjects) == 0:
										# 217: (e + x*f)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 217, subst3
								subjects2.appendleft(tmp467)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp468 = subjects2.popleft()
								# State 6532
								if len(subjects2) == 0:
									# State 6533
									if len(subjects) == 0:
										# 330: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 330, subst3
										# 334: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 334, subst3
								subjects2.appendleft(tmp468)
						subjects2.appendleft(tmp446)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 6159
					if len(subjects2) >= 1:
						tmp470 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.0', tmp470)
						except ValueError:
							pass
						else:
							# State 6160
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 6161
								if len(subjects2) == 0:
									# State 6162
									if len(subjects) == 0:
										# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
										yield 225, subst4
										# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
										yield 114, subst4
										# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
										yield 220, subst4
										# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
										yield 222, subst4
							if len(subjects2) >= 1:
								tmp473 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp473)
								except ValueError:
									pass
								else:
									# State 6161
									if len(subjects2) == 0:
										# State 6162
										if len(subjects) == 0:
											# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
											yield 225, subst4
											# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
											yield 114, subst4
											# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
											yield 220, subst4
											# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
											yield 222, subst4
								subjects2.appendleft(tmp473)
						subjects2.appendleft(tmp470)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_5', 1)
				except ValueError:
					pass
				else:
					# State 8280
					if len(subjects2) >= 1:
						tmp476 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0_4', tmp476)
						except ValueError:
							pass
						else:
							# State 8281
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 8282
								if len(subjects2) == 0:
									# State 8283
									if len(subjects) == 0:
										# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
										yield 385, subst4
										# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
										yield 382, subst4
							if len(subjects2) >= 1:
								tmp479 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_2', tmp479)
								except ValueError:
									pass
								else:
									# State 8282
									if len(subjects2) == 0:
										# State 8283
										if len(subjects) == 0:
											# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
											yield 385, subst4
											# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
											yield 382, subst4
								subjects2.appendleft(tmp479)
						subjects2.appendleft(tmp476)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 8613
					if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
						tmp482 = subjects2.popleft()
						subjects483 = deque(op_iter(tmp482))
						# State 8614
						if len(subjects483) >= 1:
							tmp484 = subjects483.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1.1_2', tmp484)
							except ValueError:
								pass
							else:
								# State 8615
								if len(subjects483) >= 1:
									tmp486 = subjects483.popleft()
									subst4 = Substitution(subst3)
									try:
										subst4.try_add_variable('i2.2.1.2', tmp486)
									except ValueError:
										pass
									else:
										# State 8616
										if len(subjects483) == 0:
											# State 8617
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2_2', 1)
											except ValueError:
												pass
											else:
												# State 8618
												if len(subjects2) == 0:
													# State 8619
													if len(subjects) == 0:
														# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
														yield 408, subst5
											if len(subjects2) >= 1:
												tmp489 = subjects2.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2_2', tmp489)
												except ValueError:
													pass
												else:
													# State 8618
													if len(subjects2) == 0:
														# State 8619
														if len(subjects) == 0:
															# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
															yield 408, subst5
												subjects2.appendleft(tmp489)
									subjects483.appendleft(tmp486)
							subjects483.appendleft(tmp484)
						subjects2.appendleft(tmp482)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp491 = subjects2.popleft()
					associative1 = tmp491
					associative_type1 = type(tmp491)
					subjects492 = deque(op_iter(tmp491))
					matcher = CommutativeMatcher6048.get()
					tmp493 = subjects492
					subjects492 = []
					for s in tmp493:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp493, subst1):
						if pattern_index == 0:
							# State 6049
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 6050
								if len(subjects2) == 0:
									# State 6051
									if len(subjects) == 0:
										# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
										yield 129, subst3
										# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
										yield 162, subst3
										# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
										yield 355, subst3
										# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 353, subst3
										# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
										yield 165, subst3
										# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
										yield 229, subst3
										# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
										yield 168, subst3
										# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
										yield 232, subst3
										# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
										yield 171, subst3
										# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
										yield 174, subst3
										# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
										yield 146, subst3
										# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
										yield 149, subst3
										# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
										yield 88, subst3
										# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
										yield 155, subst3
										# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
										yield 152, subst3
										# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
										yield 158, subst3
							if len(subjects2) >= 1:
								tmp495 = []
								tmp495.append(subjects2.popleft())
								while True:
									if len(tmp495) > 1:
										tmp496 = create_operation_expression(associative1, tmp495)
									elif len(tmp495) == 1:
										tmp496 = tmp495[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_2', tmp496)
									except ValueError:
										pass
									else:
										# State 6050
										if len(subjects2) == 0:
											# State 6051
											if len(subjects) == 0:
												# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
												yield 129, subst3
												# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
												yield 162, subst3
												# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
												yield 355, subst3
												# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
												yield 353, subst3
												# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
												yield 165, subst3
												# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
												yield 229, subst3
												# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
												yield 168, subst3
												# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
												yield 232, subst3
												# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
												yield 171, subst3
												# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
												yield 174, subst3
												# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
												yield 146, subst3
												# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
												yield 149, subst3
												# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
												yield 88, subst3
												# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
												yield 155, subst3
												# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
												yield 152, subst3
												# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
												yield 158, subst3
									if len(subjects2) == 0:
										break
									tmp495.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp495))
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 6148
								if len(subjects2) == 0:
									# State 6149
									if len(subjects) == 0:
										# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
										yield 112, subst3
										# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
										yield 132, subst3
										# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
										yield 134, subst3
							if len(subjects2) >= 1:
								tmp499 = []
								tmp499.append(subjects2.popleft())
								while True:
									if len(tmp499) > 1:
										tmp500 = create_operation_expression(associative1, tmp499)
									elif len(tmp499) == 1:
										tmp500 = tmp499[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp500)
									except ValueError:
										pass
									else:
										# State 6148
										if len(subjects2) == 0:
											# State 6149
											if len(subjects) == 0:
												# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
												yield 112, subst3
												# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
												yield 132, subst3
												# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
												yield 134, subst3
									if len(subjects2) == 0:
										break
									tmp499.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp499))
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2', 1)
							except ValueError:
								pass
							else:
								# State 6209
								if len(subjects2) == 0:
									# State 6210
									if len(subjects) == 0:
										# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
										yield 118, subst3
										# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
										yield 119, subst3
							if len(subjects2) >= 1:
								tmp503 = []
								tmp503.append(subjects2.popleft())
								while True:
									if len(tmp503) > 1:
										tmp504 = create_operation_expression(associative1, tmp503)
									elif len(tmp503) == 1:
										tmp504 = tmp503[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp504)
									except ValueError:
										pass
									else:
										# State 6209
										if len(subjects2) == 0:
											# State 6210
											if len(subjects) == 0:
												# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
												yield 118, subst3
												# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
												yield 119, subst3
									if len(subjects2) == 0:
										break
									tmp503.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp503))
							if len(subjects2) >= 1:
								tmp506 = []
								tmp506.append(subjects2.popleft())
								while True:
									if len(tmp506) > 1:
										tmp507 = create_operation_expression(associative1, tmp506)
									elif len(tmp506) == 1:
										tmp507 = tmp506[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2', tmp507)
									except ValueError:
										pass
									else:
										# State 6221
										if len(subjects2) == 0:
											# State 6222
											if len(subjects) == 0:
												# 326: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50) and (cons_f13) and (cons_f145)
												yield 326, subst3
												# 310: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
												yield 310, subst3
												# 120: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f146)
												yield 120, subst3
												# 121: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f137)
												yield 121, subst3
												# 124: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f147)
												yield 124, subst3
									if len(subjects2) == 0:
										break
									tmp506.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp506))
							if len(subjects2) >= 1:
								tmp509 = []
								tmp509.append(subjects2.popleft())
								while True:
									if len(tmp509) > 1:
										tmp510 = create_operation_expression(associative1, tmp509)
									elif len(tmp509) == 1:
										tmp510 = tmp509[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp510)
									except ValueError:
										pass
									else:
										# State 6236
										if len(subjects2) == 0:
											# State 6237
											if len(subjects) == 0:
												# 314: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
												yield 314, subst3
												# 126: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f149) and (cons_f137)
												yield 126, subst3
									if len(subjects2) == 0:
										break
									tmp509.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp509))
							if len(subjects2) >= 1:
								tmp512 = []
								tmp512.append(subjects2.popleft())
								while True:
									if len(tmp512) > 1:
										tmp513 = create_operation_expression(associative1, tmp512)
									elif len(tmp512) == 1:
										tmp513 = tmp512[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_2', tmp513)
									except ValueError:
										pass
									else:
										# State 6409
										if len(subjects2) == 0:
											# State 6410
											if len(subjects) == 0:
												# 258: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f205)
												yield 258, subst3
												# 291: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f170)
												yield 291, subst3
												# 322: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 322, subst3
												# 261: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f202) and (cons_f206)
												yield 261, subst3
												# 294: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
												yield 294, subst3
												# 249: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f200)
												yield 249, subst3
												# 255: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f182) and (cons_f203) and (cons_f204)
												yield 255, subst3
												# 298: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f170)
												yield 298, subst3
												# 235: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157)
												yield 235, subst3
												# 301: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144)
												yield 301, subst3
												# 238: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157)
												yield 238, subst3
												# 304: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f144) and (cons_f170)
												yield 304, subst3
												# 307: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
												yield 307, subst3
												# 345: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
												yield 345, subst3
												# 283: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
												yield 283, subst3
												# 252: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f202)
												yield 252, subst3
												# 349: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
												yield 349, subst3
												# 287: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
												yield 287, subst3
									if len(subjects2) == 0:
										break
									tmp512.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp512))
							if len(subjects2) >= 1 and subjects2[0] == -1:
								tmp515 = subjects2.popleft()
								# State 6254
								if len(subjects2) == 0:
									# State 6255
									if len(subjects) == 0:
										# 137: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
										yield 137, subst2
										# 177: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4)
										yield 177, subst2
										# 140: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
										yield 140, subst2
										# 143: 1/(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f156)
										yield 143, subst2
								subjects2.appendleft(tmp515)
							if len(subjects2) >= 1 and subjects2[0] == -1/4:
								tmp516 = subjects2.popleft()
								# State 6305
								if len(subjects2) == 0:
									# State 6306
									if len(subjects) == 0:
										# 179: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 179, subst2
										# 181: (e + x*f)**(-1/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 181, subst2
								subjects2.appendleft(tmp516)
							if len(subjects2) >= 1 and subjects2[0] == -3/4:
								tmp517 = subjects2.popleft()
								# State 6317
								if len(subjects2) == 0:
									# State 6318
									if len(subjects) == 0:
										# 182: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
										yield 182, subst2
										# 183: (e + x*f)**(-3/4) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
										yield 183, subst2
								subjects2.appendleft(tmp517)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp518 = subjects2.popleft()
								# State 6347
								if len(subjects2) == 0:
									# State 6348
									if len(subjects) == 0:
										# 336: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 336, subst2
										# 194: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f182) and (cons_f184)
										yield 194, subst2
										# 197: sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185)
										yield 197, subst2
								subjects2.appendleft(tmp518)
							if len(subjects2) >= 1 and subjects2[0] == -1/3:
								tmp519 = subjects2.popleft()
								# State 6382
								if len(subjects2) == 0:
									# State 6383
									if len(subjects) == 0:
										# 217: (e + x*f)**(-1/3) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
										yield 217, subst2
								subjects2.appendleft(tmp519)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp520 = subjects2.popleft()
								# State 6534
								if len(subjects2) == 0:
									# State 6535
									if len(subjects) == 0:
										# 330: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 330, subst2
										# 334: 1/sqrt(e + x*f) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 334, subst2
								subjects2.appendleft(tmp520)
						if pattern_index == 1:
							# State 6163
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_1', 1)
							except ValueError:
								pass
							else:
								# State 6164
								if len(subjects2) == 0:
									# State 6165
									if len(subjects) == 0:
										# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
										yield 225, subst3
										# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
										yield 114, subst3
										# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
										yield 220, subst3
										# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
										yield 222, subst3
							if len(subjects2) >= 1:
								tmp522 = []
								tmp522.append(subjects2.popleft())
								while True:
									if len(tmp522) > 1:
										tmp523 = create_operation_expression(associative1, tmp522)
									elif len(tmp522) == 1:
										tmp523 = tmp522[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp523)
									except ValueError:
										pass
									else:
										# State 6164
										if len(subjects2) == 0:
											# State 6165
											if len(subjects) == 0:
												# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
												yield 225, subst3
												# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
												yield 114, subst3
												# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
												yield 220, subst3
												# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
												yield 222, subst3
									if len(subjects2) == 0:
										break
									tmp522.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp522))
						if pattern_index == 2:
							# State 8284
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 8285
								if len(subjects2) == 0:
									# State 8286
									if len(subjects) == 0:
										# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
										yield 385, subst3
										# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
										yield 382, subst3
							if len(subjects2) >= 1:
								tmp526 = []
								tmp526.append(subjects2.popleft())
								while True:
									if len(tmp526) > 1:
										tmp527 = create_operation_expression(associative1, tmp526)
									elif len(tmp526) == 1:
										tmp527 = tmp526[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_2', tmp527)
									except ValueError:
										pass
									else:
										# State 8285
										if len(subjects2) == 0:
											# State 8286
											if len(subjects) == 0:
												# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
												yield 385, subst3
												# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
												yield 382, subst3
									if len(subjects2) == 0:
										break
									tmp526.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp526))
						if pattern_index == 3:
							# State 8624
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 8625
								if len(subjects2) == 0:
									# State 8626
									if len(subjects) == 0:
										# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
										yield 408, subst3
							if len(subjects2) >= 1:
								tmp530 = []
								tmp530.append(subjects2.popleft())
								while True:
									if len(tmp530) > 1:
										tmp531 = create_operation_expression(associative1, tmp530)
									elif len(tmp530) == 1:
										tmp531 = tmp530[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_2', tmp531)
									except ValueError:
										pass
									else:
										# State 8625
										if len(subjects2) == 0:
											# State 8626
											if len(subjects) == 0:
												# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
												yield 408, subst3
									if len(subjects2) == 0:
										break
									tmp530.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp530))
					subjects2.appendleft(tmp491)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0_3', 0)
			except ValueError:
				pass
			else:
				# State 6179
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6180
					if len(subjects2) >= 1:
						tmp535 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.0', tmp535)
						except ValueError:
							pass
						else:
							# State 6181
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 6182
								if len(subjects2) == 0:
									# State 6183
									if len(subjects) == 0:
										# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
										yield 226, subst4
										# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
										yield 115, subst4
										# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
										yield 221, subst4
										# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
										yield 223, subst4
							if len(subjects2) >= 1:
								tmp538 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_2', tmp538)
								except ValueError:
									pass
								else:
									# State 6182
									if len(subjects2) == 0:
										# State 6183
										if len(subjects) == 0:
											# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
											yield 226, subst4
											# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
											yield 115, subst4
											# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
											yield 221, subst4
											# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
											yield 223, subst4
								subjects2.appendleft(tmp538)
						subjects2.appendleft(tmp535)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_4', 1)
				except ValueError:
					pass
				else:
					# State 6516
					if len(subjects2) >= 1:
						tmp541 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0', tmp541)
						except ValueError:
							pass
						else:
							# State 6517
							if len(subjects2) >= 1:
								tmp543 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_1', tmp543)
								except ValueError:
									pass
								else:
									# State 6518
									if len(subjects2) == 0:
										# State 6519
										if len(subjects) == 0:
											# 327: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
											yield 327, subst4
								subjects2.appendleft(tmp543)
							if len(subjects2) >= 1:
								tmp545 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_3', tmp545)
								except ValueError:
									pass
								else:
									# State 6601
									if len(subjects2) == 0:
										# State 6602
										if len(subjects) == 0:
											# 346: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
											yield 346, subst4
											# 350: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f221)
											yield 350, subst4
								subjects2.appendleft(tmp545)
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_3', 1)
							except ValueError:
								pass
							else:
								# State 6628
								if len(subjects2) == 0:
									# State 6629
									if len(subjects) == 0:
										# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 354, subst4
										# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
										yield 356, subst4
							if len(subjects2) >= 1:
								tmp548 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_3', tmp548)
								except ValueError:
									pass
								else:
									# State 6628
									if len(subjects2) == 0:
										# State 6629
										if len(subjects) == 0:
											# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
											yield 354, subst4
											# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
											yield 356, subst4
								subjects2.appendleft(tmp548)
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp550 = subjects2.popleft()
								# State 6538
								if len(subjects2) == 0:
									# State 6539
									if len(subjects) == 0:
										# 331: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 331, subst3
										# 335: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 335, subst3
								subjects2.appendleft(tmp550)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp551 = subjects2.popleft()
								# State 6550
								if len(subjects2) == 0:
									# State 6551
									if len(subjects) == 0:
										# 337: sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 337, subst3
								subjects2.appendleft(tmp551)
						subjects2.appendleft(tmp541)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.0_7', 1)
				except ValueError:
					pass
				else:
					# State 8303
					if len(subjects2) >= 1:
						tmp553 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1.0_6', tmp553)
						except ValueError:
							pass
						else:
							# State 8304
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2_3', 1)
							except ValueError:
								pass
							else:
								# State 8305
								if len(subjects2) == 0:
									# State 8306
									if len(subjects) == 0:
										# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
										yield 386, subst4
							if len(subjects2) >= 1:
								tmp556 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2_3', tmp556)
								except ValueError:
									pass
								else:
									# State 8305
									if len(subjects2) == 0:
										# State 8306
										if len(subjects) == 0:
											# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
											yield 386, subst4
								subjects2.appendleft(tmp556)
						subjects2.appendleft(tmp553)
				if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
					tmp558 = subjects2.popleft()
					associative1 = tmp558
					associative_type1 = type(tmp558)
					subjects559 = deque(op_iter(tmp558))
					matcher = CommutativeMatcher6185.get()
					tmp560 = subjects559
					subjects559 = []
					for s in tmp560:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp560, subst1):
						if pattern_index == 0:
							# State 6186
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_2', 1)
							except ValueError:
								pass
							else:
								# State 6187
								if len(subjects2) == 0:
									# State 6188
									if len(subjects) == 0:
										# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
										yield 226, subst3
										# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
										yield 115, subst3
										# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
										yield 221, subst3
										# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
										yield 223, subst3
							if len(subjects2) >= 1:
								tmp562 = []
								tmp562.append(subjects2.popleft())
								while True:
									if len(tmp562) > 1:
										tmp563 = create_operation_expression(associative1, tmp562)
									elif len(tmp562) == 1:
										tmp563 = tmp562[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_2', tmp563)
									except ValueError:
										pass
									else:
										# State 6187
										if len(subjects2) == 0:
											# State 6188
											if len(subjects) == 0:
												# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
												yield 226, subst3
												# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
												yield 115, subst3
												# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
												yield 221, subst3
												# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
												yield 223, subst3
									if len(subjects2) == 0:
										break
									tmp562.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp562))
						if pattern_index == 1:
							# State 6520
							if len(subjects2) >= 1:
								tmp565 = []
								tmp565.append(subjects2.popleft())
								while True:
									if len(tmp565) > 1:
										tmp566 = create_operation_expression(associative1, tmp565)
									elif len(tmp565) == 1:
										tmp566 = tmp565[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_1', tmp566)
									except ValueError:
										pass
									else:
										# State 6521
										if len(subjects2) == 0:
											# State 6522
											if len(subjects) == 0:
												# 327: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50)
												yield 327, subst3
									if len(subjects2) == 0:
										break
									tmp565.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp565))
							if len(subjects2) >= 1:
								tmp568 = []
								tmp568.append(subjects2.popleft())
								while True:
									if len(tmp568) > 1:
										tmp569 = create_operation_expression(associative1, tmp568)
									elif len(tmp568) == 1:
										tmp569 = tmp568[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_3', tmp569)
									except ValueError:
										pass
									else:
										# State 6603
										if len(subjects2) == 0:
											# State 6604
											if len(subjects) == 0:
												# 346: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
												yield 346, subst3
												# 350: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f221)
												yield 350, subst3
									if len(subjects2) == 0:
										break
									tmp568.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp568))
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_3', 1)
							except ValueError:
								pass
							else:
								# State 6630
								if len(subjects2) == 0:
									# State 6631
									if len(subjects) == 0:
										# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
										yield 354, subst3
										# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
										yield 356, subst3
							if len(subjects2) >= 1:
								tmp572 = []
								tmp572.append(subjects2.popleft())
								while True:
									if len(tmp572) > 1:
										tmp573 = create_operation_expression(associative1, tmp572)
									elif len(tmp572) == 1:
										tmp573 = tmp572[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_3', tmp573)
									except ValueError:
										pass
									else:
										# State 6630
										if len(subjects2) == 0:
											# State 6631
											if len(subjects) == 0:
												# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
												yield 354, subst3
												# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
												yield 356, subst3
									if len(subjects2) == 0:
										break
									tmp572.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp572))
							if len(subjects2) >= 1 and subjects2[0] == -1/2:
								tmp575 = subjects2.popleft()
								# State 6540
								if len(subjects2) == 0:
									# State 6541
									if len(subjects) == 0:
										# 331: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 331, subst2
										# 335: 1/sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
										yield 335, subst2
								subjects2.appendleft(tmp575)
							if len(subjects2) >= 1 and subjects2[0] == 1/2:
								tmp576 = subjects2.popleft()
								# State 6552
								if len(subjects2) == 0:
									# State 6553
									if len(subjects) == 0:
										# 337: sqrt(g + x*h) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
										yield 337, subst2
								subjects2.appendleft(tmp576)
						if pattern_index == 2:
							# State 8307
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2_3', 1)
							except ValueError:
								pass
							else:
								# State 8308
								if len(subjects2) == 0:
									# State 8309
									if len(subjects) == 0:
										# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
										yield 386, subst3
							if len(subjects2) >= 1:
								tmp578 = []
								tmp578.append(subjects2.popleft())
								while True:
									if len(tmp578) > 1:
										tmp579 = create_operation_expression(associative1, tmp578)
									elif len(tmp578) == 1:
										tmp579 = tmp578[0]
									else:
										assert False, "Unreachable"
									subst3 = Substitution(subst2)
									try:
										subst3.try_add_variable('i2.2_3', tmp579)
									except ValueError:
										pass
									else:
										# State 8308
										if len(subjects2) == 0:
											# State 8309
											if len(subjects) == 0:
												# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
												yield 386, subst3
									if len(subjects2) == 0:
										break
									tmp578.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp578))
					subjects2.appendleft(tmp558)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i2.2.0', 1)
			except ValueError:
				pass
			else:
				# State 6716
				if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
					tmp582 = subjects2.popleft()
					subjects583 = deque(op_iter(tmp582))
					# State 6717
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2.0', 0)
					except ValueError:
						pass
					else:
						# State 6718
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.1.0_1', 1)
						except ValueError:
							pass
						else:
							# State 6719
							if len(subjects583) >= 1:
								tmp586 = subjects583.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.1.0', tmp586)
								except ValueError:
									pass
								else:
									# State 6720
									if len(subjects583) >= 1:
										tmp588 = subjects583.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.2', tmp588)
										except ValueError:
											pass
										else:
											# State 6721
											if len(subjects583) == 0:
												# State 6722
												if len(subjects2) >= 1:
													tmp590 = subjects2.popleft()
													subst6 = Substitution(subst5)
													try:
														subst6.try_add_variable('i2.2', tmp590)
													except ValueError:
														pass
													else:
														# State 6723
														if len(subjects2) == 0:
															# State 6724
															if len(subjects) == 0:
																# 357: (c*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f2002)
																yield 357, subst6
													subjects2.appendleft(tmp590)
										subjects583.appendleft(tmp588)
								subjects583.appendleft(tmp586)
						if len(subjects583) >= 1 and isinstance(subjects583[0], Mul):
							tmp592 = subjects583.popleft()
							associative1 = tmp592
							associative_type1 = type(tmp592)
							subjects593 = deque(op_iter(tmp592))
							matcher = CommutativeMatcher6726.get()
							tmp594 = subjects593
							subjects593 = []
							for s in tmp594:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp594, subst2):
								if pattern_index == 0:
									# State 6727
									if len(subjects583) >= 1:
										tmp595 = []
										tmp595.append(subjects583.popleft())
										while True:
											if len(tmp595) > 1:
												tmp596 = create_operation_expression(associative1, tmp595)
											elif len(tmp595) == 1:
												tmp596 = tmp595[0]
											else:
												assert False, "Unreachable"
											subst4 = Substitution(subst3)
											try:
												subst4.try_add_variable('i2.2.2', tmp596)
											except ValueError:
												pass
											else:
												# State 6728
												if len(subjects583) == 0:
													# State 6729
													if len(subjects2) >= 1:
														tmp598 = subjects2.popleft()
														subst5 = Substitution(subst4)
														try:
															subst5.try_add_variable('i2.2', tmp598)
														except ValueError:
															pass
														else:
															# State 6730
															if len(subjects2) == 0:
																# State 6731
																if len(subjects) == 0:
																	# 357: (c*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f2002)
																	yield 357, subst5
														subjects2.appendleft(tmp598)
											if len(subjects583) == 0:
												break
											tmp595.append(subjects583.popleft())
										subjects583.extendleft(reversed(tmp595))
							subjects583.appendleft(tmp592)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2.2.0', 1)
					except ValueError:
						pass
					else:
						# State 6996
						if len(subjects583) >= 1 and isinstance(subjects583[0], Pow):
							tmp601 = subjects583.popleft()
							subjects602 = deque(op_iter(tmp601))
							# State 6997
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.2.2.0', 0)
							except ValueError:
								pass
							else:
								# State 6998
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2.1.0_1', 1)
								except ValueError:
									pass
								else:
									# State 6999
									if len(subjects602) >= 1:
										tmp605 = subjects602.popleft()
										subst5 = Substitution(subst4)
										try:
											subst5.try_add_variable('i2.2.2.2.1.0', tmp605)
										except ValueError:
											pass
										else:
											# State 7000
											if len(subjects602) >= 1:
												tmp607 = subjects602.popleft()
												subst6 = Substitution(subst5)
												try:
													subst6.try_add_variable('i2.2.2.2', tmp607)
												except ValueError:
													pass
												else:
													# State 7001
													if len(subjects602) == 0:
														# State 7002
														if len(subjects583) >= 1:
															tmp609 = subjects583.popleft()
															subst7 = Substitution(subst6)
															try:
																subst7.try_add_variable('i2.2.2', tmp609)
															except ValueError:
																pass
															else:
																# State 7003
																if len(subjects583) == 0:
																	# State 7004
																	if len(subjects2) >= 1:
																		tmp611 = subjects2.popleft()
																		subst8 = Substitution(subst7)
																		try:
																			subst8.try_add_variable('i2.2', tmp611)
																		except ValueError:
																			pass
																		else:
																			# State 7005
																			if len(subjects2) == 0:
																				# State 7006
																				if len(subjects) == 0:
																					# 359: (c*(d*(a + x*b)**n)**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																					yield 359, subst8
																		subjects2.appendleft(tmp611)
															subjects583.appendleft(tmp609)
												subjects602.appendleft(tmp607)
										subjects602.appendleft(tmp605)
								if len(subjects602) >= 1 and isinstance(subjects602[0], Mul):
									tmp613 = subjects602.popleft()
									associative1 = tmp613
									associative_type1 = type(tmp613)
									subjects614 = deque(op_iter(tmp613))
									matcher = CommutativeMatcher7008.get()
									tmp615 = subjects614
									subjects614 = []
									for s in tmp615:
										matcher.add_subject(s)
									for pattern_index, subst4 in matcher.match(tmp615, subst3):
										if pattern_index == 0:
											# State 7009
											if len(subjects602) >= 1:
												tmp616 = []
												tmp616.append(subjects602.popleft())
												while True:
													if len(tmp616) > 1:
														tmp617 = create_operation_expression(associative1, tmp616)
													elif len(tmp616) == 1:
														tmp617 = tmp616[0]
													else:
														assert False, "Unreachable"
													subst5 = Substitution(subst4)
													try:
														subst5.try_add_variable('i2.2.2.2', tmp617)
													except ValueError:
														pass
													else:
														# State 7010
														if len(subjects602) == 0:
															# State 7011
															if len(subjects583) >= 1:
																tmp619 = subjects583.popleft()
																subst6 = Substitution(subst5)
																try:
																	subst6.try_add_variable('i2.2.2', tmp619)
																except ValueError:
																	pass
																else:
																	# State 7012
																	if len(subjects583) == 0:
																		# State 7013
																		if len(subjects2) >= 1:
																			tmp621 = subjects2.popleft()
																			subst7 = Substitution(subst6)
																			try:
																				subst7.try_add_variable('i2.2', tmp621)
																			except ValueError:
																				pass
																			else:
																				# State 7014
																				if len(subjects2) == 0:
																					# State 7015
																					if len(subjects) == 0:
																						# 359: (c*(d*(a + x*b)**n)**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																						yield 359, subst7
																			subjects2.appendleft(tmp621)
																subjects583.appendleft(tmp619)
													if len(subjects602) == 0:
														break
													tmp616.append(subjects602.popleft())
												subjects602.extendleft(reversed(tmp616))
									subjects602.appendleft(tmp613)
							if len(subjects602) >= 1 and isinstance(subjects602[0], Add):
								tmp623 = subjects602.popleft()
								associative1 = tmp623
								associative_type1 = type(tmp623)
								subjects624 = deque(op_iter(tmp623))
								matcher = CommutativeMatcher7017.get()
								tmp625 = subjects624
								subjects624 = []
								for s in tmp625:
									matcher.add_subject(s)
								for pattern_index, subst3 in matcher.match(tmp625, subst2):
									if pattern_index == 0:
										# State 7023
										if len(subjects602) >= 1:
											tmp626 = []
											tmp626.append(subjects602.popleft())
											while True:
												if len(tmp626) > 1:
													tmp627 = create_operation_expression(associative1, tmp626)
												elif len(tmp626) == 1:
													tmp627 = tmp626[0]
												else:
													assert False, "Unreachable"
												subst4 = Substitution(subst3)
												try:
													subst4.try_add_variable('i2.2.2.2', tmp627)
												except ValueError:
													pass
												else:
													# State 7024
													if len(subjects602) == 0:
														# State 7025
														if len(subjects583) >= 1:
															tmp629 = subjects583.popleft()
															subst5 = Substitution(subst4)
															try:
																subst5.try_add_variable('i2.2.2', tmp629)
															except ValueError:
																pass
															else:
																# State 7026
																if len(subjects583) == 0:
																	# State 7027
																	if len(subjects2) >= 1:
																		tmp631 = subjects2.popleft()
																		subst6 = Substitution(subst5)
																		try:
																			subst6.try_add_variable('i2.2', tmp631)
																		except ValueError:
																			pass
																		else:
																			# State 7028
																			if len(subjects2) == 0:
																				# State 7029
																				if len(subjects) == 0:
																					# 359: (c*(d*(a + x*b)**n)**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																					yield 359, subst6
																		subjects2.appendleft(tmp631)
															subjects583.appendleft(tmp629)
												if len(subjects602) == 0:
													break
												tmp626.append(subjects602.popleft())
											subjects602.extendleft(reversed(tmp626))
								subjects602.appendleft(tmp623)
							subjects583.appendleft(tmp601)
					if len(subjects583) >= 1:
						tmp633 = subjects583.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2.1', tmp633)
						except ValueError:
							pass
						else:
							# State 8776
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.2', 1)
							except ValueError:
								pass
							else:
								# State 8777
								if len(subjects583) == 0:
									# State 8778
									if len(subjects2) >= 1:
										tmp636 = subjects2.popleft()
										subst4 = Substitution(subst3)
										try:
											subst4.try_add_variable('i2.2', tmp636)
										except ValueError:
											pass
										else:
											# State 8779
											if len(subjects2) == 0:
												# State 8780
												if len(subjects) == 0:
													# 429: (a*v**m)**p /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
													yield 429, subst4
										subjects2.appendleft(tmp636)
							if len(subjects583) >= 1:
								tmp638 = subjects583.popleft()
								subst3 = Substitution(subst2)
								try:
									subst3.try_add_variable('i2.2.2', tmp638)
								except ValueError:
									pass
								else:
									# State 8777
									if len(subjects583) == 0:
										# State 8778
										if len(subjects2) >= 1:
											tmp640 = subjects2.popleft()
											subst4 = Substitution(subst3)
											try:
												subst4.try_add_variable('i2.2', tmp640)
											except ValueError:
												pass
											else:
												# State 8779
												if len(subjects2) == 0:
													# State 8780
													if len(subjects) == 0:
														# 429: (a*v**m)**p /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
														yield 429, subst4
											subjects2.appendleft(tmp640)
								subjects583.appendleft(tmp638)
						subjects583.appendleft(tmp633)
					if len(subjects583) >= 1 and isinstance(subjects583[0], Add):
						tmp642 = subjects583.popleft()
						associative1 = tmp642
						associative_type1 = type(tmp642)
						subjects643 = deque(op_iter(tmp642))
						matcher = CommutativeMatcher6733.get()
						tmp644 = subjects643
						subjects643 = []
						for s in tmp644:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp644, subst1):
							if pattern_index == 0:
								# State 6739
								if len(subjects583) >= 1:
									tmp645 = []
									tmp645.append(subjects583.popleft())
									while True:
										if len(tmp645) > 1:
											tmp646 = create_operation_expression(associative1, tmp645)
										elif len(tmp645) == 1:
											tmp646 = tmp645[0]
										else:
											assert False, "Unreachable"
										subst3 = Substitution(subst2)
										try:
											subst3.try_add_variable('i2.2.2', tmp646)
										except ValueError:
											pass
										else:
											# State 6740
											if len(subjects583) == 0:
												# State 6741
												if len(subjects2) >= 1:
													tmp648 = subjects2.popleft()
													subst4 = Substitution(subst3)
													try:
														subst4.try_add_variable('i2.2', tmp648)
													except ValueError:
														pass
													else:
														# State 6742
														if len(subjects2) == 0:
															# State 6743
															if len(subjects) == 0:
																# 357: (c*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f2002)
																yield 357, subst4
													subjects2.appendleft(tmp648)
										if len(subjects583) == 0:
											break
										tmp645.append(subjects583.popleft())
									subjects583.extendleft(reversed(tmp645))
						subjects583.appendleft(tmp642)
					if len(subjects583) >= 1 and isinstance(subjects583[0], Mul):
						tmp650 = subjects583.popleft()
						associative1 = tmp650
						associative_type1 = type(tmp650)
						subjects651 = deque(op_iter(tmp650))
						matcher = CommutativeMatcher6826.get()
						tmp652 = subjects651
						subjects651 = []
						for s in tmp652:
							matcher.add_subject(s)
						for pattern_index, subst2 in matcher.match(tmp652, subst1):
							if pattern_index == 0:
								# State 6841
								if len(subjects583) >= 1:
									tmp653 = []
									tmp653.append(subjects583.popleft())
									while True:
										if len(tmp653) > 1:
											tmp654 = create_operation_expression(associative1, tmp653)
										elif len(tmp653) == 1:
											tmp654 = tmp653[0]
										else:
											assert False, "Unreachable"
										subst3 = Substitution(subst2)
										try:
											subst3.try_add_variable('i2.2.2', tmp654)
										except ValueError:
											pass
										else:
											# State 6842
											if len(subjects583) == 0:
												# State 6843
												if len(subjects2) >= 1:
													tmp656 = subjects2.popleft()
													subst4 = Substitution(subst3)
													try:
														subst4.try_add_variable('i2.2', tmp656)
													except ValueError:
														pass
													else:
														# State 6844
														if len(subjects2) == 0:
															# State 6845
															if len(subjects) == 0:
																# 358: (c*(d*(a + x*b))**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																yield 358, subst4
													subjects2.appendleft(tmp656)
										if len(subjects583) == 0:
											break
										tmp653.append(subjects583.popleft())
									subjects583.extendleft(reversed(tmp653))
							if pattern_index == 1:
								# State 7051
								if len(subjects583) >= 1:
									tmp658 = []
									tmp658.append(subjects583.popleft())
									while True:
										if len(tmp658) > 1:
											tmp659 = create_operation_expression(associative1, tmp658)
										elif len(tmp658) == 1:
											tmp659 = tmp658[0]
										else:
											assert False, "Unreachable"
										subst3 = Substitution(subst2)
										try:
											subst3.try_add_variable('i2.2.2', tmp659)
										except ValueError:
											pass
										else:
											# State 7052
											if len(subjects583) == 0:
												# State 7053
												if len(subjects2) >= 1:
													tmp661 = subjects2.popleft()
													subst4 = Substitution(subst3)
													try:
														subst4.try_add_variable('i2.2', tmp661)
													except ValueError:
														pass
													else:
														# State 7054
														if len(subjects2) == 0:
															# State 7055
															if len(subjects) == 0:
																# 359: (c*(d*(a + x*b)**n)**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																yield 359, subst4
													subjects2.appendleft(tmp661)
										if len(subjects583) == 0:
											break
										tmp658.append(subjects583.popleft())
									subjects583.extendleft(reversed(tmp658))
						subjects583.appendleft(tmp650)
					subjects2.appendleft(tmp582)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.2', 1)
				except ValueError:
					pass
				else:
					# State 8772
					if len(subjects2) >= 1:
						tmp664 = subjects2.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.1', tmp664)
						except ValueError:
							pass
						else:
							# State 8773
							if len(subjects2) >= 1:
								tmp666 = subjects2.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2', tmp666)
								except ValueError:
									pass
								else:
									# State 8774
									if len(subjects2) == 0:
										# State 8775
										if len(subjects) == 0:
											# 429: (a*v**m)**p /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
											yield 429, subst4
								subjects2.appendleft(tmp666)
						subjects2.appendleft(tmp664)
			if len(subjects2) >= 1:
				tmp668 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.1', tmp668)
				except ValueError:
					pass
				else:
					# State 7852
					if len(subjects2) >= 1 and subjects2[0] == -1:
						tmp670 = subjects2.popleft()
						# State 7853
						if len(subjects2) == 0:
							# State 7854
							if len(subjects) == 0:
								# 368: 1/y /; (With6938)
								yield 368, subst1
								# 369: 1/y /; (With6939)
								yield 369, subst1
								# 439: 1/y /; (cons_f2029) and (With6985)
								yield 439, subst1
						subjects2.appendleft(tmp670)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2', 1)
					except ValueError:
						pass
					else:
						# State 7865
						if len(subjects2) == 0:
							# State 7866
							if len(subjects) == 0:
								# 440: y**m /; (cons_f17) and (cons_f261) and (cons_f2033) and (With6986)
								yield 440, subst2
								# 426: y**m /; (cons_f21) and (cons_f66) and (cons_f2024)
								yield 426, subst2
								# 371: y**m /; (cons_f21) and (cons_f66) and (With6940)
								yield 371, subst2
								# 372: y**m /; (cons_f21) and (cons_f66) and (With6941)
								yield 372, subst2
					if len(subjects2) >= 1:
						tmp672 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', tmp672)
						except ValueError:
							pass
						else:
							# State 7865
							if len(subjects2) == 0:
								# State 7866
								if len(subjects) == 0:
									# 440: y**m /; (cons_f17) and (cons_f261) and (cons_f2033) and (With6986)
									yield 440, subst2
									# 426: y**m /; (cons_f21) and (cons_f66) and (cons_f2024)
									yield 426, subst2
									# 371: y**m /; (cons_f21) and (cons_f66) and (With6940)
									yield 371, subst2
									# 372: y**m /; (cons_f21) and (cons_f66) and (With6941)
									yield 372, subst2
						subjects2.appendleft(tmp672)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8410
						if len(subjects2) == 0:
							# State 8411
							if len(subjects) == 0:
								# 402: v**m /; (cons_f21) and (With6957)
								yield 402, subst2
								# 397: v**m /; (cons_f21) and (With6955)
								yield 397, subst2
								# 390: v**m /; (cons_f21) and (cons_f2012) and (With6951)
								yield 390, subst2
								# 399: v**m /; (cons_f21) and (With6956)
								yield 399, subst2
					if len(subjects2) >= 1:
						tmp675 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', tmp675)
						except ValueError:
							pass
						else:
							# State 8410
							if len(subjects2) == 0:
								# State 8411
								if len(subjects) == 0:
									# 402: v**m /; (cons_f21) and (With6957)
									yield 402, subst2
									# 397: v**m /; (cons_f21) and (With6955)
									yield 397, subst2
									# 390: v**m /; (cons_f21) and (cons_f2012) and (With6951)
									yield 390, subst2
									# 399: v**m /; (cons_f21) and (With6956)
									yield 399, subst2
						subjects2.appendleft(tmp675)
					if len(subjects2) >= 1:
						tmp677 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', tmp677)
						except ValueError:
							pass
						else:
							# State 8641
							if len(subjects2) == 0:
								# State 8642
								if len(subjects) == 0:
									# 409: F**v /; (cons_f1099) and (cons_f1099) and (With6960)
									yield 409, subst2
									# 410: F**v /; (cons_f1099) and (cons_f2013) and (With6961)
									yield 410, subst2
									# 441: F**v /; (cons_f367)
									yield 441, subst2
						subjects2.appendleft(tmp677)
				subjects2.appendleft(tmp668)
			if len(subjects2) >= 1:
				tmp679 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.1_1', tmp679)
				except ValueError:
					pass
				else:
					# State 7858
					if len(subjects2) >= 1 and subjects2[0] == -1:
						tmp681 = subjects2.popleft()
						# State 7859
						if len(subjects2) == 0:
							# State 7860
							if len(subjects) == 0:
								# 370: 1/y /; (With6939)
								yield 370, subst1
						subjects2.appendleft(tmp681)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 7871
						if len(subjects2) == 0:
							# State 7872
							if len(subjects) == 0:
								# 411: z**n /; (cons_f21) and (cons_f2013) and (With6961)
								yield 411, subst2
								# 373: z**n /; (cons_f4) and (With6941)
								yield 373, subst2
					if len(subjects2) >= 1:
						tmp683 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', tmp683)
						except ValueError:
							pass
						else:
							# State 7871
							if len(subjects2) == 0:
								# State 7872
								if len(subjects) == 0:
									# 411: z**n /; (cons_f21) and (cons_f2013) and (With6961)
									yield 411, subst2
									# 373: z**n /; (cons_f4) and (With6941)
									yield 373, subst2
						subjects2.appendleft(tmp683)
				subjects2.appendleft(tmp679)
			if len(subjects2) >= 1:
				tmp685 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1', tmp685)
				except ValueError:
					pass
				else:
					# State 8246
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8247
						if len(subjects2) == 0:
							# State 8248
							if len(subjects) == 0:
								# 416: u**m /; (cons_f52) and (cons_f2017) and (cons_f2015) and (cons_f2016) and (With6964)
								yield 416, subst2
								# 420: u**m /; (cons_f52) and (cons_f2019) and (With6966)
								yield 420, subst2
								# 424: u**m /; (cons_f52) and (cons_f2023) and (With6968)
								yield 424, subst2
								# 377: u**m /; (cons_f21)
								yield 377, subst2
								# 414: u**m /; (cons_f52) and (cons_f2014) and (cons_f2015) and (cons_f2016) and (With6963)
								yield 414, subst2
					if len(subjects2) >= 1:
						tmp688 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', tmp688)
						except ValueError:
							pass
						else:
							# State 8247
							if len(subjects2) == 0:
								# State 8248
								if len(subjects) == 0:
									# 416: u**m /; (cons_f52) and (cons_f2017) and (cons_f2015) and (cons_f2016) and (With6964)
									yield 416, subst2
									# 420: u**m /; (cons_f52) and (cons_f2019) and (With6966)
									yield 420, subst2
									# 424: u**m /; (cons_f52) and (cons_f2023) and (With6968)
									yield 424, subst2
									# 377: u**m /; (cons_f21)
									yield 377, subst2
									# 414: u**m /; (cons_f52) and (cons_f2014) and (cons_f2015) and (cons_f2016) and (With6963)
									yield 414, subst2
						subjects2.appendleft(tmp688)
				subjects2.appendleft(tmp685)
			if len(subjects2) >= 1:
				tmp690 = subjects2.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2.2.1.1_1', tmp690)
				except ValueError:
					pass
				else:
					# State 8674
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2_2', 1)
					except ValueError:
						pass
					else:
						# State 8675
						if len(subjects2) == 0:
							# State 8676
							if len(subjects) == 0:
								# 417: w**s /; (cons_f800) and (cons_f2017) and (With6964)
								yield 417, subst2
								# 425: w**s /; (cons_f800) and (cons_f2023) and (cons_f2021) and (cons_f2022) and (With6968)
								yield 425, subst2
					if len(subjects2) >= 1:
						tmp693 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_2', tmp693)
						except ValueError:
							pass
						else:
							# State 8675
							if len(subjects2) == 0:
								# State 8676
								if len(subjects) == 0:
									# 417: w**s /; (cons_f800) and (cons_f2017) and (With6964)
									yield 417, subst2
									# 425: w**s /; (cons_f800) and (cons_f2023) and (cons_f2021) and (cons_f2022) and (With6968)
									yield 425, subst2
						subjects2.appendleft(tmp693)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2.2_1', 1)
					except ValueError:
						pass
					else:
						# State 8691
						if len(subjects2) == 0:
							# State 8692
							if len(subjects) == 0:
								# 422: w**s /; (cons_f800) and (cons_f2020) and (cons_f2021) and (cons_f2022) and (With6967)
								yield 422, subst2
					if len(subjects2) >= 1:
						tmp696 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2_1', tmp696)
						except ValueError:
							pass
						else:
							# State 8691
							if len(subjects2) == 0:
								# State 8692
								if len(subjects) == 0:
									# 422: w**s /; (cons_f800) and (cons_f2020) and (cons_f2021) and (cons_f2022) and (With6967)
									yield 422, subst2
						subjects2.appendleft(tmp696)
				subjects2.appendleft(tmp690)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
				tmp698 = subjects2.popleft()
				associative1 = tmp698
				associative_type1 = type(tmp698)
				subjects699 = deque(op_iter(tmp698))
				matcher = CommutativeMatcher5990.get()
				tmp700 = subjects699
				subjects699 = []
				for s in tmp700:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp700, subst0):
					if pattern_index == 0:
						# State 5991
						if len(subjects2) >= 1:
							tmp701 = []
							tmp701.append(subjects2.popleft())
							while True:
								if len(tmp701) > 1:
									tmp702 = create_operation_expression(associative1, tmp701)
								elif len(tmp701) == 1:
									tmp702 = tmp701[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp702)
								except ValueError:
									pass
								else:
									# State 5992
									if len(subjects2) == 0:
										# State 5993
										if len(subjects) == 0:
											# 70: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f115)
											yield 70, subst2
											# 72: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f116)
											yield 72, subst2
											# 74: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f118) and (cons_f119)
											yield 74, subst2
											# 76: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f118)
											yield 76, subst2
											# 239: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18)
											yield 239, subst2
											# 242: (x*b)**m /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f198)
											yield 242, subst2
								if len(subjects2) == 0:
									break
								tmp701.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp701))
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2.2', 1)
						except ValueError:
							pass
						else:
							# State 6085
							if len(subjects2) == 0:
								# State 6086
								if len(subjects) == 0:
									# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
									yield 224, subst2
									# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
									yield 113, subst2
									# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
									yield 219, subst2
									# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
									yield 92, subst2
									# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
									yield 95, subst2
						if len(subjects2) >= 1:
							tmp705 = []
							tmp705.append(subjects2.popleft())
							while True:
								if len(tmp705) > 1:
									tmp706 = create_operation_expression(associative1, tmp705)
								elif len(tmp705) == 1:
									tmp706 = tmp705[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp706)
								except ValueError:
									pass
								else:
									# State 6085
									if len(subjects2) == 0:
										# State 6086
										if len(subjects) == 0:
											# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
											yield 224, subst2
											# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
											yield 113, subst2
											# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
											yield 219, subst2
											# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
											yield 92, subst2
											# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
											yield 95, subst2
								if len(subjects2) == 0:
									break
								tmp705.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp705))
						if len(subjects2) >= 1 and subjects2[0] == -1/2:
							tmp708 = subjects2.popleft()
							# State 6329
							if len(subjects2) == 0:
								# State 6330
								if len(subjects) == 0:
									# 198: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f186)
									yield 198, subst1
									# 201: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f187)
									yield 201, subst1
									# 184: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f179)
									yield 184, subst1
									# 187: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f180)
									yield 187, subst1
									# 189: 1/sqrt(x*b) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125)
									yield 189, subst1
							subjects2.appendleft(tmp708)
					if pattern_index == 1:
						# State 6765
						if len(subjects2) >= 1:
							tmp709 = []
							tmp709.append(subjects2.popleft())
							while True:
								if len(tmp709) > 1:
									tmp710 = create_operation_expression(associative1, tmp709)
								elif len(tmp709) == 1:
									tmp710 = tmp709[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp710)
								except ValueError:
									pass
								else:
									# State 6766
									if len(subjects2) == 0:
										# State 6767
										if len(subjects) == 0:
											# 357: (c*(a + x*b)**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f2002)
											yield 357, subst2
								if len(subjects2) == 0:
									break
								tmp709.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp709))
					if pattern_index == 2:
						# State 6865
						if len(subjects2) >= 1:
							tmp712 = []
							tmp712.append(subjects2.popleft())
							while True:
								if len(tmp712) > 1:
									tmp713 = create_operation_expression(associative1, tmp712)
								elif len(tmp712) == 1:
									tmp713 = tmp712[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp713)
								except ValueError:
									pass
								else:
									# State 6866
									if len(subjects2) == 0:
										# State 6867
										if len(subjects) == 0:
											# 358: (c*(d*(a + x*b))**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
											yield 358, subst2
								if len(subjects2) == 0:
									break
								tmp712.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp712))
					if pattern_index == 3:
						# State 7108
						if len(subjects2) >= 1:
							tmp715 = []
							tmp715.append(subjects2.popleft())
							while True:
								if len(tmp715) > 1:
									tmp716 = create_operation_expression(associative1, tmp715)
								elif len(tmp715) == 1:
									tmp716 = tmp715[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp716)
								except ValueError:
									pass
								else:
									# State 7109
									if len(subjects2) == 0:
										# State 7110
										if len(subjects) == 0:
											# 359: (c*(d*(a + x*b)**n)**p)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
											yield 359, subst2
								if len(subjects2) == 0:
									break
								tmp715.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp715))
					if pattern_index == 4:
						# State 8737
						if len(subjects2) >= 1:
							tmp718 = []
							tmp718.append(subjects2.popleft())
							while True:
								if len(tmp718) > 1:
									tmp719 = create_operation_expression(associative1, tmp718)
								elif len(tmp718) == 1:
									tmp719 = tmp718[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp719)
								except ValueError:
									pass
								else:
									# State 8738
									if len(subjects2) == 0:
										# State 8739
										if len(subjects) == 0:
											# 427: (a*v**m*w**n*z**q)**p /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f10) and (cons_f2025) and (cons_f2026)
											yield 427, subst2
								if len(subjects2) == 0:
									break
								tmp718.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp718))
					if pattern_index == 5:
						# State 8748
						if len(subjects2) >= 1:
							tmp721 = []
							tmp721.append(subjects2.popleft())
							while True:
								if len(tmp721) > 1:
									tmp722 = create_operation_expression(associative1, tmp721)
								elif len(tmp721) == 1:
									tmp722 = tmp721[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp722)
								except ValueError:
									pass
								else:
									# State 8749
									if len(subjects2) == 0:
										# State 8750
										if len(subjects) == 0:
											# 428: (a*v**m*w**n)**p /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2025)
											yield 428, subst2
								if len(subjects2) == 0:
									break
								tmp721.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp721))
					if pattern_index == 6:
						# State 8781
						if len(subjects2) >= 1:
							tmp724 = []
							tmp724.append(subjects2.popleft())
							while True:
								if len(tmp724) > 1:
									tmp725 = create_operation_expression(associative1, tmp724)
								elif len(tmp724) == 1:
									tmp725 = tmp724[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.2', tmp725)
								except ValueError:
									pass
								else:
									# State 8782
									if len(subjects2) == 0:
										# State 8783
										if len(subjects) == 0:
											# 429: (a*v**m)**p /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
											yield 429, subst2
								if len(subjects2) == 0:
									break
								tmp724.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp724))
				subjects2.appendleft(tmp698)
			subjects.appendleft(tmp1)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2', 1)
		except ValueError:
			pass
		else:
			# State 5755
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0', 0)
			except ValueError:
				pass
			else:
				# State 5756
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 5757
					if len(subjects) >= 1:
						tmp730 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp730)
						except ValueError:
							pass
						else:
							# State 5758
							if len(subjects) == 0:
								# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
								yield 163, subst4
								# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
								yield 4, subst4
								# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
								yield 101, subst4
								# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
								yield 262, subst4
								# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
								yield 227, subst4
								# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
								yield 104, subst4
								# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
								yield 265, subst4
								# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
								yield 383, subst4
								# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
								yield 107, subst4
								# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
								yield 127, subst4
								# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
								yield 84, subst4
								# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
								yield 279, subst4
								# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
								yield 89, subst4
								# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
								yield 378, subst4
								# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
								yield 27, subst4
								# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
								yield 380, subst4
								# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 351, subst4
						subjects.appendleft(tmp730)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 7385
					if len(subjects) >= 1 and isinstance(subjects[0], Pow):
						tmp733 = subjects.popleft()
						subjects734 = deque(op_iter(tmp733))
						# State 7386
						if len(subjects734) >= 1:
							tmp735 = subjects734.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1', tmp735)
							except ValueError:
								pass
							else:
								# State 7387
								if len(subjects734) >= 1 and isinstance(subjects734[0], Mul):
									tmp737 = subjects734.popleft()
									associative1 = tmp737
									associative_type1 = type(tmp737)
									subjects738 = deque(op_iter(tmp737))
									matcher = CommutativeMatcher7389.get()
									tmp739 = subjects738
									subjects738 = []
									for s in tmp739:
										matcher.add_subject(s)
									for pattern_index, subst5 in matcher.match(tmp739, subst4):
										if pattern_index == 0:
											# State 7427
											if len(subjects734) == 0:
												# State 7428
												if len(subjects) == 0:
													# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
													yield 364, subst5
										if pattern_index == 1:
											# State 7756
											if len(subjects734) == 0:
												# State 7757
												if len(subjects) == 0:
													# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
													yield 366, subst5
									subjects734.appendleft(tmp737)
								if len(subjects734) >= 1:
									tmp740 = subjects734.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2', tmp740)
									except ValueError:
										pass
									else:
										# State 8397
										if len(subjects734) == 0:
											# State 8398
											if len(subjects) == 0:
												# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
												yield 404, subst5
												# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
												yield 389, subst5
												# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
												yield 406, subst5
									subjects734.appendleft(tmp740)
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2', 1)
								except ValueError:
									pass
								else:
									# State 8494
									if len(subjects734) == 0:
										# State 8495
										if len(subjects) == 0:
											# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
											yield 401, subst5
											# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
											yield 394, subst5
											# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 443, subst5
								if len(subjects734) >= 1:
									tmp743 = subjects734.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2', tmp743)
									except ValueError:
										pass
									else:
										# State 8494
										if len(subjects734) == 0:
											# State 8495
											if len(subjects) == 0:
												# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
												yield 401, subst5
												# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
												yield 394, subst5
												# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 443, subst5
									subjects734.appendleft(tmp743)
							subjects734.appendleft(tmp735)
						subjects.appendleft(tmp733)
					subst4 = Substitution(subst3)
					try:
						subst4.try_add_variable('i2.2.1.2', 1)
					except ValueError:
						pass
					else:
						# State 8492
						if len(subjects) >= 1:
							tmp746 = subjects.popleft()
							subst5 = Substitution(subst4)
							try:
								subst5.try_add_variable('i2.2.1.1', tmp746)
							except ValueError:
								pass
							else:
								# State 8493
								if len(subjects) == 0:
									# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
									yield 401, subst5
									# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
									yield 394, subst5
									# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
									yield 443, subst5
							subjects.appendleft(tmp746)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp748 = subjects.popleft()
					associative1 = tmp748
					associative_type1 = type(tmp748)
					subjects749 = deque(op_iter(tmp748))
					matcher = CommutativeMatcher5760.get()
					tmp750 = subjects749
					subjects749 = []
					for s in tmp750:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp750, subst2):
						if pattern_index == 0:
							# State 5761
							if len(subjects) == 0:
								# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
								yield 163, subst3
								# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
								yield 4, subst3
								# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
								yield 101, subst3
								# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
								yield 262, subst3
								# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
								yield 227, subst3
								# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
								yield 104, subst3
								# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
								yield 265, subst3
								# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
								yield 383, subst3
								# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
								yield 107, subst3
								# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
								yield 127, subst3
								# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
								yield 84, subst3
								# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
								yield 279, subst3
								# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
								yield 89, subst3
								# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
								yield 378, subst3
								# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
								yield 27, subst3
								# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
								yield 380, subst3
								# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 351, subst3
						if pattern_index == 1:
							# State 7151
							if len(subjects) == 0:
								# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
								yield 360, subst3
						if pattern_index == 2:
							# State 7471
							if len(subjects) == 0:
								# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
								yield 364, subst3
						if pattern_index == 3:
							# State 7767
							if len(subjects) == 0:
								# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
								yield 366, subst3
						if pattern_index == 4:
							# State 8401
							if len(subjects) == 0:
								# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
								yield 404, subst3
								# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
								yield 389, subst3
								# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
								yield 406, subst3
						if pattern_index == 5:
							# State 8500
							if len(subjects) == 0:
								# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
								yield 401, subst3
								# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
								yield 394, subst3
								# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
								yield 443, subst3
					subjects.appendleft(tmp748)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6078
				if len(subjects) >= 1:
					tmp752 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.0', tmp752)
					except ValueError:
						pass
					else:
						# State 6079
						if len(subjects) == 0:
							# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
							yield 224, subst3
							# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
							yield 113, subst3
							# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
							yield 219, subst3
							# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
							yield 92, subst3
							# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
							yield 95, subst3
					subjects.appendleft(tmp752)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 6123
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 6124
					if len(subjects) >= 1:
						tmp756 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp756)
						except ValueError:
							pass
						else:
							# State 6125
							if len(subjects) == 0:
								# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
								yield 131, subst4
								# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
								yield 125, subst4
								# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
								yield 133, subst4
								# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
								yield 111, subst4
						subjects.appendleft(tmp756)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp758 = subjects.popleft()
					associative1 = tmp758
					associative_type1 = type(tmp758)
					subjects759 = deque(op_iter(tmp758))
					matcher = CommutativeMatcher6127.get()
					tmp760 = subjects759
					subjects759 = []
					for s in tmp760:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp760, subst2):
						if pattern_index == 0:
							# State 6128
							if len(subjects) == 0:
								# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
								yield 131, subst3
								# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
								yield 125, subst3
								# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
								yield 133, subst3
								# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
								yield 111, subst3
						if pattern_index == 1:
							# State 7330
							if len(subjects) == 0:
								# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
								yield 363, subst3
					subjects.appendleft(tmp758)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_2', 0)
			except ValueError:
				pass
			else:
				# State 6197
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 6198
					if len(subjects) >= 1:
						tmp763 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp763)
						except ValueError:
							pass
						else:
							# State 6199
							if len(subjects) == 0:
								# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
								yield 118, subst4
								# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
								yield 119, subst4
						subjects.appendleft(tmp763)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp765 = subjects.popleft()
					associative1 = tmp765
					associative_type1 = type(tmp765)
					subjects766 = deque(op_iter(tmp765))
					matcher = CommutativeMatcher6201.get()
					tmp767 = subjects766
					subjects766 = []
					for s in tmp767:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp767, subst2):
						if pattern_index == 0:
							# State 6202
							if len(subjects) == 0:
								# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
								yield 118, subst3
								# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
								yield 119, subst3
					subjects.appendleft(tmp765)
			if len(subjects) >= 1:
				tmp768 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.1', tmp768)
				except ValueError:
					pass
				else:
					# State 7864
					if len(subjects) == 0:
						# 440: y**m /; (cons_f17) and (cons_f261) and (cons_f2033) and (With6986)
						yield 440, subst2
						# 426: y**m /; (cons_f21) and (cons_f66) and (cons_f2024)
						yield 426, subst2
						# 371: y**m /; (cons_f21) and (cons_f66) and (With6940)
						yield 371, subst2
						# 372: y**m /; (cons_f21) and (cons_f66) and (With6941)
						yield 372, subst2
				subjects.appendleft(tmp768)
			if len(subjects) >= 1 and isinstance(subjects[0], Add):
				tmp770 = subjects.popleft()
				associative1 = tmp770
				associative_type1 = type(tmp770)
				subjects771 = deque(op_iter(tmp770))
				matcher = CommutativeMatcher5763.get()
				tmp772 = subjects771
				subjects771 = []
				for s in tmp772:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp772, subst1):
					if pattern_index == 0:
						# State 5769
						if len(subjects) == 0:
							# 163: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f167) and (cons_f169)
							yield 163, subst2
							# 4: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
							yield 4, subst2
							# 101: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f136)
							yield 101, subst2
							# 262: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f69)
							yield 262, subst2
							# 227: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
							yield 227, subst2
							# 104: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f138)
							yield 104, subst2
							# 265: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
							yield 265, subst2
							# 383: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6948)
							yield 383, subst2
							# 107: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
							yield 107, subst2
							# 127: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
							yield 127, subst2
							# 84: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f68) and (cons_f123)
							yield 84, subst2
							# 279: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
							yield 279, subst2
							# 89: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
							yield 89, subst2
							# 378: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6946)
							yield 378, subst2
							# 27: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
							yield 27, subst2
							# 380: (a + x*b)**m /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f2009) and (With6947)
							yield 380, subst2
							# 351: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
							yield 351, subst2
					if pattern_index == 1:
						# State 5798
						if len(subjects) == 0:
							# 98: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
							yield 98, subst2
							# 12: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
							yield 12, subst2
							# 29: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f84) and (cons_f86)
							yield 29, subst2
							# 86: (a + x*b)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f17)
							yield 86, subst2
					if pattern_index == 2:
						# State 5804
						if len(subjects) == 0:
							# 13: (c + x*d)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
							yield 13, subst2
					if pattern_index == 3:
						# State 6129
						if len(subjects) == 0:
							# 131: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
							yield 131, subst2
							# 125: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148)
							yield 125, subst2
							# 133: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
							yield 133, subst2
							# 111: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
							yield 111, subst2
					if pattern_index == 4:
						# State 6206
						if len(subjects) == 0:
							# 118: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
							yield 118, subst2
							# 119: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
							yield 119, subst2
					if pattern_index == 5:
						# State 7190
						if len(subjects) == 0:
							# 360: (a + F*b*c*sqrt(d + x*e)/sqrt(f + x*g))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
							yield 360, subst2
					if pattern_index == 6:
						# State 7344
						if len(subjects) == 0:
							# 363: (a + F*b*c*sqrt(x*e + 1)/sqrt(x*g + 1))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
							yield 363, subst2
					if pattern_index == 7:
						# State 7559
						if len(subjects) == 0:
							# 364: (a + b*F**(c*sqrt(d + x*e)/sqrt(f + x*g)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
							yield 364, subst2
					if pattern_index == 8:
						# State 7787
						if len(subjects) == 0:
							# 366: (a + b*F**(c*sqrt(x*e + 1)/sqrt(x*g + 1)))**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
							yield 366, subst2
					if pattern_index == 9:
						# State 8236
						if len(subjects) == 0:
							# 376: (v + a*u**n)**p /; (cons_f2) and (cons_f4) and (cons_f38) and (cons_f2008) and (cons_f10)
							yield 376, subst2
					if pattern_index == 10:
						# State 8402
						if len(subjects) == 0:
							# 404: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
							yield 404, subst2
							# 389: (a + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
							yield 389, subst2
							# 406: (a + a*u**n)**p /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6959)
							yield 406, subst2
					if pattern_index == 11:
						# State 8470
						if len(subjects) == 0:
							# 392: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6953)
							yield 392, subst2
							# 398: (a + c*w**n2 + a*u**n)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6956)
							yield 398, subst2
					if pattern_index == 12:
						# State 8510
						if len(subjects) == 0:
							# 401: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
							yield 401, subst2
							# 394: (a + c*v**m)**p /; (cons_f2) and (cons_f7) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
							yield 394, subst2
							# 443: (a + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
							yield 443, subst2
					if pattern_index == 13:
						# State 8537
						if len(subjects) == 0:
							# 396: (a + b*y**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6955)
							yield 396, subst2
					if pattern_index == 14:
						# State 8653
						if len(subjects) == 0:
							# 412: (a + b*v**m*w**p)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f38) and (With6962)
							yield 412, subst2
					if pattern_index == 15:
						# State 8665
						if len(subjects) == 0:
							# 413: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2014) and (cons_f2016) and (With6963)
							yield 413, subst2
							# 415: (a + b*v**m*w**n2)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2017) and (cons_f2016) and (With6964)
							yield 415, subst2
					if pattern_index == 16:
						# State 8680
						if len(subjects) == 0:
							# 418: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2018) and (cons_f38) and (cons_f17) and (With6965)
							yield 418, subst2
							# 419: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2019) and (cons_f586) and (cons_f17) and (With6966)
							yield 419, subst2
							# 421: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2020) and (cons_f2022) and (cons_f17) and (With6967)
							yield 421, subst2
							# 423: (c*w**n2 + c*v**m)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2023) and (cons_f2022) and (cons_f17) and (With6968)
							yield 423, subst2
					if pattern_index == 17:
						# State 8891
						if len(subjects) == 0:
							# 435: (a + b*v**n + c*v**m)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f46) and (cons_f45) and (cons_f38) and (cons_f2032)
							yield 435, subst2
				subjects.appendleft(tmp770)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp773 = subjects.popleft()
				associative1 = tmp773
				associative_type1 = type(tmp773)
				subjects774 = deque(op_iter(tmp773))
				matcher = CommutativeMatcher6081.get()
				tmp775 = subjects774
				subjects774 = []
				for s in tmp775:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp775, subst1):
					if pattern_index == 0:
						# State 6082
						if len(subjects) == 0:
							# 224: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f144)
							yield 224, subst2
							# 113: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f12) and (cons_f144)
							yield 113, subst2
							# 219: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
							yield 219, subst2
							# 92: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f130)
							yield 92, subst2
							# 95: (x*b)**n /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f131) and (cons_f133)
							yield 95, subst2
				subjects.appendleft(tmp773)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2_1', 1)
		except ValueError:
			pass
		else:
			# State 5841
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_1', 0)
			except ValueError:
				pass
			else:
				# State 5842
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 5843
					if len(subjects) >= 1:
						tmp779 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp779)
						except ValueError:
							pass
						else:
							# State 5844
							if len(subjects) == 0:
								# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
								yield 128, subst4
								# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
								yield 263, subst4
								# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
								yield 266, subst4
								# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
								yield 270, subst4
								# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
								yield 145, subst4
								# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
								yield 148, subst4
								# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
								yield 276, subst4
								# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
								yield 278, subst4
								# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
								yield 151, subst4
								# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
								yield 280, subst4
								# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
								yield 154, subst4
								# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
								yield 28, subst4
								# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
								yield 157, subst4
								# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
								yield 30, subst4
								# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
								yield 159, subst4
								# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
								yield 161, subst4
								# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
								yield 164, subst4
								# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
								yield 167, subst4
								# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
								yield 170, subst4
								# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
								yield 173, subst4
								# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
								yield 85, subst4
								# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
								yield 90, subst4
								# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 352, subst4
								# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
								yield 99, subst4
								# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
								yield 228, subst4
								# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
								yield 102, subst4
								# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
								yield 231, subst4
								# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
								yield 105, subst4
								# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
								yield 234, subst4
								# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
								yield 108, subst4
								# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
								yield 109, subst4
						subjects.appendleft(tmp779)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 8252
					if len(subjects) >= 1:
						tmp782 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0_2', tmp782)
						except ValueError:
							pass
						else:
							# State 8253
							if len(subjects) == 0:
								# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
								yield 384, subst4
								# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
								yield 379, subst4
								# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
								yield 381, subst4
						subjects.appendleft(tmp782)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 8549
					if len(subjects) >= 1 and isinstance(subjects[0], Pow):
						tmp785 = subjects.popleft()
						subjects786 = deque(op_iter(tmp785))
						# State 8550
						if len(subjects786) >= 1:
							tmp787 = subjects786.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1_1', tmp787)
							except ValueError:
								pass
							else:
								# State 8551
								if len(subjects786) >= 1:
									tmp789 = subjects786.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2', tmp789)
									except ValueError:
										pass
									else:
										# State 8552
										if len(subjects786) == 0:
											# State 8553
											if len(subjects) == 0:
												# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
												yield 405, subst5
												# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
												yield 407, subst5
									subjects786.appendleft(tmp789)
							subjects786.appendleft(tmp787)
						if len(subjects786) >= 1:
							tmp791 = subjects786.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1', tmp791)
							except ValueError:
								pass
							else:
								# State 9052
								subst5 = Substitution(subst4)
								try:
									subst5.try_add_variable('i2.2.1.2_1', 1)
								except ValueError:
									pass
								else:
									# State 9053
									if len(subjects786) == 0:
										# State 9054
										if len(subjects) == 0:
											# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
											yield 444, subst5
								if len(subjects786) >= 1:
									tmp794 = subjects786.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2_1', tmp794)
									except ValueError:
										pass
									else:
										# State 9053
										if len(subjects786) == 0:
											# State 9054
											if len(subjects) == 0:
												# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
												yield 444, subst5
									subjects786.appendleft(tmp794)
							subjects786.appendleft(tmp791)
						subjects.appendleft(tmp785)
					subst4 = Substitution(subst3)
					try:
						subst4.try_add_variable('i2.2.1.2_1', 1)
					except ValueError:
						pass
					else:
						# State 9050
						if len(subjects) >= 1:
							tmp797 = subjects.popleft()
							subst5 = Substitution(subst4)
							try:
								subst5.try_add_variable('i2.2.1.1', tmp797)
							except ValueError:
								pass
							else:
								# State 9051
								if len(subjects) == 0:
									# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
									yield 444, subst5
							subjects.appendleft(tmp797)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp799 = subjects.popleft()
					associative1 = tmp799
					associative_type1 = type(tmp799)
					subjects800 = deque(op_iter(tmp799))
					matcher = CommutativeMatcher5846.get()
					tmp801 = subjects800
					subjects800 = []
					for s in tmp801:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp801, subst2):
						if pattern_index == 0:
							# State 5847
							if len(subjects) == 0:
								# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
								yield 128, subst3
								# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
								yield 263, subst3
								# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
								yield 266, subst3
								# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
								yield 270, subst3
								# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
								yield 145, subst3
								# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
								yield 148, subst3
								# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
								yield 276, subst3
								# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
								yield 278, subst3
								# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
								yield 151, subst3
								# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
								yield 280, subst3
								# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
								yield 154, subst3
								# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
								yield 28, subst3
								# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
								yield 157, subst3
								# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
								yield 30, subst3
								# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
								yield 159, subst3
								# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
								yield 161, subst3
								# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
								yield 164, subst3
								# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
								yield 167, subst3
								# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
								yield 170, subst3
								# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
								yield 173, subst3
								# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
								yield 85, subst3
								# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
								yield 90, subst3
								# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 352, subst3
								# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
								yield 99, subst3
								# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
								yield 228, subst3
								# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
								yield 102, subst3
								# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
								yield 231, subst3
								# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
								yield 105, subst3
								# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
								yield 234, subst3
								# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
								yield 108, subst3
								# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
								yield 109, subst3
						if pattern_index == 1:
							# State 8254
							if len(subjects) == 0:
								# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
								yield 384, subst3
								# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
								yield 379, subst3
								# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
								yield 381, subst3
						if pattern_index == 2:
							# State 8558
							if len(subjects) == 0:
								# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
								yield 405, subst3
								# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
								yield 407, subst3
						if pattern_index == 3:
							# State 9060
							if len(subjects) == 0:
								# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
								yield 444, subst3
					subjects.appendleft(tmp799)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_2', 0)
			except ValueError:
				pass
			else:
				# State 6136
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 6137
					if len(subjects) >= 1:
						tmp804 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp804)
						except ValueError:
							pass
						else:
							# State 6138
							if len(subjects) == 0:
								# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
								yield 112, subst4
								# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
								yield 132, subst4
								# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
								yield 134, subst4
						subjects.appendleft(tmp804)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0', 1)
				except ValueError:
					pass
				else:
					# State 6155
					if len(subjects) >= 1:
						tmp807 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.0', tmp807)
						except ValueError:
							pass
						else:
							# State 6156
							if len(subjects) == 0:
								# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
								yield 225, subst4
								# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
								yield 114, subst4
								# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
								yield 220, subst4
								# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
								yield 222, subst4
						subjects.appendleft(tmp807)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp809 = subjects.popleft()
					associative1 = tmp809
					associative_type1 = type(tmp809)
					subjects810 = deque(op_iter(tmp809))
					matcher = CommutativeMatcher6140.get()
					tmp811 = subjects810
					subjects810 = []
					for s in tmp811:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp811, subst2):
						if pattern_index == 0:
							# State 6141
							if len(subjects) == 0:
								# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
								yield 112, subst3
								# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
								yield 132, subst3
								# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
								yield 134, subst3
						if pattern_index == 1:
							# State 6157
							if len(subjects) == 0:
								# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
								yield 225, subst3
								# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
								yield 114, subst3
								# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
								yield 220, subst3
								# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
								yield 222, subst3
					subjects.appendleft(tmp809)
			if len(subjects) >= 1:
				tmp812 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.1_1', tmp812)
				except ValueError:
					pass
				else:
					# State 7870
					if len(subjects) == 0:
						# 411: z**n /; (cons_f21) and (cons_f2013) and (With6961)
						yield 411, subst2
						# 373: z**n /; (cons_f4) and (With6941)
						yield 373, subst2
				subjects.appendleft(tmp812)
			if len(subjects) >= 1:
				tmp814 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1', tmp814)
				except ValueError:
					pass
				else:
					# State 8245
					if len(subjects) == 0:
						# 416: u**m /; (cons_f52) and (cons_f2017) and (cons_f2015) and (cons_f2016) and (With6964)
						yield 416, subst2
						# 420: u**m /; (cons_f52) and (cons_f2019) and (With6966)
						yield 420, subst2
						# 424: u**m /; (cons_f52) and (cons_f2023) and (With6968)
						yield 424, subst2
						# 377: u**m /; (cons_f21)
						yield 377, subst2
						# 414: u**m /; (cons_f52) and (cons_f2014) and (cons_f2015) and (cons_f2016) and (With6963)
						yield 414, subst2
				subjects.appendleft(tmp814)
			if len(subjects) >= 1:
				tmp816 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.1', tmp816)
				except ValueError:
					pass
				else:
					# State 8409
					if len(subjects) == 0:
						# 402: v**m /; (cons_f21) and (With6957)
						yield 402, subst2
						# 397: v**m /; (cons_f21) and (With6955)
						yield 397, subst2
						# 390: v**m /; (cons_f21) and (cons_f2012) and (With6951)
						yield 390, subst2
						# 399: v**m /; (cons_f21) and (With6956)
						yield 399, subst2
				subjects.appendleft(tmp816)
			if len(subjects) >= 1:
				tmp818 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp818)
				except ValueError:
					pass
				else:
					# State 8690
					if len(subjects) == 0:
						# 422: w**s /; (cons_f800) and (cons_f2020) and (cons_f2021) and (cons_f2022) and (With6967)
						yield 422, subst2
				subjects.appendleft(tmp818)
			if len(subjects) >= 1 and isinstance(subjects[0], Add):
				tmp820 = subjects.popleft()
				associative1 = tmp820
				associative_type1 = type(tmp820)
				subjects821 = deque(op_iter(tmp820))
				matcher = CommutativeMatcher5849.get()
				tmp822 = subjects821
				subjects821 = []
				for s in tmp822:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp822, subst1):
					if pattern_index == 0:
						# State 5855
						if len(subjects) == 0:
							# 128: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
							yield 128, subst2
							# 263: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f69)
							yield 263, subst2
							# 266: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
							yield 266, subst2
							# 270: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f210)
							yield 270, subst2
							# 145: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88)
							yield 145, subst2
							# 148: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
							yield 148, subst2
							# 276: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
							yield 276, subst2
							# 278: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f213)
							yield 278, subst2
							# 151: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
							yield 151, subst2
							# 280: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
							yield 280, subst2
							# 154: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f164)
							yield 154, subst2
							# 28: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f83)
							yield 28, subst2
							# 157: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f165) and (cons_f164)
							yield 157, subst2
							# 30: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f85) and (cons_f86)
							yield 30, subst2
							# 159: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f88) and (cons_f164)
							yield 159, subst2
							# 161: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
							yield 161, subst2
							# 164: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f88) and (cons_f167) and (cons_f169)
							yield 164, subst2
							# 167: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
							yield 167, subst2
							# 170: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
							yield 170, subst2
							# 173: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
							yield 173, subst2
							# 85: (c + x*d)**n /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f68) and (cons_f123)
							yield 85, subst2
							# 90: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
							yield 90, subst2
							# 352: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
							yield 352, subst2
							# 99: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f134)
							yield 99, subst2
							# 228: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
							yield 228, subst2
							# 102: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
							yield 102, subst2
							# 231: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
							yield 231, subst2
							# 105: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
							yield 105, subst2
							# 234: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
							yield 234, subst2
							# 108: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
							yield 108, subst2
							# 109: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
							yield 109, subst2
					if pattern_index == 1:
						# State 6024
						if len(subjects) == 0:
							# 87: (c + x*d)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
							yield 87, subst2
					if pattern_index == 2:
						# State 6090
						if len(subjects) == 0:
							# 96: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f131) and (cons_f132) and (cons_f133)
							yield 96, subst2
							# 93: (x*d + c)**p /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f129) and (cons_f130)
							yield 93, subst2
					if pattern_index == 3:
						# State 6145
						if len(subjects) == 0:
							# 112: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
							yield 112, subst2
							# 132: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
							yield 132, subst2
							# 134: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
							yield 134, subst2
					if pattern_index == 4:
						# State 6158
						if len(subjects) == 0:
							# 225: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
							yield 225, subst2
							# 114: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f143) and (cons_f144)
							yield 114, subst2
							# 220: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43)
							yield 220, subst2
							# 222: (x*d + a)**m /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
							yield 222, subst2
					if pattern_index == 5:
						# State 8257
						if len(subjects) == 0:
							# 384: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6948)
							yield 384, subst2
							# 379: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (With6946)
							yield 379, subst2
							# 381: (a + y*b)**m /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f2010) and (With6947)
							yield 381, subst2
					if pattern_index == 6:
						# State 8569
						if len(subjects) == 0:
							# 405: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6958)
							yield 405, subst2
							# 407: (a + b*y**n)**m /; (cons_f48) and (cons_f125) and (cons_f4) and (cons_f50) and (cons_f2010) and (With6959)
							yield 407, subst2
					if pattern_index == 7:
						# State 9072
						if len(subjects) == 0:
							# 444: (c + b*v**n)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
							yield 444, subst2
				subjects.appendleft(tmp820)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2_2', 1)
		except ValueError:
			pass
		else:
			# State 6027
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_2', 0)
			except ValueError:
				pass
			else:
				# State 6028
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_3', 1)
				except ValueError:
					pass
				else:
					# State 6029
					if len(subjects) >= 1:
						tmp826 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp826)
						except ValueError:
							pass
						else:
							# State 6030
							if len(subjects) == 0:
								# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
								yield 129, subst4
								# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
								yield 162, subst4
								# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
								yield 355, subst4
								# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 353, subst4
								# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
								yield 165, subst4
								# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
								yield 229, subst4
								# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
								yield 168, subst4
								# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
								yield 232, subst4
								# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
								yield 171, subst4
								# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
								yield 174, subst4
								# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
								yield 146, subst4
								# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
								yield 149, subst4
								# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
								yield 88, subst4
								# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
								yield 155, subst4
								# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
								yield 152, subst4
								# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
								yield 158, subst4
						subjects.appendleft(tmp826)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_5', 1)
				except ValueError:
					pass
				else:
					# State 8273
					if len(subjects) >= 1:
						tmp829 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0_4', tmp829)
						except ValueError:
							pass
						else:
							# State 8274
							if len(subjects) == 0:
								# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
								yield 385, subst4
								# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
								yield 382, subst4
						subjects.appendleft(tmp829)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_2', 1)
				except ValueError:
					pass
				else:
					# State 8592
					if len(subjects) >= 1 and isinstance(subjects[0], Pow):
						tmp832 = subjects.popleft()
						subjects833 = deque(op_iter(tmp832))
						# State 8593
						if len(subjects833) >= 1:
							tmp834 = subjects833.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1.1_2', tmp834)
							except ValueError:
								pass
							else:
								# State 8594
								if len(subjects833) >= 1:
									tmp836 = subjects833.popleft()
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.1.2', tmp836)
									except ValueError:
										pass
									else:
										# State 8595
										if len(subjects833) == 0:
											# State 8596
											if len(subjects) == 0:
												# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
												yield 408, subst5
									subjects833.appendleft(tmp836)
							subjects833.appendleft(tmp834)
						subjects.appendleft(tmp832)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp838 = subjects.popleft()
					associative1 = tmp838
					associative_type1 = type(tmp838)
					subjects839 = deque(op_iter(tmp838))
					matcher = CommutativeMatcher6032.get()
					tmp840 = subjects839
					subjects839 = []
					for s in tmp840:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp840, subst2):
						if pattern_index == 0:
							# State 6033
							if len(subjects) == 0:
								# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
								yield 129, subst3
								# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
								yield 162, subst3
								# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
								yield 355, subst3
								# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 353, subst3
								# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
								yield 165, subst3
								# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
								yield 229, subst3
								# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
								yield 168, subst3
								# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
								yield 232, subst3
								# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
								yield 171, subst3
								# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
								yield 174, subst3
								# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
								yield 146, subst3
								# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
								yield 149, subst3
								# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
								yield 88, subst3
								# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
								yield 155, subst3
								# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
								yield 152, subst3
								# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
								yield 158, subst3
						if pattern_index == 1:
							# State 8275
							if len(subjects) == 0:
								# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
								yield 385, subst3
								# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
								yield 382, subst3
						if pattern_index == 2:
							# State 8601
							if len(subjects) == 0:
								# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
								yield 408, subst3
					subjects.appendleft(tmp838)
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_3', 0)
			except ValueError:
				pass
			else:
				# State 6169
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 6170
					if len(subjects) >= 1:
						tmp843 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.0', tmp843)
						except ValueError:
							pass
						else:
							# State 6171
							if len(subjects) == 0:
								# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
								yield 226, subst4
								# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
								yield 115, subst4
								# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
								yield 221, subst4
								# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
								yield 223, subst4
						subjects.appendleft(tmp843)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp845 = subjects.popleft()
					associative1 = tmp845
					associative_type1 = type(tmp845)
					subjects846 = deque(op_iter(tmp845))
					matcher = CommutativeMatcher6173.get()
					tmp847 = subjects846
					subjects846 = []
					for s in tmp847:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp847, subst2):
						if pattern_index == 0:
							# State 6174
							if len(subjects) == 0:
								# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
								yield 226, subst3
								# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
								yield 115, subst3
								# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
								yield 221, subst3
								# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
								yield 223, subst3
					subjects.appendleft(tmp845)
			if len(subjects) >= 1:
				tmp848 = subjects.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.1.1_1', tmp848)
				except ValueError:
					pass
				else:
					# State 8673
					if len(subjects) == 0:
						# 417: w**s /; (cons_f800) and (cons_f2017) and (With6964)
						yield 417, subst2
						# 425: w**s /; (cons_f800) and (cons_f2023) and (cons_f2021) and (cons_f2022) and (With6968)
						yield 425, subst2
				subjects.appendleft(tmp848)
			if len(subjects) >= 1 and isinstance(subjects[0], Add):
				tmp850 = subjects.popleft()
				associative1 = tmp850
				associative_type1 = type(tmp850)
				subjects851 = deque(op_iter(tmp850))
				matcher = CommutativeMatcher6035.get()
				tmp852 = subjects851
				subjects851 = []
				for s in tmp852:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp852, subst1):
					if pattern_index == 0:
						# State 6041
						if len(subjects) == 0:
							# 129: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f151)
							yield 129, subst2
							# 162: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167)
							yield 162, subst2
							# 355: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
							yield 355, subst2
							# 353: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
							yield 353, subst2
							# 165: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f167) and (cons_f169)
							yield 165, subst2
							# 229: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
							yield 229, subst2
							# 168: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f167) and (cons_f170)
							yield 168, subst2
							# 232: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f195)
							yield 232, subst2
							# 171: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f171)
							yield 171, subst2
							# 174: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f170)
							yield 174, subst2
							# 146: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f158)
							yield 146, subst2
							# 149: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160)
							yield 149, subst2
							# 88: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5)
							yield 88, subst2
							# 155: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f163) and (cons_f164)
							yield 155, subst2
							# 152: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159)
							yield 152, subst2
							# 158: (e + x*f)**p /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f164)
							yield 158, subst2
					if pattern_index == 1:
						# State 6178
						if len(subjects) == 0:
							# 226: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
							yield 226, subst2
							# 115: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f144)
							yield 115, subst2
							# 221: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f177)
							yield 221, subst2
							# 223: (x*d + c)**n /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
							yield 223, subst2
					if pattern_index == 2:
						# State 6445
						if len(subjects) == 0:
							# 264: (e + x*f)**p /; (cons_f48) and (cons_f125) and (cons_f5) and (cons_f68) and (cons_f69)
							yield 264, subst2
					if pattern_index == 3:
						# State 8279
						if len(subjects) == 0:
							# 385: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
							yield 385, subst2
							# 382: (a + y*b)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f2009) and (cons_f2010) and (With6947)
							yield 382, subst2
					if pattern_index == 4:
						# State 8612
						if len(subjects) == 0:
							# 408: (a + b*y**n)**m /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f2009) and (cons_f2010) and (With6959)
							yield 408, subst2
				subjects.appendleft(tmp850)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.1.0', 0)
		except ValueError:
			pass
		else:
			# State 6061
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.1.1.0', 1)
			except ValueError:
				pass
			else:
				# State 6062
				if len(subjects) >= 1:
					tmp855 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.0', tmp855)
					except ValueError:
						pass
					else:
						# State 6063
						if len(subjects) == 0:
							# 288: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
							yield 288, subst3
							# 323: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5)
							yield 323, subst3
							# 100: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
							yield 100, subst3
							# 295: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
							yield 295, subst3
							# 103: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
							yield 103, subst3
							# 106: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4)
							yield 106, subst3
							# 91: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f127)
							yield 91, subst3
							# 311: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
							yield 311, subst3
							# 315: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
							yield 315, subst3
							# 284: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21)
							yield 284, subst3
							# 319: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
							yield 319, subst3
					subjects.appendleft(tmp855)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp857 = subjects.popleft()
				associative1 = tmp857
				associative_type1 = type(tmp857)
				subjects858 = deque(op_iter(tmp857))
				matcher = CommutativeMatcher6065.get()
				tmp859 = subjects858
				subjects858 = []
				for s in tmp859:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp859, subst1):
					if pattern_index == 0:
						# State 6066
						if len(subjects) == 0:
							# 288: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
							yield 288, subst2
							# 323: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5)
							yield 323, subst2
							# 100: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
							yield 100, subst2
							# 295: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
							yield 295, subst2
							# 103: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
							yield 103, subst2
							# 106: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4)
							yield 106, subst2
							# 91: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f127)
							yield 91, subst2
							# 311: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
							yield 311, subst2
							# 315: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
							yield 315, subst2
							# 284: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21)
							yield 284, subst2
							# 319: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
							yield 319, subst2
				subjects.appendleft(tmp857)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.1.0_1', 0)
		except ValueError:
			pass
		else:
			# State 6452
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.1.1.0_1', 1)
			except ValueError:
				pass
			else:
				# State 6453
				if len(subjects) >= 1:
					tmp862 = subjects.popleft()
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.0', tmp862)
					except ValueError:
						pass
					else:
						# State 6454
						if len(subjects) == 0:
							# 272: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
							yield 272, subst3
							# 268: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
							yield 268, subst3
					subjects.appendleft(tmp862)
			if len(subjects) >= 1 and isinstance(subjects[0], Mul):
				tmp864 = subjects.popleft()
				associative1 = tmp864
				associative_type1 = type(tmp864)
				subjects865 = deque(op_iter(tmp864))
				matcher = CommutativeMatcher6456.get()
				tmp866 = subjects865
				subjects865 = []
				for s in tmp866:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp866, subst1):
					if pattern_index == 0:
						# State 6457
						if len(subjects) == 0:
							# 272: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
							yield 272, subst2
							# 268: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
							yield 268, subst2
				subjects.appendleft(tmp864)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.2_3', 1)
		except ValueError:
			pass
		else:
			# State 6613
			subst2 = Substitution(subst1)
			try:
				subst2.try_add_variable('i2.2.0_3', 0)
			except ValueError:
				pass
			else:
				# State 6614
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_4', 1)
				except ValueError:
					pass
				else:
					# State 6615
					if len(subjects) >= 1:
						tmp870 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0', tmp870)
						except ValueError:
							pass
						else:
							# State 6616
							if len(subjects) == 0:
								# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 354, subst4
								# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
								yield 356, subst4
						subjects.appendleft(tmp870)
				subst3 = Substitution(subst2)
				try:
					subst3.try_add_variable('i2.2.1.0_7', 1)
				except ValueError:
					pass
				else:
					# State 8296
					if len(subjects) >= 1:
						tmp873 = subjects.popleft()
						subst4 = Substitution(subst3)
						try:
							subst4.try_add_variable('i2.2.1.0_6', tmp873)
						except ValueError:
							pass
						else:
							# State 8297
							if len(subjects) == 0:
								# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
								yield 386, subst4
						subjects.appendleft(tmp873)
				if len(subjects) >= 1 and isinstance(subjects[0], Mul):
					tmp875 = subjects.popleft()
					associative1 = tmp875
					associative_type1 = type(tmp875)
					subjects876 = deque(op_iter(tmp875))
					matcher = CommutativeMatcher6618.get()
					tmp877 = subjects876
					subjects876 = []
					for s in tmp877:
						matcher.add_subject(s)
					for pattern_index, subst3 in matcher.match(tmp877, subst2):
						if pattern_index == 0:
							# State 6619
							if len(subjects) == 0:
								# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
								yield 354, subst3
								# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
								yield 356, subst3
						if pattern_index == 1:
							# State 8298
							if len(subjects) == 0:
								# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
								yield 386, subst3
					subjects.appendleft(tmp875)
			if len(subjects) >= 1 and isinstance(subjects[0], Add):
				tmp878 = subjects.popleft()
				associative1 = tmp878
				associative_type1 = type(tmp878)
				subjects879 = deque(op_iter(tmp878))
				matcher = CommutativeMatcher6621.get()
				tmp880 = subjects879
				subjects879 = []
				for s in tmp880:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp880, subst1):
					if pattern_index == 0:
						# State 6627
						if len(subjects) == 0:
							# 354: (g + x*h)**q /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
							yield 354, subst2
							# 356: (g + x*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f68) and (cons_f69)
							yield 356, subst2
					if pattern_index == 1:
						# State 8302
						if len(subjects) == 0:
							# 386: (g + z*h)**q /; (cons_f208) and (cons_f209) and (cons_f50) and (cons_f2011) and (With6948)
							yield 386, subst2
				subjects.appendleft(tmp878)
		if len(subjects) >= 1 and isinstance(subjects[0], Add):
			tmp881 = subjects.popleft()
			associative1 = tmp881
			associative_type1 = type(tmp881)
			subjects882 = deque(op_iter(tmp881))
			matcher = CommutativeMatcher6068.get()
			tmp883 = subjects882
			subjects882 = []
			for s in tmp883:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp883, subst0):
				if pattern_index == 0:
					# State 6074
					if len(subjects) == 0:
						# 288: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5)
						yield 288, subst1
						# 323: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5)
						yield 323, subst1
						# 100: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
						yield 100, subst1
						# 295: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5)
						yield 295, subst1
						# 103: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5)
						yield 103, subst1
						# 106: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4)
						yield 106, subst1
						# 91: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f127)
						yield 91, subst1
						# 311: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
						yield 311, subst1
						# 315: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
						yield 315, subst1
						# 284: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21)
						yield 284, subst1
						# 319: a + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
						yield 319, subst1
				if pattern_index == 1:
					# State 6095
					if len(subjects) == 0:
						# 97: a + b*x /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f132) and (cons_f133)
						yield 97, subst1
						# 94: a + b*x /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f129)
						yield 94, subst1
				if pattern_index == 2:
					# State 6451
					if len(subjects) == 0:
						# 267: e + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
						yield 267, subst1
						# 271: e + b*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
						yield 271, subst1
				if pattern_index == 3:
					# State 6461
					if len(subjects) == 0:
						# 272: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4)
						yield 272, subst1
						# 268: g + h*x /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209)
						yield 268, subst1
				if pattern_index == 4:
					# State 8345
					if len(subjects) == 0:
						# 387: a + b*y**n /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f1831) and (With6949)
						yield 387, subst1
						# 395: a + b*y**n /; (cons_f34) and (cons_f35) and (cons_f4) and (cons_f46) and (cons_f2010) and (With6954)
						yield 395, subst1
						# 403: a + b*y**n /; (cons_f34) and (cons_f35) and (cons_f4) and (cons_f46) and (cons_f2010) and (With6957)
						yield 403, subst1
				if pattern_index == 5:
					# State 8488
					if len(subjects) == 0:
						# 400: A + B*y**n /; (cons_f34) and (cons_f35) and (cons_f4) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6956)
						yield 400, subst1
						# 393: A + B*y**n /; (cons_f34) and (cons_f35) and (cons_f4) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6953)
						yield 393, subst1
			subjects.appendleft(tmp881)
		return
		yield

def match_root(subject):
	subjects = deque([subject]) if subject is not None else deque()
	subst0 = Substitution()
	# State 5648
	if len(subjects) >= 1 and isinstance(subjects[0], Integral):
		tmp1 = subjects.popleft()
		subjects2 = deque(op_iter(tmp1))
		# State 5649
		if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
			tmp3 = subjects2.popleft()
			subjects4 = deque(op_iter(tmp3))
			# State 5650
			if len(subjects4) >= 1:
				tmp5 = subjects4.popleft()
				subst1 = Substitution(subst0)
				try:
					subst1.try_add_variable('i2', tmp5)
				except ValueError:
					pass
				else:
					if 'i2' in subst1 and 'i3' in subst1 and CustomConstraint(cons_f21)(subst1):
						# State 5651
						if len(subjects4) >= 1 and subjects4[0] == -1:
							tmp7 = subjects4.popleft()
							# State 5652
							if len(subjects4) == 0:
								# State 5653
								if len(subjects2) >= 1:
									tmp8 = subjects2.popleft()
									subst2 = Substitution(subst1)
									try:
										subst2.try_add_variable('i2', tmp8)
									except ValueError:
										pass
									else:
										# State 5654
										if len(subjects2) == 0:
											# State 5655
											if len(subjects) == 0:
												pass
									subjects2.appendleft(tmp8)
							subjects4.appendleft(tmp7)
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i3', 1)
						except ValueError:
							pass
						else:
							if 'i2' in subst2 and 'i3' in subst2 and CustomConstraint(cons_f21)(subst2):
								if 'i3' in subst2 and CustomConstraint(cons_f66)(subst2):
									# State 5660
									if len(subjects4) == 0:
										# State 5661
										if len(subjects2) >= 1:
											tmp11 = subjects2.popleft()
											subst3 = Substitution(subst2)
											try:
												subst3.try_add_variable('i2', tmp11)
											except ValueError:
												pass
											else:
												if 'i2' in subst3 and 'i3' in subst3 and CustomConstraint(cons_f21)(subst3):
													# State 5662
													if len(subjects2) == 0:
														# State 5663
														if len(subjects) == 0:
															tmp_subst = Substitution()
															tmp_subst['x'] = subst3['i2']
															tmp_subst['m'] = subst3['i3']
															# 1: Integral(x**m, x) /; (cons_f21) and (cons_f66)
															yield 1, tmp_subst
											subjects2.appendleft(tmp11)
						if len(subjects4) >= 1:
							tmp13 = subjects4.popleft()
							subst2 = Substitution(subst1)
							try:
								subst2.try_add_variable('i3', tmp13)
							except ValueError:
								pass
							else:
								if 'i2' in subst2 and 'i3' in subst2 and CustomConstraint(cons_f21)(subst2):
									if 'i3' in subst2 and CustomConstraint(cons_f66)(subst2):
										# State 5660
										if len(subjects4) == 0:
											# State 5661
											if len(subjects2) >= 1:
												tmp15 = subjects2.popleft()
												subst3 = Substitution(subst2)
												try:
													subst3.try_add_variable('i2', tmp15)
												except ValueError:
													pass
												else:
													if 'i2' in subst3 and 'i3' in subst3 and CustomConstraint(cons_f21)(subst3):
														# State 5662
														if len(subjects2) == 0:
															# State 5663
															if len(subjects) == 0:
																tmp_subst = Substitution()
																tmp_subst['x'] = subst3['i2']
																tmp_subst['m'] = subst3['i3']
																# 1: Integral(x**m, x) /; (cons_f21) and (cons_f66)
																yield 1, tmp_subst
												subjects2.appendleft(tmp15)
							subjects4.appendleft(tmp13)
					# State 5651
					if len(subjects4) >= 1 and subjects4[0] == -1:
						tmp17 = subjects4.popleft()
						# State 5652
						if len(subjects4) == 0:
							# State 5653
							if len(subjects2) >= 1:
								tmp18 = subjects2.popleft()
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2', tmp18)
								except ValueError:
									pass
								else:
									# State 5654
									if len(subjects2) == 0:
										# State 5655
										if len(subjects) == 0:
											tmp_subst = Substitution()
											tmp_subst['x'] = subst2['i2']
											# 0: Integral(1/x, x)
											yield 0, tmp_subst
								subjects2.appendleft(tmp18)
						subjects4.appendleft(tmp17)
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i3', 1)
					except ValueError:
						pass
					else:
						pass
					if len(subjects4) >= 1:
						tmp21 = subjects4.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i3', tmp21)
						except ValueError:
							pass
						else:
							pass
						subjects4.appendleft(tmp21)
				subjects4.appendleft(tmp5)
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i3.0', 0)
			except ValueError:
				pass
			else:
				# State 5676
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i3.1.0_1', 1)
				except ValueError:
					pass
				else:
					# State 5677
					if len(subjects4) >= 1:
						tmp25 = subjects4.popleft()
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i3.1.0', tmp25)
						except ValueError:
							pass
						else:
							pass
						subjects4.appendleft(tmp25)
				if len(subjects4) >= 1 and isinstance(subjects4[0], Mul):
					tmp27 = subjects4.popleft()
					associative1 = tmp27
					associative_type1 = type(tmp27)
					subjects28 = deque(op_iter(tmp27))
					matcher = CommutativeMatcher5684.get()
					tmp29 = subjects28
					subjects28 = []
					for s in tmp29:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp29, subst1):
						if pattern_index == 0:
							pass
					subjects4.appendleft(tmp27)
			if len(subjects4) >= 1 and isinstance(subjects4[0], Add):
				tmp30 = subjects4.popleft()
				associative1 = tmp30
				associative_type1 = type(tmp30)
				subjects31 = deque(op_iter(tmp30))
				matcher = CommutativeMatcher5665.get()
				tmp32 = subjects31
				subjects31 = []
				for s in tmp32:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp32, subst0):
					if pattern_index == 0:
						pass
					if pattern_index == 1:
						pass
					if pattern_index == 2:
						pass
					if pattern_index == 3:
						pass
					if pattern_index == 4:
						pass
					if pattern_index == 5:
						pass
				subjects4.appendleft(tmp30)
			if len(subjects4) >= 1 and isinstance(subjects4[0], Mul):
				tmp33 = subjects4.popleft()
				associative1 = tmp33
				associative_type1 = type(tmp33)
				subjects34 = deque(op_iter(tmp33))
				matcher = CommutativeMatcher6641.get()
				tmp35 = subjects34
				subjects34 = []
				for s in tmp35:
					matcher.add_subject(s)
				for pattern_index, subst1 in matcher.match(tmp35, subst0):
					if pattern_index == 0:
						pass
				subjects4.appendleft(tmp33)
			subjects2.appendleft(tmp3)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i3', 1)
		except ValueError:
			pass
		else:
			# State 5656
			if len(subjects2) >= 1:
				tmp37 = subjects2.popleft()
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2', tmp37)
				except ValueError:
					pass
				else:
					if 'i2' in subst2 and 'i3' in subst2 and CustomConstraint(cons_f21)(subst2):
						# State 5657
						if len(subjects2) >= 1:
							tmp39 = subjects2.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2', tmp39)
							except ValueError:
								pass
							else:
								if 'i2' in subst3 and 'i3' in subst3 and CustomConstraint(cons_f21)(subst3):
									# State 5658
									if len(subjects2) == 0:
										# State 5659
										if len(subjects) == 0:
											tmp_subst = Substitution()
											tmp_subst['x'] = subst3['i2']
											tmp_subst['m'] = subst3['i3']
											# 1: Integral(x**m, x) /; (cons_f21) and (cons_f66)
											yield 1, tmp_subst
							subjects2.appendleft(tmp39)
				subjects2.appendleft(tmp37)
		subst1 = Substitution(subst0)
		try:
			subst1.try_add_variable('i2.0', 1)
		except ValueError:
			pass
		else:
			# State 6771
			if len(subjects2) >= 1 and isinstance(subjects2[0], Pow):
				tmp42 = subjects2.popleft()
				subjects43 = deque(op_iter(tmp42))
				# State 6772
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', 1)
				except ValueError:
					pass
				else:
					# State 6773
					if len(subjects43) >= 1 and isinstance(subjects43[0], Pow):
						tmp45 = subjects43.popleft()
						subjects46 = deque(op_iter(tmp45))
						# State 6774
						if len(subjects46) >= 1 and isinstance(subjects46[0], Mul):
							tmp47 = subjects46.popleft()
							associative1 = tmp47
							associative_type1 = type(tmp47)
							subjects48 = deque(op_iter(tmp47))
							matcher = CommutativeMatcher6776.get()
							tmp49 = subjects48
							subjects48 = []
							for s in tmp49:
								matcher.add_subject(s)
							for pattern_index, subst3 in matcher.match(tmp49, subst2):
								if pattern_index == 0:
									if 'i2.2.2.1.0' in subst3 and 'i2.2.2.1.1.0' in subst3 and CustomConstraint(cons_f2)(subst3):
										if 'i2.2.2.1.1.0_1' in subst3 and 'i2.2.2.1.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
											if 'i2.2.2.1.1.0' in subst3 and 'i2.2.0' in subst3 and CustomConstraint(cons_f7)(subst3):
												if 'i2.2.2.0' in subst3 and 'i2.2.2.1.1.0' in subst3 and CustomConstraint(cons_f27)(subst3):
													if 'i2.2.2.1.1.0' in subst3 and 'i2.2.2' in subst3 and CustomConstraint(cons_f5)(subst3):
														if 'i2.2' in subst3 and 'i2.2.2.1.1.0' in subst3 and CustomConstraint(cons_f50)(subst3):
															# State 6791
															if len(subjects46) >= 1:
																tmp50 = []
																tmp50.append(subjects46.popleft())
																while True:
																	if len(tmp50) > 1:
																		tmp51 = create_operation_expression(associative1, tmp50)
																	elif len(tmp50) == 1:
																		tmp51 = tmp50[0]
																	else:
																		assert False, "Unreachable"
																	subst4 = Substitution(subst3)
																	try:
																		subst4.try_add_variable('i2.2.2', tmp51)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.2.1.1.0' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f5)(subst4):
																			if 'i2.2.2' in subst4 and CustomConstraint(cons_f147)(subst4):
																				# State 6792
																				if len(subjects46) == 0:
																					# State 6793
																					if len(subjects43) >= 1:
																						tmp53 = subjects43.popleft()
																						subst5 = Substitution(subst4)
																						try:
																							subst5.try_add_variable('i2.2', tmp53)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2' in subst5 and 'i2.2.2.1.1.0' in subst5 and CustomConstraint(cons_f50)(subst5):
																								if 'i2.2' in subst5 and CustomConstraint(cons_f386)(subst5):
																									# State 6794
																									if len(subjects43) == 0:
																										# State 6795
																										if len(subjects2) >= 1:
																											tmp55 = subjects2.popleft()
																											subst6 = Substitution(subst5)
																											try:
																												subst6.try_add_variable('i2.2.2.1.1.0', tmp55)
																											except ValueError:
																												pass
																											else:
																												if 'i2.2.2.1.0' in subst6 and 'i2.2.2.1.1.0' in subst6 and CustomConstraint(cons_f2)(subst6):
																													if 'i2.2.2.1.1.0_1' in subst6 and 'i2.2.2.1.1.0' in subst6 and CustomConstraint(cons_f3)(subst6):
																														if 'i2.2.2.1.1.0' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f7)(subst6):
																															if 'i2.2.2.0' in subst6 and 'i2.2.2.1.1.0' in subst6 and CustomConstraint(cons_f27)(subst6):
																																if 'i2.2.2.1.1.0' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f5)(subst6):
																																	if 'i2.2' in subst6 and 'i2.2.2.1.1.0' in subst6 and CustomConstraint(cons_f50)(subst6):
																																		# State 6796
																																		if len(subjects2) == 0:
																																			# State 6797
																																			if len(subjects) == 0:
																																				tmp_subst = Substitution()
																																				tmp_subst['x'] = subst6['i2.2.2.1.1.0']
																																				tmp_subst['b'] = subst6['i2.2.2.1.1.0_1']
																																				tmp_subst['a'] = subst6['i2.2.2.1.0']
																																				tmp_subst['d'] = subst6['i2.2.2.0']
																																				tmp_subst['p'] = subst6['i2.2.2']
																																				tmp_subst['c'] = subst6['i2.2.0']
																																				tmp_subst['q'] = subst6['i2.2']
																																				tmp_subst['u'] = subst6['i2.0']
																																				# 153: Integral(u*(c*(d*(a + b*x))**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																				yield 153, tmp_subst
																											subjects2.appendleft(tmp55)
																						subjects43.appendleft(tmp53)
																	if len(subjects46) == 0:
																		break
																	tmp50.append(subjects46.popleft())
																subjects46.extendleft(reversed(tmp50))
								if pattern_index == 1:
									if 'i2.2.2.2.0' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f2)(subst3):
										if 'i2.2.2.2.1.0_1' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
											if 'i2.2.2.2.1.0' in subst3 and 'i2.2.0' in subst3 and CustomConstraint(cons_f7)(subst3):
												if 'i2.2.2.0' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f27)(subst3):
													if 'i2.2.2.2' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f4)(subst3):
														if 'i2.2.2.2.1.0' in subst3 and 'i2.2.2' in subst3 and CustomConstraint(cons_f5)(subst3):
															if 'i2.2' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f50)(subst3):
																# State 6932
																if len(subjects46) >= 1:
																	tmp57 = []
																	tmp57.append(subjects46.popleft())
																	while True:
																		if len(tmp57) > 1:
																			tmp58 = create_operation_expression(associative1, tmp57)
																		elif len(tmp57) == 1:
																			tmp58 = tmp57[0]
																		else:
																			assert False, "Unreachable"
																		subst4 = Substitution(subst3)
																		try:
																			subst4.try_add_variable('i2.2.2', tmp58)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.2' in subst4 and CustomConstraint(cons_f147)(subst4):
																				if 'i2.2.2.2.1.0' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f5)(subst4):
																					# State 6933
																					if len(subjects46) == 0:
																						# State 6934
																						if len(subjects43) >= 1:
																							tmp60 = subjects43.popleft()
																							subst5 = Substitution(subst4)
																							try:
																								subst5.try_add_variable('i2.2', tmp60)
																							except ValueError:
																								pass
																							else:
																								if 'i2.2' in subst5 and CustomConstraint(cons_f386)(subst5):
																									if 'i2.2' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f50)(subst5):
																										# State 6935
																										if len(subjects43) == 0:
																											# State 6936
																											if len(subjects2) >= 1:
																												tmp62 = subjects2.popleft()
																												subst6 = Substitution(subst5)
																												try:
																													subst6.try_add_variable('i2.2.2.2.1.0', tmp62)
																												except ValueError:
																													pass
																												else:
																													if 'i2.2.2.2.0' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f2)(subst6):
																														if 'i2.2.2.2.1.0_1' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f3)(subst6):
																															if 'i2.2.2.2.1.0' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f7)(subst6):
																																if 'i2.2.2.0' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f27)(subst6):
																																	if 'i2.2.2.2' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f4)(subst6):
																																		if 'i2.2.2.2.1.0' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f5)(subst6):
																																			if 'i2.2' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f50)(subst6):
																																				# State 6937
																																				if len(subjects2) == 0:
																																					# State 6938
																																					if len(subjects) == 0:
																																						tmp_subst = Substitution()
																																						tmp_subst['x'] = subst6['i2.2.2.2.1.0']
																																						tmp_subst['b'] = subst6['i2.2.2.2.1.0_1']
																																						tmp_subst['a'] = subst6['i2.2.2.2.0']
																																						tmp_subst['n'] = subst6['i2.2.2.2']
																																						tmp_subst['d'] = subst6['i2.2.2.0']
																																						tmp_subst['p'] = subst6['i2.2.2']
																																						tmp_subst['c'] = subst6['i2.2.0']
																																						tmp_subst['q'] = subst6['i2.2']
																																						tmp_subst['u'] = subst6['i2.0']
																																						# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																						yield 154, tmp_subst
																												subjects2.appendleft(tmp62)
																							subjects43.appendleft(tmp60)
																		if len(subjects46) == 0:
																			break
																		tmp57.append(subjects46.popleft())
																	subjects46.extendleft(reversed(tmp57))
							subjects46.appendleft(tmp47)
						subst3 = Substitution(subst2)
						try:
							subst3.try_add_variable('i2.2.2.0', 1)
						except ValueError:
							pass
						else:
							# State 6871
							if len(subjects46) >= 1 and isinstance(subjects46[0], Pow):
								tmp65 = subjects46.popleft()
								subjects66 = deque(op_iter(tmp65))
								# State 6872
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.2.2.0', 0)
								except ValueError:
									pass
								else:
									# State 6873
									subst5 = Substitution(subst4)
									try:
										subst5.try_add_variable('i2.2.2.2.1.0_1', 1)
									except ValueError:
										pass
									else:
										# State 6874
										if len(subjects66) >= 1:
											tmp69 = subjects66.popleft()
											subst6 = Substitution(subst5)
											try:
												subst6.try_add_variable('i2.2.2.2.1.0', tmp69)
											except ValueError:
												pass
											else:
												if 'i2.2.2.2.0' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f2)(subst6):
													if 'i2.2.2.2.1.0_1' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f3)(subst6):
														if 'i2.2.2.2.1.0' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f7)(subst6):
															if 'i2.2.2.0' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f27)(subst6):
																if 'i2.2.2.2' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f4)(subst6):
																	if 'i2.2.2.2.1.0' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f5)(subst6):
																		if 'i2.2' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f50)(subst6):
																			# State 6875
																			if len(subjects66) >= 1:
																				tmp71 = subjects66.popleft()
																				subst7 = Substitution(subst6)
																				try:
																					subst7.try_add_variable('i2.2.2.2', tmp71)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.2.2' in subst7 and 'i2.2.2.2.1.0' in subst7 and CustomConstraint(cons_f4)(subst7):
																						# State 6876
																						if len(subjects66) == 0:
																							# State 6877
																							if len(subjects46) >= 1:
																								tmp73 = subjects46.popleft()
																								subst8 = Substitution(subst7)
																								try:
																									subst8.try_add_variable('i2.2.2', tmp73)
																								except ValueError:
																									pass
																								else:
																									if 'i2.2.2' in subst8 and CustomConstraint(cons_f147)(subst8):
																										if 'i2.2.2.2.1.0' in subst8 and 'i2.2.2' in subst8 and CustomConstraint(cons_f5)(subst8):
																											# State 6878
																											if len(subjects46) == 0:
																												# State 6879
																												if len(subjects43) >= 1:
																													tmp75 = subjects43.popleft()
																													subst9 = Substitution(subst8)
																													try:
																														subst9.try_add_variable('i2.2', tmp75)
																													except ValueError:
																														pass
																													else:
																														if 'i2.2' in subst9 and CustomConstraint(cons_f386)(subst9):
																															if 'i2.2' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f50)(subst9):
																																# State 6880
																																if len(subjects43) == 0:
																																	# State 6881
																																	if len(subjects2) >= 1:
																																		tmp77 = subjects2.popleft()
																																		subst10 = Substitution(subst9)
																																		try:
																																			subst10.try_add_variable('i2.2.2.2.1.0', tmp77)
																																		except ValueError:
																																			pass
																																		else:
																																			if 'i2.2.2.2.0' in subst10 and 'i2.2.2.2.1.0' in subst10 and CustomConstraint(cons_f2)(subst10):
																																				if 'i2.2.2.2.1.0_1' in subst10 and 'i2.2.2.2.1.0' in subst10 and CustomConstraint(cons_f3)(subst10):
																																					if 'i2.2.2.2.1.0' in subst10 and 'i2.2.0' in subst10 and CustomConstraint(cons_f7)(subst10):
																																						if 'i2.2.2.0' in subst10 and 'i2.2.2.2.1.0' in subst10 and CustomConstraint(cons_f27)(subst10):
																																							if 'i2.2.2.2' in subst10 and 'i2.2.2.2.1.0' in subst10 and CustomConstraint(cons_f4)(subst10):
																																								if 'i2.2.2.2.1.0' in subst10 and 'i2.2.2' in subst10 and CustomConstraint(cons_f5)(subst10):
																																									if 'i2.2' in subst10 and 'i2.2.2.2.1.0' in subst10 and CustomConstraint(cons_f50)(subst10):
																																										# State 6882
																																										if len(subjects2) == 0:
																																											# State 6883
																																											if len(subjects) == 0:
																																												tmp_subst = Substitution()
																																												tmp_subst['x'] = subst10['i2.2.2.2.1.0']
																																												tmp_subst['b'] = subst10['i2.2.2.2.1.0_1']
																																												tmp_subst['a'] = subst10['i2.2.2.2.0']
																																												tmp_subst['n'] = subst10['i2.2.2.2']
																																												tmp_subst['d'] = subst10['i2.2.2.0']
																																												tmp_subst['p'] = subst10['i2.2.2']
																																												tmp_subst['c'] = subst10['i2.2.0']
																																												tmp_subst['q'] = subst10['i2.2']
																																												tmp_subst['u'] = subst10['i2.0']
																																												# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																												yield 154, tmp_subst
																																		subjects2.appendleft(tmp77)
																													subjects43.appendleft(tmp75)
																								subjects46.appendleft(tmp73)
																				subjects66.appendleft(tmp71)
											subjects66.appendleft(tmp69)
									if len(subjects66) >= 1 and isinstance(subjects66[0], Mul):
										tmp79 = subjects66.popleft()
										associative1 = tmp79
										associative_type1 = type(tmp79)
										subjects80 = deque(op_iter(tmp79))
										matcher = CommutativeMatcher6885.get()
										tmp81 = subjects80
										subjects80 = []
										for s in tmp81:
											matcher.add_subject(s)
										for pattern_index, subst5 in matcher.match(tmp81, subst4):
											if pattern_index == 0:
												if 'i2.2.2.2.0' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f2)(subst5):
													if 'i2.2.2.2.1.0_1' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f3)(subst5):
														if 'i2.2.2.2.1.0' in subst5 and 'i2.2.0' in subst5 and CustomConstraint(cons_f7)(subst5):
															if 'i2.2.2.0' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f27)(subst5):
																if 'i2.2.2.2' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f4)(subst5):
																	if 'i2.2.2.2.1.0' in subst5 and 'i2.2.2' in subst5 and CustomConstraint(cons_f5)(subst5):
																		if 'i2.2' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f50)(subst5):
																			# State 6886
																			if len(subjects66) >= 1:
																				tmp82 = []
																				tmp82.append(subjects66.popleft())
																				while True:
																					if len(tmp82) > 1:
																						tmp83 = create_operation_expression(associative1, tmp82)
																					elif len(tmp82) == 1:
																						tmp83 = tmp82[0]
																					else:
																						assert False, "Unreachable"
																					subst6 = Substitution(subst5)
																					try:
																						subst6.try_add_variable('i2.2.2.2', tmp83)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.2.2' in subst6 and 'i2.2.2.2.1.0' in subst6 and CustomConstraint(cons_f4)(subst6):
																							# State 6887
																							if len(subjects66) == 0:
																								# State 6888
																								if len(subjects46) >= 1:
																									tmp85 = subjects46.popleft()
																									subst7 = Substitution(subst6)
																									try:
																										subst7.try_add_variable('i2.2.2', tmp85)
																									except ValueError:
																										pass
																									else:
																										if 'i2.2.2' in subst7 and CustomConstraint(cons_f147)(subst7):
																											if 'i2.2.2.2.1.0' in subst7 and 'i2.2.2' in subst7 and CustomConstraint(cons_f5)(subst7):
																												# State 6889
																												if len(subjects46) == 0:
																													# State 6890
																													if len(subjects43) >= 1:
																														tmp87 = subjects43.popleft()
																														subst8 = Substitution(subst7)
																														try:
																															subst8.try_add_variable('i2.2', tmp87)
																														except ValueError:
																															pass
																														else:
																															if 'i2.2' in subst8 and CustomConstraint(cons_f386)(subst8):
																																if 'i2.2' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f50)(subst8):
																																	# State 6891
																																	if len(subjects43) == 0:
																																		# State 6892
																																		if len(subjects2) >= 1:
																																			tmp89 = subjects2.popleft()
																																			subst9 = Substitution(subst8)
																																			try:
																																				subst9.try_add_variable('i2.2.2.2.1.0', tmp89)
																																			except ValueError:
																																				pass
																																			else:
																																				if 'i2.2.2.2.0' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f2)(subst9):
																																					if 'i2.2.2.2.1.0_1' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f3)(subst9):
																																						if 'i2.2.2.2.1.0' in subst9 and 'i2.2.0' in subst9 and CustomConstraint(cons_f7)(subst9):
																																							if 'i2.2.2.0' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f27)(subst9):
																																								if 'i2.2.2.2' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f4)(subst9):
																																									if 'i2.2.2.2.1.0' in subst9 and 'i2.2.2' in subst9 and CustomConstraint(cons_f5)(subst9):
																																										if 'i2.2' in subst9 and 'i2.2.2.2.1.0' in subst9 and CustomConstraint(cons_f50)(subst9):
																																											# State 6893
																																											if len(subjects2) == 0:
																																												# State 6894
																																												if len(subjects) == 0:
																																													tmp_subst = Substitution()
																																													tmp_subst['x'] = subst9['i2.2.2.2.1.0']
																																													tmp_subst['b'] = subst9['i2.2.2.2.1.0_1']
																																													tmp_subst['a'] = subst9['i2.2.2.2.0']
																																													tmp_subst['n'] = subst9['i2.2.2.2']
																																													tmp_subst['d'] = subst9['i2.2.2.0']
																																													tmp_subst['p'] = subst9['i2.2.2']
																																													tmp_subst['c'] = subst9['i2.2.0']
																																													tmp_subst['q'] = subst9['i2.2']
																																													tmp_subst['u'] = subst9['i2.0']
																																													# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																													yield 154, tmp_subst
																																			subjects2.appendleft(tmp89)
																														subjects43.appendleft(tmp87)
																									subjects46.appendleft(tmp85)
																					if len(subjects66) == 0:
																						break
																					tmp82.append(subjects66.popleft())
																				subjects66.extendleft(reversed(tmp82))
										subjects66.appendleft(tmp79)
								if len(subjects66) >= 1 and isinstance(subjects66[0], Add):
									tmp91 = subjects66.popleft()
									associative1 = tmp91
									associative_type1 = type(tmp91)
									subjects92 = deque(op_iter(tmp91))
									matcher = CommutativeMatcher6896.get()
									tmp93 = subjects92
									subjects92 = []
									for s in tmp93:
										matcher.add_subject(s)
									for pattern_index, subst4 in matcher.match(tmp93, subst3):
										if pattern_index == 0:
											if 'i2.2.2.2.0' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f2)(subst4):
												if 'i2.2.2.2.1.0_1' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
													if 'i2.2.2.2.1.0' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f7)(subst4):
														if 'i2.2.2.0' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f27)(subst4):
															if 'i2.2.2.2' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f4)(subst4):
																if 'i2.2.2.2.1.0' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f5)(subst4):
																	if 'i2.2' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f50)(subst4):
																		# State 6902
																		if len(subjects66) >= 1:
																			tmp94 = []
																			tmp94.append(subjects66.popleft())
																			while True:
																				if len(tmp94) > 1:
																					tmp95 = create_operation_expression(associative1, tmp94)
																				elif len(tmp94) == 1:
																					tmp95 = tmp94[0]
																				else:
																					assert False, "Unreachable"
																				subst5 = Substitution(subst4)
																				try:
																					subst5.try_add_variable('i2.2.2.2', tmp95)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.2.2' in subst5 and 'i2.2.2.2.1.0' in subst5 and CustomConstraint(cons_f4)(subst5):
																						# State 6903
																						if len(subjects66) == 0:
																							# State 6904
																							if len(subjects46) >= 1:
																								tmp97 = subjects46.popleft()
																								subst6 = Substitution(subst5)
																								try:
																									subst6.try_add_variable('i2.2.2', tmp97)
																								except ValueError:
																									pass
																								else:
																									if 'i2.2.2' in subst6 and CustomConstraint(cons_f147)(subst6):
																										if 'i2.2.2.2.1.0' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f5)(subst6):
																											# State 6905
																											if len(subjects46) == 0:
																												# State 6906
																												if len(subjects43) >= 1:
																													tmp99 = subjects43.popleft()
																													subst7 = Substitution(subst6)
																													try:
																														subst7.try_add_variable('i2.2', tmp99)
																													except ValueError:
																														pass
																													else:
																														if 'i2.2' in subst7 and CustomConstraint(cons_f386)(subst7):
																															if 'i2.2' in subst7 and 'i2.2.2.2.1.0' in subst7 and CustomConstraint(cons_f50)(subst7):
																																# State 6907
																																if len(subjects43) == 0:
																																	# State 6908
																																	if len(subjects2) >= 1:
																																		tmp101 = subjects2.popleft()
																																		subst8 = Substitution(subst7)
																																		try:
																																			subst8.try_add_variable('i2.2.2.2.1.0', tmp101)
																																		except ValueError:
																																			pass
																																		else:
																																			if 'i2.2.2.2.0' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f2)(subst8):
																																				if 'i2.2.2.2.1.0_1' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f3)(subst8):
																																					if 'i2.2.2.2.1.0' in subst8 and 'i2.2.0' in subst8 and CustomConstraint(cons_f7)(subst8):
																																						if 'i2.2.2.0' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f27)(subst8):
																																							if 'i2.2.2.2' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f4)(subst8):
																																								if 'i2.2.2.2.1.0' in subst8 and 'i2.2.2' in subst8 and CustomConstraint(cons_f5)(subst8):
																																									if 'i2.2' in subst8 and 'i2.2.2.2.1.0' in subst8 and CustomConstraint(cons_f50)(subst8):
																																										# State 6909
																																										if len(subjects2) == 0:
																																											# State 6910
																																											if len(subjects) == 0:
																																												tmp_subst = Substitution()
																																												tmp_subst['x'] = subst8['i2.2.2.2.1.0']
																																												tmp_subst['b'] = subst8['i2.2.2.2.1.0_1']
																																												tmp_subst['a'] = subst8['i2.2.2.2.0']
																																												tmp_subst['n'] = subst8['i2.2.2.2']
																																												tmp_subst['d'] = subst8['i2.2.2.0']
																																												tmp_subst['p'] = subst8['i2.2.2']
																																												tmp_subst['c'] = subst8['i2.2.0']
																																												tmp_subst['q'] = subst8['i2.2']
																																												tmp_subst['u'] = subst8['i2.0']
																																												# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																												yield 154, tmp_subst
																																		subjects2.appendleft(tmp101)
																													subjects43.appendleft(tmp99)
																								subjects46.appendleft(tmp97)
																				if len(subjects66) == 0:
																					break
																				tmp94.append(subjects66.popleft())
																			subjects66.extendleft(reversed(tmp94))
									subjects66.appendleft(tmp91)
								subjects46.appendleft(tmp65)
						if len(subjects46) >= 1:
							tmp103 = subjects46.popleft()
							subst3 = Substitution(subst2)
							try:
								subst3.try_add_variable('i2.2.1', tmp103)
							except ValueError:
								pass
							else:
								if 'i2.2.1' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f10)(subst3):
									if 'i2.2.1' in subst3 and 'i2' in subst3 and 'i2.2.2' in subst3 and CustomConstraint(cons_f2028)(subst3):
										# State 8760
										subst4 = Substitution(subst3)
										try:
											subst4.try_add_variable('i2.2.2', 1)
										except ValueError:
											pass
										else:
											if 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f21)(subst4):
												if 'i2.2.2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2027)(subst4):
													if 'i2.2.1' in subst4 and 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f2028)(subst4):
														# State 8761
														if len(subjects46) == 0:
															# State 8762
															if len(subjects43) >= 1:
																tmp106 = subjects43.popleft()
																subst5 = Substitution(subst4)
																try:
																	subst5.try_add_variable('i2.2', tmp106)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst5 and CustomConstraint(cons_f147)(subst5):
																		if 'i2.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f5)(subst5):
																			# State 8763
																			if len(subjects43) == 0:
																				# State 8764
																				if len(subjects2) >= 1:
																					tmp108 = subjects2.popleft()
																					subst6 = Substitution(subst5)
																					try:
																						subst6.try_add_variable('i2', tmp108)
																					except ValueError:
																						pass
																					else:
																						if 'i2' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f2)(subst6):
																							if 'i2.2' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f5)(subst6):
																								if 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f21)(subst6):
																									if 'i2.2.1' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f10)(subst6):
																										if 'i2.2.1' in subst6 and 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f2028)(subst6):
																											# State 8765
																											if len(subjects2) == 0:
																												# State 8766
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['v'] = subst6['i2.2.1']
																													tmp_subst['m'] = subst6['i2.2.2']
																													tmp_subst['a'] = subst6['i2.2.0']
																													tmp_subst['p'] = subst6['i2.2']
																													tmp_subst['u'] = subst6['i2.0']
																													tmp_subst['x'] = subst6['i2']
																													# 195: Integral(u*(a*v**m)**p, x) /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
																													yield 195, tmp_subst
																					subjects2.appendleft(tmp108)
																subjects43.appendleft(tmp106)
										if len(subjects46) >= 1:
											tmp110 = subjects46.popleft()
											subst4 = Substitution(subst3)
											try:
												subst4.try_add_variable('i2.2.2', tmp110)
											except ValueError:
												pass
											else:
												if 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f21)(subst4):
													if 'i2.2.2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2027)(subst4):
														if 'i2.2.1' in subst4 and 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f2028)(subst4):
															# State 8761
															if len(subjects46) == 0:
																# State 8762
																if len(subjects43) >= 1:
																	tmp112 = subjects43.popleft()
																	subst5 = Substitution(subst4)
																	try:
																		subst5.try_add_variable('i2.2', tmp112)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2' in subst5 and CustomConstraint(cons_f147)(subst5):
																			if 'i2.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f5)(subst5):
																				# State 8763
																				if len(subjects43) == 0:
																					# State 8764
																					if len(subjects2) >= 1:
																						tmp114 = subjects2.popleft()
																						subst6 = Substitution(subst5)
																						try:
																							subst6.try_add_variable('i2', tmp114)
																						except ValueError:
																							pass
																						else:
																							if 'i2' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f2)(subst6):
																								if 'i2.2' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f5)(subst6):
																									if 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f21)(subst6):
																										if 'i2.2.1' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f10)(subst6):
																											if 'i2.2.1' in subst6 and 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f2028)(subst6):
																												# State 8765
																												if len(subjects2) == 0:
																													# State 8766
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['v'] = subst6['i2.2.1']
																														tmp_subst['m'] = subst6['i2.2.2']
																														tmp_subst['a'] = subst6['i2.2.0']
																														tmp_subst['p'] = subst6['i2.2']
																														tmp_subst['u'] = subst6['i2.0']
																														tmp_subst['x'] = subst6['i2']
																														# 195: Integral(u*(a*v**m)**p, x) /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
																														yield 195, tmp_subst
																						subjects2.appendleft(tmp114)
																	subjects43.appendleft(tmp112)
											subjects46.appendleft(tmp110)
							subjects46.appendleft(tmp103)
						subjects43.appendleft(tmp45)
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.2', 1)
					except ValueError:
						pass
					else:
						# State 8754
						if len(subjects43) >= 1:
							tmp117 = subjects43.popleft()
							subst4 = Substitution(subst3)
							try:
								subst4.try_add_variable('i2.2.1', tmp117)
							except ValueError:
								pass
							else:
								if 'i2.2.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f10)(subst4):
									if 'i2.2.1' in subst4 and 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f2028)(subst4):
										# State 8755
										if len(subjects43) >= 1:
											tmp119 = subjects43.popleft()
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2', tmp119)
											except ValueError:
												pass
											else:
												if 'i2.2' in subst5 and CustomConstraint(cons_f147)(subst5):
													if 'i2.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f5)(subst5):
														# State 8756
														if len(subjects43) == 0:
															# State 8757
															if len(subjects2) >= 1:
																tmp121 = subjects2.popleft()
																subst6 = Substitution(subst5)
																try:
																	subst6.try_add_variable('i2', tmp121)
																except ValueError:
																	pass
																else:
																	if 'i2' in subst6 and 'i2.2.0' in subst6 and CustomConstraint(cons_f2)(subst6):
																		if 'i2.2' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f5)(subst6):
																			if 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f21)(subst6):
																				if 'i2.2.1' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f10)(subst6):
																					if 'i2.2.1' in subst6 and 'i2' in subst6 and 'i2.2.2' in subst6 and CustomConstraint(cons_f2028)(subst6):
																						# State 8758
																						if len(subjects2) == 0:
																							# State 8759
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['v'] = subst6['i2.2.1']
																								tmp_subst['m'] = subst6['i2.2.2']
																								tmp_subst['a'] = subst6['i2.2.0']
																								tmp_subst['p'] = subst6['i2.2']
																								tmp_subst['u'] = subst6['i2.0']
																								tmp_subst['x'] = subst6['i2']
																								# 195: Integral(u*(a*v**m)**p, x) /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
																								yield 195, tmp_subst
																subjects2.appendleft(tmp121)
											subjects43.appendleft(tmp119)
							subjects43.appendleft(tmp117)
				subst2 = Substitution(subst1)
				try:
					subst2.try_add_variable('i2.2.0', 0)
				except ValueError:
					pass
				else:
					# State 8349
					subst3 = Substitution(subst2)
					try:
						subst3.try_add_variable('i2.2.1.0', 1)
					except ValueError:
						pass
					else:
						# State 8350
						if len(subjects43) >= 1 and isinstance(subjects43[0], Pow):
							tmp125 = subjects43.popleft()
							subjects126 = deque(op_iter(tmp125))
							# State 8351
							if len(subjects126) >= 1:
								tmp127 = subjects126.popleft()
								subst4 = Substitution(subst3)
								try:
									subst4.try_add_variable('i2.2.1.1', tmp127)
								except ValueError:
									pass
								else:
									if 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.0' in subst4 and 'i2.2.0' in subst4 and 'i2.2.1.1' in subst4 and 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(With6950)(subst4):
										# State 8352
										if len(subjects126) >= 1:
											tmp129 = subjects126.popleft()
											subst5 = Substitution(subst4)
											try:
												subst5.try_add_variable('i2.2.1.2', tmp129)
											except ValueError:
												pass
											else:
												if 'i2.2.1.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f4)(subst5):
													if 'i2.2' in subst5 and 'i2.2.1.2' in subst5 and 'i2.2.0' in subst5 and 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(cons_f1244)(subst5):
														if 'i2.2' in subst5 and 'i2.2.1.2' in subst5 and 'i2.0' in subst5 and 'i2.2.0' in subst5 and 'i2.2.1.1' in subst5 and 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(With6950)(subst5):
															# State 8353
															if len(subjects126) == 0:
																# State 8354
																if len(subjects43) >= 1:
																	tmp131 = subjects43.popleft()
																	subst6 = Substitution(subst5)
																	try:
																		subst6.try_add_variable('i2.2', tmp131)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f5)(subst6):
																			if 'i2.2' in subst6 and 'i2.2.1.2' in subst6 and 'i2.2.0' in subst6 and 'i2' in subst6 and 'i2.2.1.0' in subst6 and CustomConstraint(cons_f1244)(subst6):
																				if 'i2.2' in subst6 and 'i2.2.1.2' in subst6 and 'i2.0' in subst6 and 'i2.2.0' in subst6 and 'i2.2.1.1' in subst6 and 'i2' in subst6 and 'i2.2.1.0' in subst6 and CustomConstraint(With6950)(subst6):
																					# State 8355
																					if len(subjects43) == 0:
																						# State 8356
																						if len(subjects2) >= 1:
																							tmp133 = subjects2.popleft()
																							subst7 = Substitution(subst6)
																							try:
																								subst7.try_add_variable('i2', tmp133)
																							except ValueError:
																								pass
																							else:
																								if 'i2' in subst7 and 'i2.2.0' in subst7 and CustomConstraint(cons_f2)(subst7):
																									if 'i2.2.1.2' in subst7 and 'i2' in subst7 and CustomConstraint(cons_f4)(subst7):
																										if 'i2' in subst7 and 'i2.2.1.0' in subst7 and CustomConstraint(cons_f3)(subst7):
																											if 'i2.2' in subst7 and 'i2' in subst7 and CustomConstraint(cons_f5)(subst7):
																												if 'i2.2' in subst7 and 'i2.2.1.2' in subst7 and 'i2.2.0' in subst7 and 'i2' in subst7 and 'i2.2.1.0' in subst7 and CustomConstraint(cons_f1244)(subst7):
																													if 'i2.2' in subst7 and 'i2.2.1.2' in subst7 and 'i2.0' in subst7 and 'i2.2.0' in subst7 and 'i2.2.1.1' in subst7 and 'i2' in subst7 and 'i2.2.1.0' in subst7 and CustomConstraint(With6950)(subst7):
																														# State 8357
																														if len(subjects2) == 0:
																															# State 8358
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['y'] = subst7['i2.2.1.1']
																																tmp_subst['n'] = subst7['i2.2.1.2']
																																tmp_subst['b'] = subst7['i2.2.1.0']
																																tmp_subst['a'] = subst7['i2.2.0']
																																tmp_subst['p'] = subst7['i2.2']
																																tmp_subst['u'] = subst7['i2.0']
																																tmp_subst['x'] = subst7['i2']
																																# 171: Integral(u*(a + b*y**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
																																yield 171, tmp_subst
																							subjects2.appendleft(tmp133)
																						if len(subjects2) >= 1:
																							tmp135 = subjects2.popleft()
																							subst7 = Substitution(subst6)
																							try:
																								subst7.try_add_variable('i2.2.1.1', tmp135)
																							except ValueError:
																								pass
																							else:
																								pass
																							subjects2.appendleft(tmp135)
																	subjects43.appendleft(tmp131)
											subjects126.appendleft(tmp129)
									if 'i2.2.1.1' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
										if 'i2.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
											if 'i2.2' in subst4 and 'i2.2.1.1' in subst4 and CustomConstraint(cons_f5)(subst4):
												if 'i2.2.1.1' in subst4 and 'i2.0' in subst4 and CustomConstraint(cons_f2029)(subst4):
													# State 8352
													if len(subjects126) >= 1:
														tmp137 = subjects126.popleft()
														subst5 = Substitution(subst4)
														try:
															subst5.try_add_variable('i2.2.1.2', tmp137)
														except ValueError:
															pass
														else:
															if 'i2.2.1.2' in subst5 and CustomConstraint(cons_f196)(subst5):
																# State 8353
																if len(subjects126) == 0:
																	# State 8354
																	if len(subjects43) >= 1:
																		tmp139 = subjects43.popleft()
																		subst6 = Substitution(subst5)
																		try:
																			subst6.try_add_variable('i2.2', tmp139)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2' in subst6 and 'i2.2.1.1' in subst6 and CustomConstraint(cons_f5)(subst6):
																				if 'i2.2' in subst6 and CustomConstraint(cons_f667)(subst6):
																					# State 8355
																					if len(subjects43) == 0:
																						# State 8356
																						if len(subjects2) >= 1:
																							tmp141 = subjects2.popleft()
																							subst7 = Substitution(subst6)
																							try:
																								subst7.try_add_variable('i2', tmp141)
																							except ValueError:
																								pass
																							else:
																								pass
																							subjects2.appendleft(tmp141)
																						if len(subjects2) >= 1:
																							tmp143 = subjects2.popleft()
																							subst7 = Substitution(subst6)
																							try:
																								subst7.try_add_variable('i2.2.1.1', tmp143)
																							except ValueError:
																								pass
																							else:
																								if 'i2.2.1.1' in subst7 and 'i2.2.0' in subst7 and CustomConstraint(cons_f2)(subst7):
																									if 'i2.2.1.1' in subst7 and 'i2.2.1.0' in subst7 and CustomConstraint(cons_f3)(subst7):
																										if 'i2.2' in subst7 and 'i2.2.1.1' in subst7 and CustomConstraint(cons_f5)(subst7):
																											if 'i2.2.1.1' in subst7 and 'i2.0' in subst7 and CustomConstraint(cons_f2029)(subst7):
																												# State 8787
																												if len(subjects2) == 0:
																													# State 8788
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst7['i2.2.1.1']
																														tmp_subst['n'] = subst7['i2.2.1.2']
																														tmp_subst['b'] = subst7['i2.2.1.0']
																														tmp_subst['a'] = subst7['i2.2.0']
																														tmp_subst['p'] = subst7['i2.2']
																														tmp_subst['u'] = subst7['i2.0']
																														# 196: Integral(u*(a + b*x**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
																														yield 196, tmp_subst
																							subjects2.appendleft(tmp143)
																		subjects43.appendleft(tmp139)
														subjects126.appendleft(tmp137)
									if 'i2.2.1.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f840)(subst4):
										if 'i2.2.1.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f2030)(subst4):
											# State 8352
											if len(subjects126) >= 1:
												tmp145 = subjects126.popleft()
												subst5 = Substitution(subst4)
												try:
													subst5.try_add_variable('i2.2.1.2', tmp145)
												except ValueError:
													pass
												else:
													if 'i2.2.1.2' in subst5 and CustomConstraint(cons_f196)(subst5):
														# State 8353
														if len(subjects126) == 0:
															# State 8354
															if len(subjects43) >= 1:
																tmp147 = subjects43.popleft()
																subst6 = Substitution(subst5)
																try:
																	subst6.try_add_variable('i2.2', tmp147)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst6 and CustomConstraint(cons_f147)(subst6):
																		if 'i2.2' in subst6 and 'i2' in subst6 and CustomConstraint(cons_f5)(subst6):
																			# State 8355
																			if len(subjects43) == 0:
																				# State 8356
																				if len(subjects2) >= 1:
																					tmp149 = subjects2.popleft()
																					subst7 = Substitution(subst6)
																					try:
																						subst7.try_add_variable('i2', tmp149)
																					except ValueError:
																						pass
																					else:
																						if 'i2' in subst7 and 'i2.2.0' in subst7 and CustomConstraint(cons_f2)(subst7):
																							if 'i2' in subst7 and 'i2.2.1.0' in subst7 and CustomConstraint(cons_f3)(subst7):
																								if 'i2.2' in subst7 and 'i2' in subst7 and CustomConstraint(cons_f5)(subst7):
																									if 'i2.2.1.1' in subst7 and 'i2' in subst7 and CustomConstraint(cons_f840)(subst7):
																										if 'i2.2.1.1' in subst7 and 'i2' in subst7 and CustomConstraint(cons_f2030)(subst7):
																											# State 8357
																											if len(subjects2) == 0:
																												# State 8358
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['v'] = subst7['i2.2.1.1']
																													tmp_subst['n'] = subst7['i2.2.1.2']
																													tmp_subst['b'] = subst7['i2.2.1.0']
																													tmp_subst['a'] = subst7['i2.2.0']
																													tmp_subst['p'] = subst7['i2.2']
																													tmp_subst['u'] = subst7['i2.0']
																													tmp_subst['x'] = subst7['i2']
																													# 197: Integral(u*(a + b*v**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
																													yield 197, tmp_subst
																					subjects2.appendleft(tmp149)
																				if len(subjects2) >= 1:
																					tmp151 = subjects2.popleft()
																					subst7 = Substitution(subst6)
																					try:
																						subst7.try_add_variable('i2.2.1.1', tmp151)
																					except ValueError:
																						pass
																					else:
																						pass
																					subjects2.appendleft(tmp151)
																subjects43.appendleft(tmp147)
												subjects126.appendleft(tmp145)
								subjects126.appendleft(tmp127)
							subjects43.appendleft(tmp125)
					if len(subjects43) >= 1 and isinstance(subjects43[0], Mul):
						tmp153 = subjects43.popleft()
						associative1 = tmp153
						associative_type1 = type(tmp153)
						subjects154 = deque(op_iter(tmp153))
						matcher = CommutativeMatcher8360.get()
						tmp155 = subjects154
						subjects154 = []
						for s in tmp155:
							matcher.add_subject(s)
						for pattern_index, subst3 in matcher.match(tmp155, subst2):
							if pattern_index == 0:
								if 'i2.2.1.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f4)(subst3):
									if 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
										if 'i2.2' in subst3 and 'i2.2.1.2' in subst3 and 'i2.2.0' in subst3 and 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f1244)(subst3):
											if 'i2.2' in subst3 and 'i2.2.1.2' in subst3 and 'i2.0' in subst3 and 'i2.2.0' in subst3 and 'i2.2.1.1' in subst3 and 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(With6950)(subst3):
												# State 8365
												if len(subjects43) >= 1:
													tmp156 = []
													tmp156.append(subjects43.popleft())
													while True:
														if len(tmp156) > 1:
															tmp157 = create_operation_expression(associative1, tmp156)
														elif len(tmp156) == 1:
															tmp157 = tmp156[0]
														else:
															assert False, "Unreachable"
														subst4 = Substitution(subst3)
														try:
															subst4.try_add_variable('i2.2', tmp157)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																if 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.2.0' in subst4 and 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f1244)(subst4):
																	if 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.0' in subst4 and 'i2.2.0' in subst4 and 'i2.2.1.1' in subst4 and 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(With6950)(subst4):
																		# State 8366
																		if len(subjects43) == 0:
																			# State 8367
																			if len(subjects2) >= 1:
																				tmp159 = subjects2.popleft()
																				subst5 = Substitution(subst4)
																				try:
																					subst5.try_add_variable('i2', tmp159)
																				except ValueError:
																					pass
																				else:
																					if 'i2' in subst5 and 'i2.2.0' in subst5 and CustomConstraint(cons_f2)(subst5):
																						if 'i2.2.1.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f4)(subst5):
																							if 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(cons_f3)(subst5):
																								if 'i2.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f5)(subst5):
																									if 'i2.2' in subst5 and 'i2.2.1.2' in subst5 and 'i2.2.0' in subst5 and 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(cons_f1244)(subst5):
																										if 'i2.2' in subst5 and 'i2.2.1.2' in subst5 and 'i2.0' in subst5 and 'i2.2.0' in subst5 and 'i2.2.1.1' in subst5 and 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(With6950)(subst5):
																											# State 8368
																											if len(subjects2) == 0:
																												# State 8369
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['y'] = subst5['i2.2.1.1']
																													tmp_subst['n'] = subst5['i2.2.1.2']
																													tmp_subst['b'] = subst5['i2.2.1.0']
																													tmp_subst['a'] = subst5['i2.2.0']
																													tmp_subst['p'] = subst5['i2.2']
																													tmp_subst['u'] = subst5['i2.0']
																													tmp_subst['x'] = subst5['i2']
																													# 171: Integral(u*(a + b*y**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
																													yield 171, tmp_subst
																				subjects2.appendleft(tmp159)
														if len(subjects43) == 0:
															break
														tmp156.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp156))
							if pattern_index == 1:
								if 'i2.2.1.1' in subst3 and 'i2.2.0' in subst3 and CustomConstraint(cons_f2)(subst3):
									if 'i2.2.1.1' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
										if 'i2.2' in subst3 and 'i2.2.1.1' in subst3 and CustomConstraint(cons_f5)(subst3):
											if 'i2.2.1.2' in subst3 and CustomConstraint(cons_f196)(subst3):
												if 'i2.2.1.1' in subst3 and 'i2.0' in subst3 and CustomConstraint(cons_f2029)(subst3):
													# State 8789
													if len(subjects43) >= 1:
														tmp161 = []
														tmp161.append(subjects43.popleft())
														while True:
															if len(tmp161) > 1:
																tmp162 = create_operation_expression(associative1, tmp161)
															elif len(tmp161) == 1:
																tmp162 = tmp161[0]
															else:
																assert False, "Unreachable"
															subst4 = Substitution(subst3)
															try:
																subst4.try_add_variable('i2.2', tmp162)
															except ValueError:
																pass
															else:
																if 'i2.2' in subst4 and 'i2.2.1.1' in subst4 and CustomConstraint(cons_f5)(subst4):
																	if 'i2.2' in subst4 and CustomConstraint(cons_f667)(subst4):
																		# State 8790
																		if len(subjects43) == 0:
																			# State 8791
																			if len(subjects2) >= 1:
																				tmp164 = subjects2.popleft()
																				subst5 = Substitution(subst4)
																				try:
																					subst5.try_add_variable('i2.2.1.1', tmp164)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.1.1' in subst5 and 'i2.2.0' in subst5 and CustomConstraint(cons_f2)(subst5):
																						if 'i2.2.1.1' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(cons_f3)(subst5):
																							if 'i2.2' in subst5 and 'i2.2.1.1' in subst5 and CustomConstraint(cons_f5)(subst5):
																								if 'i2.2.1.1' in subst5 and 'i2.0' in subst5 and CustomConstraint(cons_f2029)(subst5):
																									# State 8792
																									if len(subjects2) == 0:
																										# State 8793
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst5['i2.2.1.1']
																											tmp_subst['n'] = subst5['i2.2.1.2']
																											tmp_subst['b'] = subst5['i2.2.1.0']
																											tmp_subst['a'] = subst5['i2.2.0']
																											tmp_subst['p'] = subst5['i2.2']
																											tmp_subst['u'] = subst5['i2.0']
																											# 196: Integral(u*(a + b*x**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
																											yield 196, tmp_subst
																				subjects2.appendleft(tmp164)
															if len(subjects43) == 0:
																break
															tmp161.append(subjects43.popleft())
														subjects43.extendleft(reversed(tmp161))
							if pattern_index == 2:
								if 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
									if 'i2.2.1.2' in subst3 and CustomConstraint(cons_f196)(subst3):
										if 'i2.2.1.1' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f840)(subst3):
											if 'i2.2.1.1' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f2030)(subst3):
												# State 8802
												if len(subjects43) >= 1:
													tmp166 = []
													tmp166.append(subjects43.popleft())
													while True:
														if len(tmp166) > 1:
															tmp167 = create_operation_expression(associative1, tmp166)
														elif len(tmp166) == 1:
															tmp167 = tmp166[0]
														else:
															assert False, "Unreachable"
														subst4 = Substitution(subst3)
														try:
															subst4.try_add_variable('i2.2', tmp167)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst4 and CustomConstraint(cons_f147)(subst4):
																if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																	# State 8803
																	if len(subjects43) == 0:
																		# State 8804
																		if len(subjects2) >= 1:
																			tmp169 = subjects2.popleft()
																			subst5 = Substitution(subst4)
																			try:
																				subst5.try_add_variable('i2', tmp169)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst5 and 'i2.2.0' in subst5 and CustomConstraint(cons_f2)(subst5):
																					if 'i2' in subst5 and 'i2.2.1.0' in subst5 and CustomConstraint(cons_f3)(subst5):
																						if 'i2.2' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f5)(subst5):
																							if 'i2.2.1.1' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f840)(subst5):
																								if 'i2.2.1.1' in subst5 and 'i2' in subst5 and CustomConstraint(cons_f2030)(subst5):
																									# State 8805
																									if len(subjects2) == 0:
																										# State 8806
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst5['i2.2.1.1']
																											tmp_subst['n'] = subst5['i2.2.1.2']
																											tmp_subst['b'] = subst5['i2.2.1.0']
																											tmp_subst['a'] = subst5['i2.2.0']
																											tmp_subst['p'] = subst5['i2.2']
																											tmp_subst['u'] = subst5['i2.0']
																											tmp_subst['x'] = subst5['i2']
																											# 197: Integral(u*(a + b*v**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
																											yield 197, tmp_subst
																			subjects2.appendleft(tmp169)
														if len(subjects43) == 0:
															break
														tmp166.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp166))
							if pattern_index == 3:
								if 'i2.2.1.2' in subst3 and CustomConstraint(cons_f196)(subst3):
									if 'i2.2.0' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f2)(subst3):
										if 'i2.2.1.0' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f3)(subst3):
											if 'i2.2.1.2_1' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f21)(subst3):
												if 'i2.2' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f5)(subst3):
													if 'i2.2.1.1' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f840)(subst3):
														# State 8820
														if len(subjects43) >= 1:
															tmp171 = []
															tmp171.append(subjects43.popleft())
															while True:
																if len(tmp171) > 1:
																	tmp172 = create_operation_expression(associative1, tmp171)
																elif len(tmp171) == 1:
																	tmp172 = tmp171[0]
																else:
																	assert False, "Unreachable"
																subst4 = Substitution(subst3)
																try:
																	subst4.try_add_variable('i2.2', tmp172)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst4 and CustomConstraint(cons_f147)(subst4):
																		if 'i2.2' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f5)(subst4):
																			# State 8821
																			if len(subjects43) == 0:
																				# State 8822
																				if len(subjects2) >= 1:
																					tmp174 = subjects2.popleft()
																					subst5 = Substitution(subst4)
																					try:
																						subst5.try_add_variable('i2.2.1.1_1', tmp174)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.0' in subst5 and 'i2.2.1.1_1' in subst5 and CustomConstraint(cons_f2)(subst5):
																							if 'i2.2.1.0' in subst5 and 'i2.2.1.1_1' in subst5 and CustomConstraint(cons_f3)(subst5):
																								if 'i2.2.1.2_1' in subst5 and 'i2.2.1.1_1' in subst5 and CustomConstraint(cons_f21)(subst5):
																									if 'i2.2' in subst5 and 'i2.2.1.1_1' in subst5 and CustomConstraint(cons_f5)(subst5):
																										if 'i2.2.1.1' in subst5 and 'i2.2.1.1_1' in subst5 and CustomConstraint(cons_f840)(subst5):
																											# State 8823
																											if len(subjects2) == 0:
																												# State 8824
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['v'] = subst5['i2.2.1.1']
																													tmp_subst['n'] = subst5['i2.2.1.2']
																													tmp_subst['x'] = subst5['i2.2.1.1_1']
																													tmp_subst['m'] = subst5['i2.2.1.2_1']
																													tmp_subst['b'] = subst5['i2.2.1.0']
																													tmp_subst['a'] = subst5['i2.2.0']
																													tmp_subst['p'] = subst5['i2.2']
																													tmp_subst['u'] = subst5['i2.0']
																													# 198: Integral(u*(a + b*v**n*x**m)**p, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840)
																													yield 198, tmp_subst
																					subjects2.appendleft(tmp174)
																if len(subjects43) == 0:
																	break
																tmp171.append(subjects43.popleft())
															subjects43.extendleft(reversed(tmp171))
						subjects43.appendleft(tmp153)
				if len(subjects43) >= 1 and isinstance(subjects43[0], Mul):
					tmp176 = subjects43.popleft()
					associative1 = tmp176
					associative_type1 = type(tmp176)
					subjects177 = deque(op_iter(tmp176))
					matcher = CommutativeMatcher6799.get()
					tmp178 = subjects177
					subjects177 = []
					for s in tmp178:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp178, subst1):
						if pattern_index == 0:
							if 'i2.2.2.1.0' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.2.1.1.0_1' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2.2.1.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
										if 'i2.2.2.0' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
											if 'i2.2.2.1.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f5)(subst2):
												if 'i2.2' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
													if 'i2.2.2' in subst2 and CustomConstraint(cons_f147)(subst2):
														# State 6820
														if len(subjects43) >= 1:
															tmp179 = []
															tmp179.append(subjects43.popleft())
															while True:
																if len(tmp179) > 1:
																	tmp180 = create_operation_expression(associative1, tmp179)
																elif len(tmp179) == 1:
																	tmp180 = tmp179[0]
																else:
																	assert False, "Unreachable"
																subst3 = Substitution(subst2)
																try:
																	subst3.try_add_variable('i2.2', tmp180)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst3 and 'i2.2.2.1.1.0' in subst3 and CustomConstraint(cons_f50)(subst3):
																		if 'i2.2' in subst3 and CustomConstraint(cons_f386)(subst3):
																			# State 6821
																			if len(subjects43) == 0:
																				# State 6822
																				if len(subjects2) >= 1:
																					tmp182 = subjects2.popleft()
																					subst4 = Substitution(subst3)
																					try:
																						subst4.try_add_variable('i2.2.2.1.1.0', tmp182)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.2.1.0' in subst4 and 'i2.2.2.1.1.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																							if 'i2.2.2.1.1.0_1' in subst4 and 'i2.2.2.1.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
																								if 'i2.2.2.1.1.0' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f7)(subst4):
																									if 'i2.2.2.0' in subst4 and 'i2.2.2.1.1.0' in subst4 and CustomConstraint(cons_f27)(subst4):
																										if 'i2.2.2.1.1.0' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f5)(subst4):
																											if 'i2.2' in subst4 and 'i2.2.2.1.1.0' in subst4 and CustomConstraint(cons_f50)(subst4):
																												# State 6823
																												if len(subjects2) == 0:
																													# State 6824
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst4['i2.2.2.1.1.0']
																														tmp_subst['b'] = subst4['i2.2.2.1.1.0_1']
																														tmp_subst['a'] = subst4['i2.2.2.1.0']
																														tmp_subst['d'] = subst4['i2.2.2.0']
																														tmp_subst['p'] = subst4['i2.2.2']
																														tmp_subst['c'] = subst4['i2.2.0']
																														tmp_subst['q'] = subst4['i2.2']
																														tmp_subst['u'] = subst4['i2.0']
																														# 153: Integral(u*(c*(d*(a + b*x))**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																														yield 153, tmp_subst
																					subjects2.appendleft(tmp182)
																if len(subjects43) == 0:
																	break
																tmp179.append(subjects43.popleft())
															subjects43.extendleft(reversed(tmp179))
						if pattern_index == 1:
							if 'i2.2.2' in subst2 and CustomConstraint(cons_f147)(subst2):
								if 'i2.2.2.2.0' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
									if 'i2.2.2.2.1.0_1' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
										if 'i2.2.2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
											if 'i2.2.2.0' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
												if 'i2.2.2.2' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
													if 'i2.2.2.2.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f5)(subst2):
														if 'i2.2' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
															# State 6991
															if len(subjects43) >= 1:
																tmp184 = []
																tmp184.append(subjects43.popleft())
																while True:
																	if len(tmp184) > 1:
																		tmp185 = create_operation_expression(associative1, tmp184)
																	elif len(tmp184) == 1:
																		tmp185 = tmp184[0]
																	else:
																		assert False, "Unreachable"
																	subst3 = Substitution(subst2)
																	try:
																		subst3.try_add_variable('i2.2', tmp185)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2' in subst3 and CustomConstraint(cons_f386)(subst3):
																			if 'i2.2' in subst3 and 'i2.2.2.2.1.0' in subst3 and CustomConstraint(cons_f50)(subst3):
																				# State 6992
																				if len(subjects43) == 0:
																					# State 6993
																					if len(subjects2) >= 1:
																						tmp187 = subjects2.popleft()
																						subst4 = Substitution(subst3)
																						try:
																							subst4.try_add_variable('i2.2.2.2.1.0', tmp187)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2.2.2.0' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																								if 'i2.2.2.2.1.0_1' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
																									if 'i2.2.2.2.1.0' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f7)(subst4):
																										if 'i2.2.2.0' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f27)(subst4):
																											if 'i2.2.2.2' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f4)(subst4):
																												if 'i2.2.2.2.1.0' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f5)(subst4):
																													if 'i2.2' in subst4 and 'i2.2.2.2.1.0' in subst4 and CustomConstraint(cons_f50)(subst4):
																														# State 6994
																														if len(subjects2) == 0:
																															# State 6995
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst4['i2.2.2.2.1.0']
																																tmp_subst['b'] = subst4['i2.2.2.2.1.0_1']
																																tmp_subst['a'] = subst4['i2.2.2.2.0']
																																tmp_subst['n'] = subst4['i2.2.2.2']
																																tmp_subst['d'] = subst4['i2.2.2.0']
																																tmp_subst['p'] = subst4['i2.2.2']
																																tmp_subst['c'] = subst4['i2.2.0']
																																tmp_subst['q'] = subst4['i2.2']
																																tmp_subst['u'] = subst4['i2.0']
																																# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																																yield 154, tmp_subst
																						subjects2.appendleft(tmp187)
																	if len(subjects43) == 0:
																		break
																	tmp184.append(subjects43.popleft())
																subjects43.extendleft(reversed(tmp184))
						if pattern_index == 2:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
									if 'i2' in subst2 and 'i2.2.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
										if 'i2' in subst2 and 'i2.2.2_2' in subst2 and CustomConstraint(cons_f50)(subst2):
											if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
												if 'i2.2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2025)(subst2):
													if 'i2' in subst2 and 'i2.2.1_2' in subst2 and CustomConstraint(cons_f2026)(subst2):
														# State 8717
														if len(subjects43) >= 1:
															tmp189 = []
															tmp189.append(subjects43.popleft())
															while True:
																if len(tmp189) > 1:
																	tmp190 = create_operation_expression(associative1, tmp189)
																elif len(tmp189) == 1:
																	tmp190 = tmp189[0]
																else:
																	assert False, "Unreachable"
																subst3 = Substitution(subst2)
																try:
																	subst3.try_add_variable('i2.2', tmp190)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst3 and CustomConstraint(cons_f147)(subst3):
																		if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																			# State 8718
																			if len(subjects43) == 0:
																				# State 8719
																				if len(subjects2) >= 1:
																					tmp192 = subjects2.popleft()
																					subst4 = Substitution(subst3)
																					try:
																						subst4.try_add_variable('i2', tmp192)
																					except ValueError:
																						pass
																					else:
																						if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																							if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																								if 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f21)(subst4):
																									if 'i2' in subst4 and 'i2.2.2_1' in subst4 and CustomConstraint(cons_f4)(subst4):
																										if 'i2' in subst4 and 'i2.2.2_2' in subst4 and CustomConstraint(cons_f50)(subst4):
																											if 'i2.2.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f10)(subst4):
																												if 'i2.2.1_1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f2025)(subst4):
																													if 'i2' in subst4 and 'i2.2.1_2' in subst4 and CustomConstraint(cons_f2026)(subst4):
																														# State 8720
																														if len(subjects2) == 0:
																															# State 8721
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['v'] = subst4['i2.2.1']
																																tmp_subst['m'] = subst4['i2.2.2']
																																tmp_subst['w'] = subst4['i2.2.1_1']
																																tmp_subst['n'] = subst4['i2.2.2_1']
																																tmp_subst['z'] = subst4['i2.2.1_2']
																																tmp_subst['q'] = subst4['i2.2.2_2']
																																tmp_subst['a'] = subst4['i2.2.0']
																																tmp_subst['p'] = subst4['i2.2']
																																tmp_subst['u'] = subst4['i2.0']
																																tmp_subst['x'] = subst4['i2']
																																# 193: Integral(u*(a*v**m*w**n*z**q)**p, x) /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f10) and (cons_f2025) and (cons_f2026)
																																yield 193, tmp_subst
																					subjects2.appendleft(tmp192)
																if len(subjects43) == 0:
																	break
																tmp189.append(subjects43.popleft())
															subjects43.extendleft(reversed(tmp189))
						if pattern_index == 3:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
									if 'i2' in subst2 and 'i2.2.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
										if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
											if 'i2.2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2025)(subst2):
												# State 8743
												if len(subjects43) >= 1:
													tmp194 = []
													tmp194.append(subjects43.popleft())
													while True:
														if len(tmp194) > 1:
															tmp195 = create_operation_expression(associative1, tmp194)
														elif len(tmp194) == 1:
															tmp195 = tmp194[0]
														else:
															assert False, "Unreachable"
														subst3 = Substitution(subst2)
														try:
															subst3.try_add_variable('i2.2', tmp195)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst3 and CustomConstraint(cons_f147)(subst3):
																if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																	# State 8744
																	if len(subjects43) == 0:
																		# State 8745
																		if len(subjects2) >= 1:
																			tmp197 = subjects2.popleft()
																			subst4 = Substitution(subst3)
																			try:
																				subst4.try_add_variable('i2', tmp197)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																					if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																						if 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f21)(subst4):
																							if 'i2' in subst4 and 'i2.2.2_1' in subst4 and CustomConstraint(cons_f4)(subst4):
																								if 'i2.2.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f10)(subst4):
																									if 'i2.2.1_1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f2025)(subst4):
																										# State 8746
																										if len(subjects2) == 0:
																											# State 8747
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['v'] = subst4['i2.2.1']
																												tmp_subst['m'] = subst4['i2.2.2']
																												tmp_subst['w'] = subst4['i2.2.1_1']
																												tmp_subst['n'] = subst4['i2.2.2_1']
																												tmp_subst['a'] = subst4['i2.2.0']
																												tmp_subst['p'] = subst4['i2.2']
																												tmp_subst['u'] = subst4['i2.0']
																												tmp_subst['x'] = subst4['i2']
																												# 194: Integral(u*(a*v**m*w**n)**p, x) /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2025)
																												yield 194, tmp_subst
																			subjects2.appendleft(tmp197)
														if len(subjects43) == 0:
															break
														tmp194.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp194))
						if pattern_index == 4:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
									if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
										if 'i2.2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2027)(subst2):
											if 'i2.2.1' in subst2 and 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f2028)(subst2):
												# State 8767
												if len(subjects43) >= 1:
													tmp199 = []
													tmp199.append(subjects43.popleft())
													while True:
														if len(tmp199) > 1:
															tmp200 = create_operation_expression(associative1, tmp199)
														elif len(tmp199) == 1:
															tmp200 = tmp199[0]
														else:
															assert False, "Unreachable"
														subst3 = Substitution(subst2)
														try:
															subst3.try_add_variable('i2.2', tmp200)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst3 and CustomConstraint(cons_f147)(subst3):
																if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																	# State 8768
																	if len(subjects43) == 0:
																		# State 8769
																		if len(subjects2) >= 1:
																			tmp202 = subjects2.popleft()
																			subst4 = Substitution(subst3)
																			try:
																				subst4.try_add_variable('i2', tmp202)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																					if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																						if 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f21)(subst4):
																							if 'i2.2.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f10)(subst4):
																								if 'i2.2.1' in subst4 and 'i2' in subst4 and 'i2.2.2' in subst4 and CustomConstraint(cons_f2028)(subst4):
																									# State 8770
																									if len(subjects2) == 0:
																										# State 8771
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst4['i2.2.1']
																											tmp_subst['m'] = subst4['i2.2.2']
																											tmp_subst['a'] = subst4['i2.2.0']
																											tmp_subst['p'] = subst4['i2.2']
																											tmp_subst['u'] = subst4['i2.0']
																											tmp_subst['x'] = subst4['i2']
																											# 195: Integral(u*(a*v**m)**p, x) /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
																											yield 195, tmp_subst
																			subjects2.appendleft(tmp202)
														if len(subjects43) == 0:
															break
														tmp199.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp199))
					subjects43.appendleft(tmp176)
				if len(subjects43) >= 1 and isinstance(subjects43[0], Add):
					tmp204 = subjects43.popleft()
					associative1 = tmp204
					associative_type1 = type(tmp204)
					subjects205 = deque(op_iter(tmp204))
					matcher = CommutativeMatcher7880.get()
					tmp206 = subjects205
					subjects205 = []
					for s in tmp206:
						matcher.add_subject(s)
					for pattern_index, subst2 in matcher.match(tmp206, subst1):
						if pattern_index == 0:
							if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
										if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
											if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
												if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f125)(subst2):
													if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1037)(subst2):
															# State 8056
															if len(subjects43) >= 1:
																tmp207 = []
																tmp207.append(subjects43.popleft())
																while True:
																	if len(tmp207) > 1:
																		tmp208 = create_operation_expression(associative1, tmp207)
																	elif len(tmp207) == 1:
																		tmp208 = tmp207[0]
																	else:
																		assert False, "Unreachable"
																	subst3 = Substitution(subst2)
																	try:
																		subst3.try_add_variable('i2.2', tmp208)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2' in subst3 and CustomConstraint(cons_f84)(subst3):
																			# State 8057
																			if len(subjects43) == 0:
																				# State 8058
																				if len(subjects2) >= 1:
																					tmp210 = subjects2.popleft()
																					subst4 = Substitution(subst3)
																					try:
																						subst4.try_add_variable('i2.2.1.2.1.1', tmp210)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.1.2.0' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f2)(subst4):
																							if 'i2.2.1.2.1.0' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f3)(subst4):
																								if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.0_1' in subst4 and CustomConstraint(cons_f7)(subst4):
																									if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.1.0_1' in subst4 and CustomConstraint(cons_f27)(subst4):
																										if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f48)(subst4):
																											if 'i2.2.1.0_1' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f125)(subst4):
																												if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.1.2' in subst4 and CustomConstraint(cons_f4)(subst4):
																													# State 8059
																													if len(subjects2) == 0:
																														# State 8060
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst4['i2.2.1.2.1.1']
																															tmp_subst['n'] = subst4['i2.2.1.2.1.2']
																															tmp_subst['b'] = subst4['i2.2.1.2.1.0']
																															tmp_subst['a'] = subst4['i2.2.1.2.0']
																															tmp_subst['e'] = subst4['i2.2.1.0']
																															tmp_subst['d'] = subst4['i2.2.1.2.1.0_1']
																															tmp_subst['c'] = subst4['i2.2.1.2.0_1']
																															tmp_subst['f'] = subst4['i2.2.1.0_1']
																															tmp_subst['m'] = subst4['i2.2']
																															tmp_subst['u'] = subst4['i2.0']
																															# 164: Integral(u*(e*sqrt(a + b*x**n) + f*sqrt(c + d*x**n))**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1037)
																															yield 164, tmp_subst
																					subjects2.appendleft(tmp210)
																	if len(subjects43) == 0:
																		break
																	tmp207.append(subjects43.popleft())
																subjects43.extendleft(reversed(tmp207))
						if pattern_index == 1:
							if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
										if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
											if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
												if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f125)(subst2):
													if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1036)(subst2):
															# State 8223
															if len(subjects43) >= 1:
																tmp212 = []
																tmp212.append(subjects43.popleft())
																while True:
																	if len(tmp212) > 1:
																		tmp213 = create_operation_expression(associative1, tmp212)
																	elif len(tmp212) == 1:
																		tmp213 = tmp212[0]
																	else:
																		assert False, "Unreachable"
																	subst3 = Substitution(subst2)
																	try:
																		subst3.try_add_variable('i2.2', tmp213)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2' in subst3 and CustomConstraint(cons_f84)(subst3):
																			# State 8224
																			if len(subjects43) == 0:
																				# State 8225
																				if len(subjects2) >= 1:
																					tmp215 = subjects2.popleft()
																					subst4 = Substitution(subst3)
																					try:
																						subst4.try_add_variable('i2.2.1.2.1.1', tmp215)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.1.2.0' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f2)(subst4):
																							if 'i2.2.1.2.1.0' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f3)(subst4):
																								if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.0_1' in subst4 and CustomConstraint(cons_f7)(subst4):
																									if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.1.0_1' in subst4 and CustomConstraint(cons_f27)(subst4):
																										if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f48)(subst4):
																											if 'i2.2.1.0_1' in subst4 and 'i2.2.1.2.1.1' in subst4 and CustomConstraint(cons_f125)(subst4):
																												if 'i2.2.1.2.1.1' in subst4 and 'i2.2.1.2.1.2' in subst4 and CustomConstraint(cons_f4)(subst4):
																													# State 8226
																													if len(subjects2) == 0:
																														# State 8227
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst4['i2.2.1.2.1.1']
																															tmp_subst['n'] = subst4['i2.2.1.2.1.2']
																															tmp_subst['b'] = subst4['i2.2.1.2.1.0']
																															tmp_subst['a'] = subst4['i2.2.1.2.0']
																															tmp_subst['e'] = subst4['i2.2.1.0']
																															tmp_subst['d'] = subst4['i2.2.1.2.1.0_1']
																															tmp_subst['c'] = subst4['i2.2.1.2.0_1']
																															tmp_subst['f'] = subst4['i2.2.1.0_1']
																															tmp_subst['m'] = subst4['i2.2']
																															tmp_subst['u'] = subst4['i2.0']
																															# 165: Integral(u*(e*sqrt(a + b*x**n) + f*sqrt(c + d*x**n))**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1036)
																															yield 165, tmp_subst
																					subjects2.appendleft(tmp215)
																	if len(subjects43) == 0:
																		break
																	tmp212.append(subjects43.popleft())
																subjects43.extendleft(reversed(tmp212))
						if pattern_index == 2:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
									if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
										if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.2.0' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1244)(subst2):
											if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6950)(subst2):
												# State 8377
												if len(subjects43) >= 1:
													tmp217 = []
													tmp217.append(subjects43.popleft())
													while True:
														if len(tmp217) > 1:
															tmp218 = create_operation_expression(associative1, tmp217)
														elif len(tmp217) == 1:
															tmp218 = tmp217[0]
														else:
															assert False, "Unreachable"
														subst3 = Substitution(subst2)
														try:
															subst3.try_add_variable('i2.2', tmp218)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																if 'i2.2' in subst3 and 'i2.2.1.2' in subst3 and 'i2.2.0' in subst3 and 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f1244)(subst3):
																	if 'i2.2' in subst3 and 'i2.2.1.2' in subst3 and 'i2.0' in subst3 and 'i2.2.0' in subst3 and 'i2.2.1.1' in subst3 and 'i2' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(With6950)(subst3):
																		# State 8378
																		if len(subjects43) == 0:
																			# State 8379
																			if len(subjects2) >= 1:
																				tmp220 = subjects2.popleft()
																				subst4 = Substitution(subst3)
																				try:
																					subst4.try_add_variable('i2', tmp220)
																				except ValueError:
																					pass
																				else:
																					if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																						if 'i2.2.1.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f4)(subst4):
																							if 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
																								if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																									if 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.2.0' in subst4 and 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f1244)(subst4):
																										if 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.0' in subst4 and 'i2.2.0' in subst4 and 'i2.2.1.1' in subst4 and 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(With6950)(subst4):
																											# State 8380
																											if len(subjects2) == 0:
																												# State 8381
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['y'] = subst4['i2.2.1.1']
																													tmp_subst['n'] = subst4['i2.2.1.2']
																													tmp_subst['b'] = subst4['i2.2.1.0']
																													tmp_subst['a'] = subst4['i2.2.0']
																													tmp_subst['p'] = subst4['i2.2']
																													tmp_subst['u'] = subst4['i2.0']
																													tmp_subst['x'] = subst4['i2']
																													# 171: Integral(u*(a + b*y**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
																													yield 171, tmp_subst
																				subjects2.appendleft(tmp220)
														if len(subjects43) == 0:
															break
														tmp217.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp217))
						if pattern_index == 3:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
										if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
											if 'i2.2.1.2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f46)(subst2):
												if 'i2.2.1.1' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f2009)(subst2):
													if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(With6952)(subst2):
														# State 8431
														if len(subjects43) >= 1:
															tmp222 = []
															tmp222.append(subjects43.popleft())
															while True:
																if len(tmp222) > 1:
																	tmp223 = create_operation_expression(associative1, tmp222)
																elif len(tmp222) == 1:
																	tmp223 = tmp222[0]
																else:
																	assert False, "Unreachable"
																subst3 = Substitution(subst2)
																try:
																	subst3.try_add_variable('i2.2', tmp223)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																		if 'i2.2.1.0_1' in subst3 and 'i2.2' in subst3 and 'i2.2.1.2' in subst3 and 'i2.0' in subst3 and 'i2.2.1.1_1' in subst3 and 'i2.2.1.2_1' in subst3 and 'i2.2.1.0' in subst3 and 'i2.2.1.1' in subst3 and 'i2' in subst3 and 'i2.2.0' in subst3 and CustomConstraint(With6952)(subst3):
																			# State 8432
																			if len(subjects43) == 0:
																				# State 8433
																				if len(subjects2) >= 1:
																					tmp225 = subjects2.popleft()
																					subst4 = Substitution(subst3)
																					try:
																						subst4.try_add_variable('i2', tmp225)
																					except ValueError:
																						pass
																					else:
																						if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																							if 'i2.2.1.0_1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f3)(subst4):
																								if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																									if 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f7)(subst4):
																										if 'i2' in subst4 and 'i2.2.1.2_1' in subst4 and CustomConstraint(cons_f4)(subst4):
																											if 'i2.2.1.0_1' in subst4 and 'i2.2' in subst4 and 'i2.2.1.2' in subst4 and 'i2.0' in subst4 and 'i2.2.1.1_1' in subst4 and 'i2.2.1.2_1' in subst4 and 'i2.2.1.0' in subst4 and 'i2.2.1.1' in subst4 and 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(With6952)(subst4):
																												# State 8434
																												if len(subjects2) == 0:
																													# State 8435
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['v'] = subst4['i2.2.1.1']
																														tmp_subst['n2'] = subst4['i2.2.1.2']
																														tmp_subst['c'] = subst4['i2.2.1.0']
																														tmp_subst['y'] = subst4['i2.2.1.1_1']
																														tmp_subst['n'] = subst4['i2.2.1.2_1']
																														tmp_subst['b'] = subst4['i2.2.1.0_1']
																														tmp_subst['a'] = subst4['i2.2.0']
																														tmp_subst['p'] = subst4['i2.2']
																														tmp_subst['u'] = subst4['i2.0']
																														tmp_subst['x'] = subst4['i2']
																														# 173: Integral(u*(a + b*y**n + c*v**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (With6952)
																														yield 173, tmp_subst
																					subjects2.appendleft(tmp225)
																if len(subjects43) == 0:
																	break
																tmp222.append(subjects43.popleft())
															subjects43.extendleft(reversed(tmp222))
						if pattern_index == 4:
							if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f5)(subst2):
										if 'i2.2.1.2' in subst2 and CustomConstraint(cons_f196)(subst2):
											if 'i2.2.1.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2029)(subst2):
												# State 8794
												if len(subjects43) >= 1:
													tmp227 = []
													tmp227.append(subjects43.popleft())
													while True:
														if len(tmp227) > 1:
															tmp228 = create_operation_expression(associative1, tmp227)
														elif len(tmp227) == 1:
															tmp228 = tmp227[0]
														else:
															assert False, "Unreachable"
														subst3 = Substitution(subst2)
														try:
															subst3.try_add_variable('i2.2', tmp228)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst3 and 'i2.2.1.1' in subst3 and CustomConstraint(cons_f5)(subst3):
																if 'i2.2' in subst3 and CustomConstraint(cons_f667)(subst3):
																	# State 8795
																	if len(subjects43) == 0:
																		# State 8796
																		if len(subjects2) >= 1:
																			tmp230 = subjects2.popleft()
																			subst4 = Substitution(subst3)
																			try:
																				subst4.try_add_variable('i2.2.1.1', tmp230)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.1.1' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																					if 'i2.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
																						if 'i2.2' in subst4 and 'i2.2.1.1' in subst4 and CustomConstraint(cons_f5)(subst4):
																							if 'i2.2.1.1' in subst4 and 'i2.0' in subst4 and CustomConstraint(cons_f2029)(subst4):
																								# State 8797
																								if len(subjects2) == 0:
																									# State 8798
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst4['i2.2.1.1']
																										tmp_subst['n'] = subst4['i2.2.1.2']
																										tmp_subst['b'] = subst4['i2.2.1.0']
																										tmp_subst['a'] = subst4['i2.2.0']
																										tmp_subst['p'] = subst4['i2.2']
																										tmp_subst['u'] = subst4['i2.0']
																										# 196: Integral(u*(a + b*x**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
																										yield 196, tmp_subst
																			subjects2.appendleft(tmp230)
														if len(subjects43) == 0:
															break
														tmp227.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp227))
						if pattern_index == 5:
							if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2.1.2' in subst2 and CustomConstraint(cons_f196)(subst2):
										if 'i2.2.1.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f840)(subst2):
											if 'i2.2.1.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2030)(subst2):
												# State 8807
												if len(subjects43) >= 1:
													tmp232 = []
													tmp232.append(subjects43.popleft())
													while True:
														if len(tmp232) > 1:
															tmp233 = create_operation_expression(associative1, tmp232)
														elif len(tmp232) == 1:
															tmp233 = tmp232[0]
														else:
															assert False, "Unreachable"
														subst3 = Substitution(subst2)
														try:
															subst3.try_add_variable('i2.2', tmp233)
														except ValueError:
															pass
														else:
															if 'i2.2' in subst3 and CustomConstraint(cons_f147)(subst3):
																if 'i2.2' in subst3 and 'i2' in subst3 and CustomConstraint(cons_f5)(subst3):
																	# State 8808
																	if len(subjects43) == 0:
																		# State 8809
																		if len(subjects2) >= 1:
																			tmp235 = subjects2.popleft()
																			subst4 = Substitution(subst3)
																			try:
																				subst4.try_add_variable('i2', tmp235)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst4 and 'i2.2.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																					if 'i2' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f3)(subst4):
																						if 'i2.2' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f5)(subst4):
																							if 'i2.2.1.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f840)(subst4):
																								if 'i2.2.1.1' in subst4 and 'i2' in subst4 and CustomConstraint(cons_f2030)(subst4):
																									# State 8810
																									if len(subjects2) == 0:
																										# State 8811
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst4['i2.2.1.1']
																											tmp_subst['n'] = subst4['i2.2.1.2']
																											tmp_subst['b'] = subst4['i2.2.1.0']
																											tmp_subst['a'] = subst4['i2.2.0']
																											tmp_subst['p'] = subst4['i2.2']
																											tmp_subst['u'] = subst4['i2.0']
																											tmp_subst['x'] = subst4['i2']
																											# 197: Integral(u*(a + b*v**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
																											yield 197, tmp_subst
																			subjects2.appendleft(tmp235)
														if len(subjects43) == 0:
															break
														tmp232.append(subjects43.popleft())
													subjects43.extendleft(reversed(tmp232))
						if pattern_index == 6:
							if 'i2.2.1.2' in subst2 and CustomConstraint(cons_f196)(subst2):
								if 'i2.2.0' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f2)(subst2):
									if 'i2.2.1.0' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f3)(subst2):
										if 'i2.2.1.2_1' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f21)(subst2):
											if 'i2.2' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f5)(subst2):
												if 'i2.2.1.1' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f840)(subst2):
													# State 8830
													if len(subjects43) >= 1:
														tmp237 = []
														tmp237.append(subjects43.popleft())
														while True:
															if len(tmp237) > 1:
																tmp238 = create_operation_expression(associative1, tmp237)
															elif len(tmp237) == 1:
																tmp238 = tmp237[0]
															else:
																assert False, "Unreachable"
															subst3 = Substitution(subst2)
															try:
																subst3.try_add_variable('i2.2', tmp238)
															except ValueError:
																pass
															else:
																if 'i2.2' in subst3 and CustomConstraint(cons_f147)(subst3):
																	if 'i2.2' in subst3 and 'i2.2.1.1_1' in subst3 and CustomConstraint(cons_f5)(subst3):
																		# State 8831
																		if len(subjects43) == 0:
																			# State 8832
																			if len(subjects2) >= 1:
																				tmp240 = subjects2.popleft()
																				subst4 = Substitution(subst3)
																				try:
																					subst4.try_add_variable('i2.2.1.1_1', tmp240)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f2)(subst4):
																						if 'i2.2.1.0' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f3)(subst4):
																							if 'i2.2.1.2_1' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f21)(subst4):
																								if 'i2.2' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f5)(subst4):
																									if 'i2.2.1.1' in subst4 and 'i2.2.1.1_1' in subst4 and CustomConstraint(cons_f840)(subst4):
																										# State 8833
																										if len(subjects2) == 0:
																											# State 8834
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['v'] = subst4['i2.2.1.1']
																												tmp_subst['n'] = subst4['i2.2.1.2']
																												tmp_subst['x'] = subst4['i2.2.1.1_1']
																												tmp_subst['m'] = subst4['i2.2.1.2_1']
																												tmp_subst['b'] = subst4['i2.2.1.0']
																												tmp_subst['a'] = subst4['i2.2.0']
																												tmp_subst['p'] = subst4['i2.2']
																												tmp_subst['u'] = subst4['i2.0']
																												# 198: Integral(u*(a + b*v**n*x**m)**p, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840)
																												yield 198, tmp_subst
																				subjects2.appendleft(tmp240)
															if len(subjects43) == 0:
																break
															tmp237.append(subjects43.popleft())
														subjects43.extendleft(reversed(tmp237))
						if pattern_index == 7:
							if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f21)(subst2):
										if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f52)(subst2):
											if 'i2.2.1.1' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f800)(subst2):
												if 'i2.2.1.2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f2031)(subst2):
													if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6978)(subst2):
														# State 8859
														if len(subjects43) >= 1:
															tmp242 = []
															tmp242.append(subjects43.popleft())
															while True:
																if len(tmp242) > 1:
																	tmp243 = create_operation_expression(associative1, tmp242)
																elif len(tmp242) == 1:
																	tmp243 = tmp242[0]
																else:
																	assert False, "Unreachable"
																subst3 = Substitution(subst2)
																try:
																	subst3.try_add_variable('i2.2', tmp243)
																except ValueError:
																	pass
																else:
																	if 'i2.2' in subst3 and CustomConstraint(cons_f18)(subst3):
																		if 'i2.2' in subst3 and 'i2.2.1.1' in subst3 and CustomConstraint(cons_f21)(subst3):
																			if 'i2.2' in subst3 and 'i2.2.1.0_1' in subst3 and 'i2.2.1.2' in subst3 and 'i2.0' in subst3 and 'i2.2.1.2_1' in subst3 and 'i2.2.1.1' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(With6978)(subst3):
																				# State 8860
																				if len(subjects43) == 0:
																					# State 8861
																					if len(subjects2) >= 1:
																						tmp245 = subjects2.popleft()
																						subst4 = Substitution(subst3)
																						try:
																							subst4.try_add_variable('i2.2.1.1', tmp245)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(cons_f2)(subst4):
																								if 'i2.2.1.0_1' in subst4 and 'i2.2.1.1' in subst4 and CustomConstraint(cons_f3)(subst4):
																									if 'i2.2' in subst4 and 'i2.2.1.1' in subst4 and CustomConstraint(cons_f21)(subst4):
																										if 'i2.2.1.1' in subst4 and 'i2.2.1.2' in subst4 and CustomConstraint(cons_f52)(subst4):
																											if 'i2.2.1.1' in subst4 and 'i2.2.1.2_1' in subst4 and CustomConstraint(cons_f800)(subst4):
																												if 'i2.2' in subst4 and 'i2.2.1.0_1' in subst4 and 'i2.2.1.2' in subst4 and 'i2.0' in subst4 and 'i2.2.1.2_1' in subst4 and 'i2.2.1.1' in subst4 and 'i2.2.1.0' in subst4 and CustomConstraint(With6978)(subst4):
																													# State 8862
																													if len(subjects2) == 0:
																														# State 8863
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst4['i2.2.1.1']
																															tmp_subst['r'] = subst4['i2.2.1.2']
																															tmp_subst['a'] = subst4['i2.2.1.0']
																															tmp_subst['s'] = subst4['i2.2.1.2_1']
																															tmp_subst['b'] = subst4['i2.2.1.0_1']
																															tmp_subst['m'] = subst4['i2.2']
																															tmp_subst['u'] = subst4['i2.0']
																															# 199: Integral(u*(a*x**r + b*x**s)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f18) and (cons_f2031) and (With6978)
																															yield 199, tmp_subst
																						subjects2.appendleft(tmp245)
																if len(subjects43) == 0:
																	break
																tmp242.append(subjects43.popleft())
															subjects43.extendleft(reversed(tmp242))
						if pattern_index == 8:
							if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1' in subst2 and CustomConstraint(cons_f2)(subst2):
								if 'i2.2.1.2.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
									if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1' in subst2 and CustomConstraint(cons_f7)(subst2):
										if 'i2.2.1.2.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f21)(subst2):
											if 'i2.2.1.2.1' in subst2 and 'i2.2.1.2.2' in subst2 and CustomConstraint(cons_f4)(subst2):
												if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.0' in subst2 and 'i2.2.1.2' in subst2 and 'i2.2.1.2.2' in subst2 and 'i2.2.1.2.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1854)(subst2):
													# State 8951
													if len(subjects43) >= 1 and subjects43[0] == -1:
														tmp247 = subjects43.popleft()
														# State 8952
														if len(subjects43) == 0:
															# State 8953
															if len(subjects2) >= 1:
																tmp248 = subjects2.popleft()
																subst3 = Substitution(subst2)
																try:
																	subst3.try_add_variable('i2.2.1.2.1', tmp248)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.0_1' in subst3 and 'i2.2.1.2.1' in subst3 and CustomConstraint(cons_f2)(subst3):
																		if 'i2.2.1.2.1' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
																			if 'i2.2.1.2.0' in subst3 and 'i2.2.1.2.1' in subst3 and CustomConstraint(cons_f7)(subst3):
																				if 'i2.2.1.2.1' in subst3 and 'i2.2.1.2' in subst3 and CustomConstraint(cons_f21)(subst3):
																					if 'i2.2.1.2.1' in subst3 and 'i2.2.1.2.2' in subst3 and CustomConstraint(cons_f4)(subst3):
																						if 'i2.2.1.0_1' in subst3 and 'i2.2.1.2.0' in subst3 and 'i2.2.1.2' in subst3 and 'i2.2.1.2.2' in subst3 and 'i2.2.1.2.1' in subst3 and 'i2.2.1.0' in subst3 and CustomConstraint(cons_f1854)(subst3):
																							# State 8954
																							if len(subjects2) == 0:
																								# State 8955
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst3['i2.2.1.2.1']
																									tmp_subst['n'] = subst3['i2.2.1.2.2']
																									tmp_subst['c'] = subst3['i2.2.1.2.0']
																									tmp_subst['b'] = subst3['i2.2.1.0']
																									tmp_subst['m'] = subst3['i2.2.1.2']
																									tmp_subst['a'] = subst3['i2.2.1.0_1']
																									tmp_subst['u'] = subst3['i2.0']
																									# 204: Integral(u/(a*x**m + b*sqrt(c*x**n)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
																									yield 204, tmp_subst
																subjects2.appendleft(tmp248)
														subjects43.appendleft(tmp247)
					subjects43.appendleft(tmp204)
				subjects2.appendleft(tmp42)
			if len(subjects2) >= 1 and isinstance(subjects2[0], Add):
				tmp250 = subjects2.popleft()
				associative1 = tmp250
				associative_type1 = type(tmp250)
				subjects251 = deque(op_iter(tmp250))
				matcher = CommutativeMatcher8320.get()
				tmp252 = subjects251
				subjects251 = []
				for s in tmp252:
					matcher.add_subject(s)
				for pattern_index, subst2 in matcher.match(tmp252, subst1):
					if pattern_index == 0:
						if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
							if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
								if 'i2' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
									if 'i2' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.0' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f1831)(subst2):
										if 'i2' in subst2 and 'i2.0' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.2' in subst2 and 'i2.1.1.0' in subst2 and 'i2.1.1.1' in subst2 and CustomConstraint(With6949)(subst2):
											# State 8333
											if len(subjects2) >= 1:
												tmp253 = []
												tmp253.append(subjects2.popleft())
												while True:
													if len(tmp253) > 1:
														tmp254 = create_operation_expression(associative1, tmp253)
													elif len(tmp253) == 1:
														tmp254 = tmp253[0]
													else:
														assert False, "Unreachable"
													subst3 = Substitution(subst2)
													try:
														subst3.try_add_variable('i2', tmp254)
													except ValueError:
														pass
													else:
														if 'i2' in subst3 and 'i2.1.0' in subst3 and CustomConstraint(cons_f2)(subst3):
															if 'i2' in subst3 and 'i2.1.1.0' in subst3 and CustomConstraint(cons_f3)(subst3):
																if 'i2' in subst3 and 'i2.1.1.2' in subst3 and CustomConstraint(cons_f4)(subst3):
																	if 'i2' in subst3 and 'i2.1.0' in subst3 and 'i2.1.1.0' in subst3 and 'i2.1.1.2' in subst3 and CustomConstraint(cons_f1831)(subst3):
																		if 'i2' in subst3 and 'i2.0' in subst3 and 'i2.1.0' in subst3 and 'i2.1.1.2' in subst3 and 'i2.1.1.0' in subst3 and 'i2.1.1.1' in subst3 and CustomConstraint(With6949)(subst3):
																			# State 8334
																			if len(subjects2) == 0:
																				# State 8335
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['y'] = subst3['i2.1.1.1']
																					tmp_subst['n'] = subst3['i2.1.1.2']
																					tmp_subst['b'] = subst3['i2.1.1.0']
																					tmp_subst['a'] = subst3['i2.1.0']
																					tmp_subst['u'] = subst3['i2.0']
																					tmp_subst['x'] = subst3['i2']
																					# 170: Integral(u*(a + b*y**n), x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f1831) and (With6949)
																					yield 170, tmp_subst
													if len(subjects2) == 0:
														break
													tmp253.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp253))
				subjects2.appendleft(tmp250)
		if len(subjects2) >= 1:
			tmp256 = subjects2.popleft()
			subst1 = Substitution(subst0)
			try:
				subst1.try_add_variable('i1', tmp256)
			except ValueError:
				pass
			else:
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6942)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp258 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp258)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6942)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 163: Integral(u, x) /; (With6942)
										yield 163, tmp_subst
						subjects2.appendleft(tmp258)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6970)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp260 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp260)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6970)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 191: Integral(u, x) /; (With6970)
										yield 191, tmp_subst
						subjects2.appendleft(tmp260)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6971)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp262 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp262)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6971)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 192: Integral(u, x) /; (With6971)
										yield 192, tmp_subst
						subjects2.appendleft(tmp262)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6984)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp264 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp264)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6984)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 205: Integral(u, x) /; (With6984)
										yield 205, tmp_subst
						subjects2.appendleft(tmp264)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f2034)(subst1):
					if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6988)(subst1):
						# State 7876
						if len(subjects2) >= 1:
							tmp266 = subjects2.popleft()
							subst2 = Substitution(subst1)
							try:
								subst2.try_add_variable('i2', tmp266)
							except ValueError:
								pass
							else:
								if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2034)(subst2):
									if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6988)(subst2):
										# State 7877
										if len(subjects2) == 0:
											# State 7878
											if len(subjects) == 0:
												tmp_subst = Substitution()
												tmp_subst['u'] = subst2['i1']
												tmp_subst['x'] = subst2['i2']
												# 209: Integral(u, x) /; (cons_f2034) and (With6988)
												yield 209, tmp_subst
							subjects2.appendleft(tmp266)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6993)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp268 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp268)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6993)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 214: Integral(u, x) /; (With6993)
										yield 214, tmp_subst
						subjects2.appendleft(tmp268)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6994)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp270 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp270)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6994)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 215: Integral(u, x) /; (With6994)
										yield 215, tmp_subst
						subjects2.appendleft(tmp270)
				if 'i1' in subst1 and 'i2' in subst1 and CustomConstraint(With6997)(subst1):
					# State 7876
					if len(subjects2) >= 1:
						tmp272 = subjects2.popleft()
						subst2 = Substitution(subst1)
						try:
							subst2.try_add_variable('i2', tmp272)
						except ValueError:
							pass
						else:
							if 'i1' in subst2 and 'i2' in subst2 and CustomConstraint(With6997)(subst2):
								# State 7877
								if len(subjects2) == 0:
									# State 7878
									if len(subjects) == 0:
										tmp_subst = Substitution()
										tmp_subst['u'] = subst2['i1']
										tmp_subst['x'] = subst2['i2']
										# 218: Integral(u, x) /; (With6997)
										yield 218, tmp_subst
						subjects2.appendleft(tmp272)
				# State 7876
				if len(subjects2) >= 1:
					tmp274 = subjects2.popleft()
					subst2 = Substitution(subst1)
					try:
						subst2.try_add_variable('i2', tmp274)
					except ValueError:
						pass
					else:
						# State 7877
						if len(subjects2) == 0:
							# State 7878
							if len(subjects) == 0:
								tmp_subst = Substitution()
								tmp_subst['u'] = subst2['i1']
								tmp_subst['x'] = subst2['i2']
								# 219: Integral(u, x)
								yield 219, tmp_subst
					subjects2.appendleft(tmp274)
			subjects2.appendleft(tmp256)
		if len(subjects2) >= 1 and isinstance(subjects2[0], Mul):
			tmp276 = subjects2.popleft()
			associative1 = tmp276
			associative_type1 = type(tmp276)
			subjects277 = deque(op_iter(tmp276))
			matcher = CommutativeMatcher5705.get()
			tmp278 = subjects277
			subjects277 = []
			for s in tmp278:
				matcher.add_subject(s)
			for pattern_index, subst1 in matcher.match(tmp278, subst0):
				if pattern_index == 0:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										# State 5723
										if len(subjects2) >= 1:
											tmp279 = []
											tmp279.append(subjects2.popleft())
											while True:
												if len(tmp279) > 1:
													tmp280 = create_operation_expression(associative1, tmp279)
												elif len(tmp279) == 1:
													tmp280 = tmp279[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp280)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5724
																	if len(subjects2) == 0:
																		# State 5725
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 5: Integral(1/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
																			yield 5, tmp_subst
												if len(subjects2) == 0:
													break
												tmp279.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp279))
				if pattern_index == 1:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										# State 5752
										if len(subjects2) >= 1:
											tmp282 = []
											tmp282.append(subjects2.popleft())
											while True:
												if len(tmp282) > 1:
													tmp283 = create_operation_expression(associative1, tmp282)
												elif len(tmp282) == 1:
													tmp283 = tmp282[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp283)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5753
																	if len(subjects2) == 0:
																		# State 5754
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 6: Integral(1/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
																			yield 6, tmp_subst
												if len(subjects2) == 0:
													break
												tmp282.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp282))
				if pattern_index == 2:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f72)(subst1):
													if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
														# State 5778
														if len(subjects2) >= 1:
															tmp285 = []
															tmp285.append(subjects2.popleft())
															while True:
																if len(tmp285) > 1:
																	tmp286 = create_operation_expression(associative1, tmp285)
																elif len(tmp285) == 1:
																	tmp286 = tmp285[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp286)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																						if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																							# State 5779
																							if len(subjects2) == 0:
																								# State 5780
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.0']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['m'] = subst2['i2.2']
																									tmp_subst['d'] = subst2['i2.2.1.0_2']
																									tmp_subst['c'] = subst2['i2.2.0_1']
																									tmp_subst['n'] = subst2['i2.2_1']
																									# 7: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f72) and (cons_f66)
																									yield 7, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp285.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp285))
				if pattern_index == 3:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f73)(subst1):
											# State 5785
											if len(subjects2) >= 1:
												tmp288 = []
												tmp288.append(subjects2.popleft())
												while True:
													if len(tmp288) > 1:
														tmp289 = create_operation_expression(associative1, tmp288)
													elif len(tmp288) == 1:
														tmp289 = tmp288[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp289)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5786
																		if len(subjects2) == 0:
																			# State 5787
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['m'] = subst2['i2.2']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 8: Integral((a + b*x)**m*(c + d*x)**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f73)
																				yield 8, tmp_subst
													if len(subjects2) == 0:
														break
													tmp288.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp288))
				if pattern_index == 4:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										# State 5792
										if len(subjects2) >= 1:
											tmp291 = []
											tmp291.append(subjects2.popleft())
											while True:
												if len(tmp291) > 1:
													tmp292 = create_operation_expression(associative1, tmp291)
												elif len(tmp291) == 1:
													tmp292 = tmp291[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp292)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5793
																	if len(subjects2) == 0:
																		# State 5794
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 9: Integral(1/((a + b*x)**(3/2)*(c + d*x)**(3/2)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
																			yield 9, tmp_subst
												if len(subjects2) == 0:
													break
												tmp291.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp291))
				if pattern_index == 5:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f74)(subst1):
											# State 5795
											if len(subjects2) >= 1:
												tmp294 = []
												tmp294.append(subjects2.popleft())
												while True:
													if len(tmp294) > 1:
														tmp295 = create_operation_expression(associative1, tmp294)
													elif len(tmp294) == 1:
														tmp295 = tmp294[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp295)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5796
																		if len(subjects2) == 0:
																			# State 5797
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['m'] = subst2['i2.2']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 10: Integral((a + b*x)**m*(c + d*x)**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f74)
																				yield 10, tmp_subst
													if len(subjects2) == 0:
														break
													tmp294.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp294))
				if pattern_index == 6:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f75)(subst1):
												# State 5807
												if len(subjects2) >= 1:
													tmp297 = []
													tmp297.append(subjects2.popleft())
													while True:
														if len(tmp297) > 1:
															tmp298 = create_operation_expression(associative1, tmp297)
														elif len(tmp297) == 1:
															tmp298 = tmp297[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp298)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																				# State 5808
																				if len(subjects2) == 0:
																					# State 5809
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						# 11: Integral((a + b*x)**m*(c + d*x)**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f75)
																						yield 11, tmp_subst
														if len(subjects2) == 0:
															break
														tmp297.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp297))
				if pattern_index == 7:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2.0' in subst1 and CustomConstraint(cons_f43)(subst1):
											if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f76)(subst1):
												# State 5814
												if len(subjects2) >= 1:
													tmp300 = []
													tmp300.append(subjects2.popleft())
													while True:
														if len(tmp300) > 1:
															tmp301 = create_operation_expression(associative1, tmp300)
														elif len(tmp300) == 1:
															tmp301 = tmp300[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp301)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			# State 5815
																			if len(subjects2) == 0:
																				# State 5816
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['x'] = subst2['i2.2.1.0']
																					tmp_subst['b'] = subst2['i2.2.1.0_1']
																					tmp_subst['a'] = subst2['i2.2.0']
																					tmp_subst['d'] = subst2['i2.2.1.0_2']
																					tmp_subst['c'] = subst2['i2.2.0_1']
																					# 12: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f43) and (cons_f76)
																					yield 12, tmp_subst
														if len(subjects2) == 0:
															break
														tmp300.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp300))
				if pattern_index == 8:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										# State 5817
										if len(subjects2) >= 1:
											tmp303 = []
											tmp303.append(subjects2.popleft())
											while True:
												if len(tmp303) > 1:
													tmp304 = create_operation_expression(associative1, tmp303)
												elif len(tmp303) == 1:
													tmp304 = tmp303[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp304)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5818
																	if len(subjects2) == 0:
																		# State 5819
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 13: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70)
																			yield 13, tmp_subst
												if len(subjects2) == 0:
													break
												tmp303.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp303))
				if pattern_index == 9:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f77)(subst1):
												# State 5820
												if len(subjects2) >= 1:
													tmp306 = []
													tmp306.append(subjects2.popleft())
													while True:
														if len(tmp306) > 1:
															tmp307 = create_operation_expression(associative1, tmp306)
														elif len(tmp306) == 1:
															tmp307 = tmp306[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp307)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																				# State 5821
																				if len(subjects2) == 0:
																					# State 5822
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						# 14: Integral((a + b*x)**m*(c + d*x)**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f70) and (cons_f77)
																						yield 14, tmp_subst
														if len(subjects2) == 0:
															break
														tmp306.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp306))
				if pattern_index == 10:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f78)(subst1):
											# State 5827
											if len(subjects2) >= 1:
												tmp309 = []
												tmp309.append(subjects2.popleft())
												while True:
													if len(tmp309) > 1:
														tmp310 = create_operation_expression(associative1, tmp309)
													elif len(tmp309) == 1:
														tmp310 = tmp309[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp310)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5828
																		if len(subjects2) == 0:
																			# State 5829
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 15: Integral(1/((a + b*x)**(5/4)*(c + d*x)**(1/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f78)
																				yield 15, tmp_subst
													if len(subjects2) == 0:
														break
													tmp309.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp309))
				if pattern_index == 11:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f78)(subst1):
											# State 5832
											if len(subjects2) >= 1:
												tmp312 = []
												tmp312.append(subjects2.popleft())
												while True:
													if len(tmp312) > 1:
														tmp313 = create_operation_expression(associative1, tmp312)
													elif len(tmp312) == 1:
														tmp313 = tmp312[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp313)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5833
																		if len(subjects2) == 0:
																			# State 5834
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 16: Integral(1/((a + b*x)**(9/4)*(c + d*x)**(1/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f78)
																				yield 16, tmp_subst
													if len(subjects2) == 0:
														break
													tmp312.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp312))
				if pattern_index == 12:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f79)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f80)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f81)(subst1):
													# State 5835
													if len(subjects2) >= 1:
														tmp315 = []
														tmp315.append(subjects2.popleft())
														while True:
															if len(tmp315) > 1:
																tmp316 = create_operation_expression(associative1, tmp315)
															elif len(tmp315) == 1:
																tmp316 = tmp315[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp316)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				# State 5836
																				if len(subjects2) == 0:
																					# State 5837
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						tmp_subst['n'] = subst2['i2.2_1']
																						# 17: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f79) and (cons_f80) and (cons_f81)
																						yield 17, tmp_subst
															if len(subjects2) == 0:
																break
															tmp315.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp315))
				if pattern_index == 13:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f79)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f80)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f82)(subst1):
													# State 5838
													if len(subjects2) >= 1:
														tmp318 = []
														tmp318.append(subjects2.popleft())
														while True:
															if len(tmp318) > 1:
																tmp319 = create_operation_expression(associative1, tmp318)
															elif len(tmp318) == 1:
																tmp319 = tmp318[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp319)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				# State 5839
																				if len(subjects2) == 0:
																					# State 5840
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						tmp_subst['n'] = subst2['i2.2_1']
																						# 18: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f70) and (cons_f79) and (cons_f80) and (cons_f82)
																						yield 18, tmp_subst
															if len(subjects2) == 0:
																break
															tmp318.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp318))
				if pattern_index == 14:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f62)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f83)(subst1):
													# State 5862
													if len(subjects2) >= 1:
														tmp321 = []
														tmp321.append(subjects2.popleft())
														while True:
															if len(tmp321) > 1:
																tmp322 = create_operation_expression(associative1, tmp321)
															elif len(tmp321) == 1:
																tmp322 = tmp321[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp322)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																					# State 5863
																					if len(subjects2) == 0:
																						# State 5864
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['m'] = subst2['i2.2']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['n'] = subst2['i2.2_1']
																							# 19: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f62) and (cons_f83)
																							yield 19, tmp_subst
															if len(subjects2) == 0:
																break
															tmp321.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp321))
				if pattern_index == 15:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f84)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f85)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f86)(subst1):
														# State 5865
														if len(subjects2) >= 1:
															tmp324 = []
															tmp324.append(subjects2.popleft())
															while True:
																if len(tmp324) > 1:
																	tmp325 = create_operation_expression(associative1, tmp324)
																elif len(tmp324) == 1:
																	tmp325 = tmp324[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp325)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						# State 5866
																						if len(subjects2) == 0:
																							# State 5867
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['m'] = subst2['i2.2']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['n'] = subst2['i2.2_1']
																								# 20: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f84) and (cons_f85) and (cons_f86)
																								yield 20, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp324.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp324))
				if pattern_index == 16:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f87)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f88)(subst1):
												# State 5874
												if len(subjects2) >= 1:
													tmp327 = []
													tmp327.append(subjects2.popleft())
													while True:
														if len(tmp327) > 1:
															tmp328 = create_operation_expression(associative1, tmp327)
														elif len(tmp327) == 1:
															tmp328 = tmp327[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp328)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			# State 5875
																			if len(subjects2) == 0:
																				# State 5876
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['x'] = subst2['i2.2.1.0']
																					tmp_subst['b'] = subst2['i2.2.1.0_1']
																					tmp_subst['a'] = subst2['i2.2.0']
																					tmp_subst['d'] = subst2['i2.2.1.0_2']
																					tmp_subst['c'] = subst2['i2.2.0_1']
																					tmp_subst['n'] = subst2['i2.2']
																					# 21: Integral((c + d*x)**n/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f88)
																					yield 21, tmp_subst
														if len(subjects2) == 0:
															break
														tmp327.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp327))
				if pattern_index == 17:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f87)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f89)(subst1):
												# State 5877
												if len(subjects2) >= 1:
													tmp330 = []
													tmp330.append(subjects2.popleft())
													while True:
														if len(tmp330) > 1:
															tmp331 = create_operation_expression(associative1, tmp330)
														elif len(tmp330) == 1:
															tmp331 = tmp330[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp331)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			# State 5878
																			if len(subjects2) == 0:
																				# State 5879
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['x'] = subst2['i2.2.1.0']
																					tmp_subst['b'] = subst2['i2.2.1.0_1']
																					tmp_subst['a'] = subst2['i2.2.0']
																					tmp_subst['d'] = subst2['i2.2.1.0_2']
																					tmp_subst['c'] = subst2['i2.2.0_1']
																					tmp_subst['n'] = subst2['i2.2']
																					# 22: Integral((c + d*x)**n/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f89)
																					yield 22, tmp_subst
														if len(subjects2) == 0:
															break
														tmp330.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp330))
				if pattern_index == 18:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f90)(subst1):
										# State 5886
										if len(subjects2) >= 1:
											tmp333 = []
											tmp333.append(subjects2.popleft())
											while True:
												if len(tmp333) > 1:
													tmp334 = create_operation_expression(associative1, tmp333)
												elif len(tmp333) == 1:
													tmp334 = tmp333[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp334)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5887
																	if len(subjects2) == 0:
																		# State 5888
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 23: Integral(1/((a + b*x)*(c + d*x)**(1/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
																			yield 23, tmp_subst
												if len(subjects2) == 0:
													break
												tmp333.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp333))
				if pattern_index == 19:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f91)(subst1):
										# State 5889
										if len(subjects2) >= 1:
											tmp336 = []
											tmp336.append(subjects2.popleft())
											while True:
												if len(tmp336) > 1:
													tmp337 = create_operation_expression(associative1, tmp336)
												elif len(tmp336) == 1:
													tmp337 = tmp336[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp337)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5890
																	if len(subjects2) == 0:
																		# State 5891
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 24: Integral(1/((a + b*x)*(c + d*x)**(1/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
																			yield 24, tmp_subst
												if len(subjects2) == 0:
													break
												tmp336.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp336))
				if pattern_index == 20:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f90)(subst1):
										# State 5898
										if len(subjects2) >= 1:
											tmp339 = []
											tmp339.append(subjects2.popleft())
											while True:
												if len(tmp339) > 1:
													tmp340 = create_operation_expression(associative1, tmp339)
												elif len(tmp339) == 1:
													tmp340 = tmp339[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp340)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5899
																	if len(subjects2) == 0:
																		# State 5900
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 25: Integral(1/((a + b*x)*(c + d*x)**(2/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f90)
																			yield 25, tmp_subst
												if len(subjects2) == 0:
													break
												tmp339.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp339))
				if pattern_index == 21:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f91)(subst1):
										# State 5901
										if len(subjects2) >= 1:
											tmp342 = []
											tmp342.append(subjects2.popleft())
											while True:
												if len(tmp342) > 1:
													tmp343 = create_operation_expression(associative1, tmp342)
												elif len(tmp342) == 1:
													tmp343 = tmp342[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp343)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5902
																	if len(subjects2) == 0:
																		# State 5903
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 26: Integral(1/((a + b*x)*(c + d*x)**(2/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f91)
																			yield 26, tmp_subst
												if len(subjects2) == 0:
													break
												tmp342.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp342))
				if pattern_index == 22:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f87)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f92)(subst1):
												# State 5904
												if len(subjects2) >= 1:
													tmp345 = []
													tmp345.append(subjects2.popleft())
													while True:
														if len(tmp345) > 1:
															tmp346 = create_operation_expression(associative1, tmp345)
														elif len(tmp345) == 1:
															tmp346 = tmp345[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp346)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			# State 5905
																			if len(subjects2) == 0:
																				# State 5906
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['x'] = subst2['i2.2.1.0']
																					tmp_subst['b'] = subst2['i2.2.1.0_1']
																					tmp_subst['a'] = subst2['i2.2.0']
																					tmp_subst['d'] = subst2['i2.2.1.0_2']
																					tmp_subst['c'] = subst2['i2.2.0_1']
																					tmp_subst['n'] = subst2['i2.2']
																					# 27: Integral((c + d*x)**n/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f87) and (cons_f92)
																					yield 27, tmp_subst
														if len(subjects2) == 0:
															break
														tmp345.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp345))
				if pattern_index == 23:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.2' in subst1 and CustomConstraint(cons_f23)(subst1):
									# State 5910
									if len(subjects2) >= 1:
										tmp348 = []
										tmp348.append(subjects2.popleft())
										while True:
											if len(tmp348) > 1:
												tmp349 = create_operation_expression(associative1, tmp348)
											elif len(tmp348) == 1:
												tmp349 = tmp348[0]
											else:
												assert False, "Unreachable"
											subst2 = Substitution(subst1)
											try:
												subst2.try_add_variable('i2.2.1.0', tmp349)
											except ValueError:
												pass
											else:
												if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
													if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
														if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
															# State 5911
															if len(subjects2) == 0:
																# State 5912
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['x'] = subst2['i2.2.1.0']
																	tmp_subst['d'] = subst2['i2.2.1.0_1']
																	tmp_subst['c'] = subst2['i2.2.0']
																	tmp_subst['n'] = subst2['i2.2']
																	# 28: Integral((c + d*x)**n/x, x) /; (cons_f7) and (cons_f27) and (cons_f4) and (cons_f23)
																	yield 28, tmp_subst
											if len(subjects2) == 0:
												break
											tmp348.append(subjects2.popleft())
										subjects2.extendleft(reversed(tmp348))
				if pattern_index == 24:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f23)(subst1):
												# State 5913
												if len(subjects2) >= 1:
													tmp351 = []
													tmp351.append(subjects2.popleft())
													while True:
														if len(tmp351) > 1:
															tmp352 = create_operation_expression(associative1, tmp351)
														elif len(tmp351) == 1:
															tmp352 = tmp351[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp352)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																				# State 5914
																				if len(subjects2) == 0:
																					# State 5915
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						tmp_subst['n'] = subst2['i2.2']
																						# 29: Integral((c + d*x)**n/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f71) and (cons_f23)
																						yield 29, tmp_subst
														if len(subjects2) == 0:
															break
														tmp351.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp351))
				if pattern_index == 25:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f95)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f96)(subst1):
															if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f97)(subst1):
																# State 5928
																if len(subjects2) >= 1:
																	tmp354 = []
																	tmp354.append(subjects2.popleft())
																	while True:
																		if len(tmp354) > 1:
																			tmp355 = create_operation_expression(associative1, tmp354)
																		elif len(tmp354) == 1:
																			tmp355 = tmp354[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp355)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f97)(subst2):
																								# State 5929
																								if len(subjects2) == 0:
																									# State 5930
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										# 30: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f88) and (cons_f95) and (cons_f96) and (cons_f97)
																										yield 30, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp354.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp354))
				if pattern_index == 26:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f97)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f98)(subst1):
														# State 5931
														if len(subjects2) >= 1:
															tmp357 = []
															tmp357.append(subjects2.popleft())
															while True:
																if len(tmp357) > 1:
																	tmp358 = create_operation_expression(associative1, tmp357)
																elif len(tmp357) == 1:
																	tmp358 = tmp357[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp358)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f97)(subst2):
																						# State 5932
																						if len(subjects2) == 0:
																							# State 5933
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['m'] = subst2['i2.2']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['n'] = subst2['i2.2_1']
																								# 31: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f94) and (cons_f98) and (cons_f97)
																								yield 31, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp357.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp357))
				if pattern_index == 27:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f97)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f99)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f100)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f101)(subst1):
																# State 5934
																if len(subjects2) >= 1:
																	tmp360 = []
																	tmp360.append(subjects2.popleft())
																	while True:
																		if len(tmp360) > 1:
																			tmp361 = create_operation_expression(associative1, tmp360)
																		elif len(tmp360) == 1:
																			tmp361 = tmp360[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp361)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f97)(subst2):
																								# State 5935
																								if len(subjects2) == 0:
																									# State 5936
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										# 32: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f88) and (cons_f99) and (cons_f100) and (cons_f101) and (cons_f97)
																										yield 32, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp360.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp360))
				if pattern_index == 28:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f102)(subst1):
										if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f103)(subst1):
											# State 5943
											if len(subjects2) >= 1:
												tmp363 = []
												tmp363.append(subjects2.popleft())
												while True:
													if len(tmp363) > 1:
														tmp364 = create_operation_expression(associative1, tmp363)
													elif len(tmp363) == 1:
														tmp364 = tmp363[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp364)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5944
																		if len(subjects2) == 0:
																			# State 5945
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 33: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f102) and (cons_f103)
																				yield 33, tmp_subst
													if len(subjects2) == 0:
														break
													tmp363.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp363))
				if pattern_index == 29:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f104)(subst1):
										if 'i2.2.1.0_1' in subst1 and CustomConstraint(cons_f105)(subst1):
											# State 5952
											if len(subjects2) >= 1:
												tmp366 = []
												tmp366.append(subjects2.popleft())
												while True:
													if len(tmp366) > 1:
														tmp367 = create_operation_expression(associative1, tmp366)
													elif len(tmp366) == 1:
														tmp367 = tmp366[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp367)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5953
																		if len(subjects2) == 0:
																			# State 5954
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 34: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f104) and (cons_f105)
																				yield 34, tmp_subst
													if len(subjects2) == 0:
														break
													tmp366.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp366))
				if pattern_index == 30:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f106)(subst1):
											# State 5955
											if len(subjects2) >= 1:
												tmp369 = []
												tmp369.append(subjects2.popleft())
												while True:
													if len(tmp369) > 1:
														tmp370 = create_operation_expression(associative1, tmp369)
													elif len(tmp369) == 1:
														tmp370 = tmp369[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp370)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5956
																		if len(subjects2) == 0:
																			# State 5957
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 35: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f106)
																				yield 35, tmp_subst
													if len(subjects2) == 0:
														break
													tmp369.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp369))
				if pattern_index == 31:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										# State 5958
										if len(subjects2) >= 1:
											tmp372 = []
											tmp372.append(subjects2.popleft())
											while True:
												if len(tmp372) > 1:
													tmp373 = create_operation_expression(associative1, tmp372)
												elif len(tmp372) == 1:
													tmp373 = tmp372[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.2.1.0', tmp373)
												except ValueError:
													pass
												else:
													if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																	# State 5959
																	if len(subjects2) == 0:
																		# State 5960
																		if len(subjects) == 0:
																			tmp_subst = Substitution()
																			tmp_subst['x'] = subst2['i2.2.1.0']
																			tmp_subst['b'] = subst2['i2.2.1.0_1']
																			tmp_subst['a'] = subst2['i2.2.0']
																			tmp_subst['d'] = subst2['i2.2.1.0_2']
																			tmp_subst['c'] = subst2['i2.2.0_1']
																			# 36: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71)
																			yield 36, tmp_subst
												if len(subjects2) == 0:
													break
												tmp372.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp372))
				if pattern_index == 32:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f107)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f108)(subst1):
													# State 5961
													if len(subjects2) >= 1:
														tmp375 = []
														tmp375.append(subjects2.popleft())
														while True:
															if len(tmp375) > 1:
																tmp376 = create_operation_expression(associative1, tmp375)
															elif len(tmp375) == 1:
																tmp376 = tmp375[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp376)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				# State 5962
																				if len(subjects2) == 0:
																					# State 5963
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						# 37: Integral((a + b*x)**m*(c + d*x)**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f31) and (cons_f107) and (cons_f108)
																						yield 37, tmp_subst
															if len(subjects2) == 0:
																break
															tmp375.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp375))
				if pattern_index == 33:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f109)(subst1):
											# State 5970
											if len(subjects2) >= 1:
												tmp378 = []
												tmp378.append(subjects2.popleft())
												while True:
													if len(tmp378) > 1:
														tmp379 = create_operation_expression(associative1, tmp378)
													elif len(tmp378) == 1:
														tmp379 = tmp378[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp379)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5971
																		if len(subjects2) == 0:
																			# State 5972
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 38: Integral(1/((a + b*x)**(1/3)*(c + d*x)**(2/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f109)
																				yield 38, tmp_subst
													if len(subjects2) == 0:
														break
													tmp378.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp378))
				if pattern_index == 34:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f110)(subst1):
											# State 5973
											if len(subjects2) >= 1:
												tmp381 = []
												tmp381.append(subjects2.popleft())
												while True:
													if len(tmp381) > 1:
														tmp382 = create_operation_expression(associative1, tmp381)
													elif len(tmp381) == 1:
														tmp382 = tmp381[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.0', tmp382)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																		# State 5974
																		if len(subjects2) == 0:
																			# State 5975
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.0']
																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																				tmp_subst['c'] = subst2['i2.2.0_1']
																				# 39: Integral(1/((a + b*x)**(1/3)*(c + d*x)**(2/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f110)
																				yield 39, tmp_subst
													if len(subjects2) == 0:
														break
													tmp381.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp381))
				if pattern_index == 35:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f107)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f111)(subst1):
													# State 5976
													if len(subjects2) >= 1:
														tmp384 = []
														tmp384.append(subjects2.popleft())
														while True:
															if len(tmp384) > 1:
																tmp385 = create_operation_expression(associative1, tmp384)
															elif len(tmp384) == 1:
																tmp385 = tmp384[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp385)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				# State 5977
																				if len(subjects2) == 0:
																					# State 5978
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.0']
																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																						tmp_subst['c'] = subst2['i2.2.0_1']
																						tmp_subst['n'] = subst2['i2.2_1']
																						# 40: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f111)
																						yield 40, tmp_subst
															if len(subjects2) == 0:
																break
															tmp384.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp384))
				if pattern_index == 36:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
											if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f97)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f107)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f92)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f112)(subst1):
															# State 5979
															if len(subjects2) >= 1:
																tmp387 = []
																tmp387.append(subjects2.popleft())
																while True:
																	if len(tmp387) > 1:
																		tmp388 = create_operation_expression(associative1, tmp387)
																	elif len(tmp387) == 1:
																		tmp388 = tmp387[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp388)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f97)(subst2):
																							# State 5980
																							if len(subjects2) == 0:
																								# State 5981
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.0']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['m'] = subst2['i2.2']
																									tmp_subst['d'] = subst2['i2.2.1.0_2']
																									tmp_subst['c'] = subst2['i2.2.0_1']
																									tmp_subst['n'] = subst2['i2.2_1']
																									# 41: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f71) and (cons_f93) and (cons_f107) and (cons_f92) and (cons_f112) and (cons_f97)
																									yield 41, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp387.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp387))
				if pattern_index == 37:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f113)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f114)(subst1):
															# State 5982
															if len(subjects2) >= 1:
																tmp390 = []
																tmp390.append(subjects2.popleft())
																while True:
																	if len(tmp390) > 1:
																		tmp391 = create_operation_expression(associative1, tmp390)
																	elif len(tmp390) == 1:
																		tmp391 = tmp390[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp391)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								# State 5983
																								if len(subjects2) == 0:
																									# State 5984
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										# 42: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f113) and (cons_f66) and (cons_f114)
																										yield 42, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp390.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp390))
				if pattern_index == 38:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f115)(subst1):
												# State 6000
												if len(subjects2) >= 1:
													tmp393 = []
													tmp393.append(subjects2.popleft())
													while True:
														if len(tmp393) > 1:
															tmp394 = create_operation_expression(associative1, tmp393)
														elif len(tmp393) == 1:
															tmp394 = tmp393[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.0', tmp394)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																			if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																				# State 6001
																				if len(subjects2) == 0:
																					# State 6002
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.0']
																						tmp_subst['b'] = subst2['i2.2.0_1']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0']
																						tmp_subst['c'] = subst2['i2.2.0_2']
																						tmp_subst['n'] = subst2['i2.2_1']
																						# 43: Integral((b*x)**m*(c + d*x)**n, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f115)
																						yield 43, tmp_subst
														if len(subjects2) == 0:
															break
														tmp393.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp393))
				if pattern_index == 39:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
											if 'i2.2' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f116)(subst1):
												# State 6003
												if len(subjects2) >= 1:
													tmp396 = []
													tmp396.append(subjects2.popleft())
													while True:
														if len(tmp396) > 1:
															tmp397 = create_operation_expression(associative1, tmp396)
														elif len(tmp396) == 1:
															tmp397 = tmp396[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.0', tmp397)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																			if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																				# State 6004
																				if len(subjects2) == 0:
																					# State 6005
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.0']
																						tmp_subst['b'] = subst2['i2.2.0_1']
																						tmp_subst['m'] = subst2['i2.2']
																						tmp_subst['d'] = subst2['i2.2.1.0']
																						tmp_subst['c'] = subst2['i2.2.0_2']
																						tmp_subst['n'] = subst2['i2.2_1']
																						# 44: Integral((b*x)**m*(c + d*x)**n, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f23) and (cons_f116)
																						yield 44, tmp_subst
														if len(subjects2) == 0:
															break
														tmp396.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp396))
				if pattern_index == 40:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f117)(subst1):
													if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f118)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f119)(subst1):
															# State 6006
															if len(subjects2) >= 1:
																tmp399 = []
																tmp399.append(subjects2.popleft())
																while True:
																	if len(tmp399) > 1:
																		tmp400 = create_operation_expression(associative1, tmp399)
																	elif len(tmp399) == 1:
																		tmp400 = tmp399[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.0', tmp400)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																						if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																							# State 6007
																							if len(subjects2) == 0:
																								# State 6008
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.0']
																									tmp_subst['b'] = subst2['i2.2.0_1']
																									tmp_subst['m'] = subst2['i2.2']
																									tmp_subst['d'] = subst2['i2.2.1.0']
																									tmp_subst['c'] = subst2['i2.2.0_2']
																									tmp_subst['n'] = subst2['i2.2_1']
																									# 45: Integral((b*x)**m*(c + d*x)**n, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f23) and (cons_f117) and (cons_f118) and (cons_f119)
																									yield 45, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp399.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp399))
				if pattern_index == 41:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f117)(subst1):
													if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f118)(subst1):
														# State 6009
														if len(subjects2) >= 1:
															tmp402 = []
															tmp402.append(subjects2.popleft())
															while True:
																if len(tmp402) > 1:
																	tmp403 = create_operation_expression(associative1, tmp402)
																elif len(tmp402) == 1:
																	tmp403 = tmp402[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.0', tmp403)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																					if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						# State 6010
																						if len(subjects2) == 0:
																							# State 6011
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.0']
																								tmp_subst['b'] = subst2['i2.2.0_1']
																								tmp_subst['m'] = subst2['i2.2']
																								tmp_subst['d'] = subst2['i2.2.1.0']
																								tmp_subst['c'] = subst2['i2.2.0_2']
																								tmp_subst['n'] = subst2['i2.2_1']
																								# 46: Integral((b*x)**m*(c + d*x)**n, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f23) and (cons_f117) and (cons_f118)
																								yield 46, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp402.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp402))
				if pattern_index == 42:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f85)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
													# State 6012
													if len(subjects2) >= 1:
														tmp405 = []
														tmp405.append(subjects2.popleft())
														while True:
															if len(tmp405) > 1:
																tmp406 = create_operation_expression(associative1, tmp405)
															elif len(tmp405) == 1:
																tmp406 = tmp405[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp406)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																					# State 6013
																					if len(subjects2) == 0:
																						# State 6014
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['m'] = subst2['i2.2']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['n'] = subst2['i2.2_1']
																							# 47: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f71) and (cons_f18) and (cons_f85)
																							yield 47, tmp_subst
															if len(subjects2) == 0:
																break
															tmp405.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp405))
				if pattern_index == 43:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
															if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f121)(subst1):
																# State 6015
																if len(subjects2) >= 1:
																	tmp408 = []
																	tmp408.append(subjects2.popleft())
																	while True:
																		if len(tmp408) > 1:
																			tmp409 = create_operation_expression(associative1, tmp408)
																		elif len(tmp408) == 1:
																			tmp409 = tmp408[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp409)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									# State 6016
																									if len(subjects2) == 0:
																										# State 6017
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											# 48: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f18) and (cons_f23) and (cons_f120) and (cons_f121)
																											yield 48, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp408.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp408))
				if pattern_index == 44:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f71)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f122)(subst1):
															# State 6018
															if len(subjects2) >= 1:
																tmp411 = []
																tmp411.append(subjects2.popleft())
																while True:
																	if len(tmp411) > 1:
																		tmp412 = create_operation_expression(associative1, tmp411)
																	elif len(tmp411) == 1:
																		tmp412 = tmp411[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp412)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								# State 6019
																								if len(subjects2) == 0:
																									# State 6020
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										# 49: Integral((a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f71) and (cons_f18) and (cons_f23) and (cons_f122)
																										yield 49, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp411.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp411))
				if pattern_index == 45:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f68)(subst1):
												if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f123)(subst1):
													# State 6021
													if len(subjects2) >= 1:
														tmp414 = []
														tmp414.append(subjects2.popleft())
														while True:
															if len(tmp414) > 1:
																tmp415 = create_operation_expression(associative1, tmp414)
															elif len(tmp414) == 1:
																tmp415 = tmp414[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2', tmp415)
															except ValueError:
																pass
															else:
																if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																					if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f68)(subst2):
																							if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f123)(subst2):
																								# State 6022
																								if len(subjects2) == 0:
																									# State 6023
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['u'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										tmp_subst['x'] = subst2['i2']
																										# 50: Integral((a + b*u)**m*(c + d*u)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f68) and (cons_f123)
																										yield 50, tmp_subst
															if len(subjects2) == 0:
																break
															tmp414.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp414))
				if pattern_index == 46:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f70)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f124)(subst1):
																if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
																	# State 6058
																	if len(subjects2) >= 1:
																		tmp417 = []
																		tmp417.append(subjects2.popleft())
																		while True:
																			if len(tmp417) > 1:
																				tmp418 = create_operation_expression(associative1, tmp417)
																			elif len(tmp417) == 1:
																				tmp418 = tmp417[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp418)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													# State 6059
																													if len(subjects2) == 0:
																														# State 6060
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.1.0']
																															tmp_subst['b'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['m'] = subst2['i2.2']
																															tmp_subst['d'] = subst2['i2.2.1.0_2']
																															tmp_subst['c'] = subst2['i2.2.0_1']
																															tmp_subst['n'] = subst2['i2.2_1']
																															tmp_subst['f'] = subst2['i2.2.1.0_3']
																															tmp_subst['e'] = subst2['i2.2.0_2']
																															tmp_subst['p'] = subst2['i2.2_2']
																															# 51: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f17)
																															yield 51, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp417.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp417))
				if pattern_index == 47:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f126)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.1.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f127)(subst1):
															# State 6075
															if len(subjects2) >= 1:
																tmp420 = []
																tmp420.append(subjects2.popleft())
																while True:
																	if len(tmp420) > 1:
																		tmp421 = create_operation_expression(associative1, tmp420)
																	elif len(tmp420) == 1:
																		tmp421 = tmp420[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp421)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																					if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																										# State 6076
																										if len(subjects2) == 0:
																											# State 6077
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_1']
																												tmp_subst['c'] = subst2['i2.2.0']
																												tmp_subst['n'] = subst2['i2.2']
																												tmp_subst['f'] = subst2['i2.2.1.0_2']
																												tmp_subst['e'] = subst2['i2.2.0_1']
																												tmp_subst['p'] = subst2['i2.2_1']
																												tmp_subst['b'] = subst2['i2.1.1.0']
																												tmp_subst['a'] = subst2['i2.1.0']
																												# 52: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f127)
																												yield 52, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp420.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp420))
				if pattern_index == 48:
					if 'i2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f128)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f129)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f130)(subst1):
														# State 6096
														if len(subjects2) >= 1:
															tmp423 = []
															tmp423.append(subjects2.popleft())
															while True:
																if len(tmp423) > 1:
																	tmp424 = create_operation_expression(associative1, tmp423)
																elif len(tmp423) == 1:
																	tmp424 = tmp423[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.0', tmp424)
																except ValueError:
																	pass
																else:
																	if 'i2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.1.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																							# State 6097
																							if len(subjects2) == 0:
																								# State 6098
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.0']
																									tmp_subst['d'] = subst2['i2.2.0_1']
																									tmp_subst['n'] = subst2['i2.2']
																									tmp_subst['f'] = subst2['i2.2.1.0']
																									tmp_subst['e'] = subst2['i2.2.0_2']
																									tmp_subst['p'] = subst2['i2.2_1']
																									tmp_subst['b'] = subst2['i2.1.1.0']
																									tmp_subst['a'] = subst2['i2.1.0']
																									# 53: Integral((d*x)**n*(a + b*x)*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f129) and (cons_f130)
																									yield 53, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp423.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp423))
				if pattern_index == 49:
					if 'i2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f128)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f131)(subst1):
													if 'i2.2.0_2' in subst1 and 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f132)(subst1):
														if 'i2.2' in subst1 and 'i2.1.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f133)(subst1):
															# State 6099
															if len(subjects2) >= 1:
																tmp426 = []
																tmp426.append(subjects2.popleft())
																while True:
																	if len(tmp426) > 1:
																		tmp427 = create_operation_expression(associative1, tmp426)
																	elif len(tmp426) == 1:
																		tmp427 = tmp426[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.0', tmp427)
																	except ValueError:
																		pass
																	else:
																		if 'i2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.1.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								# State 6100
																								if len(subjects2) == 0:
																									# State 6101
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.0']
																										tmp_subst['d'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2']
																										tmp_subst['f'] = subst2['i2.2.1.0']
																										tmp_subst['e'] = subst2['i2.2.0_2']
																										tmp_subst['p'] = subst2['i2.2_1']
																										tmp_subst['b'] = subst2['i2.1.1.0']
																										tmp_subst['a'] = subst2['i2.1.0']
																										# 54: Integral((d*x)**n*(a + b*x)*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f128) and (cons_f131) and (cons_f132) and (cons_f133)
																										yield 54, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp426.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp426))
				if pattern_index == 50:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f71)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.1.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f134)(subst1):
														# State 6102
														if len(subjects2) >= 1:
															tmp429 = []
															tmp429.append(subjects2.popleft())
															while True:
																if len(tmp429) > 1:
																	tmp430 = create_operation_expression(associative1, tmp429)
																elif len(tmp429) == 1:
																	tmp430 = tmp429[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp430)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																				if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																								# State 6103
																								if len(subjects2) == 0:
																									# State 6104
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['d'] = subst2['i2.2.1.0_1']
																										tmp_subst['c'] = subst2['i2.2.0']
																										tmp_subst['n'] = subst2['i2.2']
																										tmp_subst['f'] = subst2['i2.2.1.0_2']
																										tmp_subst['e'] = subst2['i2.2.0_1']
																										tmp_subst['p'] = subst2['i2.2_1']
																										tmp_subst['b'] = subst2['i2.1.1.0']
																										tmp_subst['a'] = subst2['i2.1.0']
																										# 55: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f71) and (cons_f134)
																										yield 55, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp429.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp429))
				if pattern_index == 51:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f135)(subst1):
														if 'i2.2_1' in subst1 and CustomConstraint(cons_f54)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f136)(subst1):
																# State 6105
																if len(subjects2) >= 1:
																	tmp432 = []
																	tmp432.append(subjects2.popleft())
																	while True:
																		if len(tmp432) > 1:
																			tmp433 = create_operation_expression(associative1, tmp432)
																		elif len(tmp432) == 1:
																			tmp433 = tmp432[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp433)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6106
																											if len(subjects2) == 0:
																												# State 6107
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['d'] = subst2['i2.2.1.0_1']
																													tmp_subst['c'] = subst2['i2.2.0']
																													tmp_subst['n'] = subst2['i2.2']
																													tmp_subst['f'] = subst2['i2.2.1.0_2']
																													tmp_subst['e'] = subst2['i2.2.0_1']
																													tmp_subst['p'] = subst2['i2.2_1']
																													tmp_subst['b'] = subst2['i2.1.1.0']
																													tmp_subst['a'] = subst2['i2.1.0']
																													# 56: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f135) and (cons_f54) and (cons_f136)
																													yield 56, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp432.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp432))
				if pattern_index == 52:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f126)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f13)(subst1):
														if 'i2.2_1' in subst1 and CustomConstraint(cons_f137)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f138)(subst1):
																# State 6108
																if len(subjects2) >= 1:
																	tmp435 = []
																	tmp435.append(subjects2.popleft())
																	while True:
																		if len(tmp435) > 1:
																			tmp436 = create_operation_expression(associative1, tmp435)
																		elif len(tmp435) == 1:
																			tmp436 = tmp435[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp436)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																										# State 6109
																										if len(subjects2) == 0:
																											# State 6110
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_1']
																												tmp_subst['c'] = subst2['i2.2.0']
																												tmp_subst['n'] = subst2['i2.2']
																												tmp_subst['f'] = subst2['i2.2.1.0_2']
																												tmp_subst['e'] = subst2['i2.2.0_1']
																												tmp_subst['p'] = subst2['i2.2_1']
																												tmp_subst['b'] = subst2['i2.1.1.0']
																												tmp_subst['a'] = subst2['i2.1.0']
																												# 57: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f126) and (cons_f13) and (cons_f137) and (cons_f138)
																												yield 57, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp435.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp435))
				if pattern_index == 53:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f126)(subst1):
														if 'i2.2_1' in subst1 and CustomConstraint(cons_f12)(subst1):
															if 'i2.2_1' in subst1 and CustomConstraint(cons_f139)(subst1):
																# State 6111
																if len(subjects2) >= 1:
																	tmp438 = []
																	tmp438.append(subjects2.popleft())
																	while True:
																		if len(tmp438) > 1:
																			tmp439 = create_operation_expression(associative1, tmp438)
																		elif len(tmp438) == 1:
																			tmp439 = tmp438[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp439)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6112
																											if len(subjects2) == 0:
																												# State 6113
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['d'] = subst2['i2.2.1.0_1']
																													tmp_subst['c'] = subst2['i2.2.0']
																													tmp_subst['n'] = subst2['i2.2']
																													tmp_subst['f'] = subst2['i2.2.1.0_2']
																													tmp_subst['e'] = subst2['i2.2.0_1']
																													tmp_subst['p'] = subst2['i2.2_1']
																													tmp_subst['b'] = subst2['i2.1.1.0']
																													tmp_subst['a'] = subst2['i2.1.0']
																													# 58: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f12) and (cons_f139)
																													yield 58, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp438.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp438))
				if pattern_index == 54:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f126)(subst1):
														# State 6114
														if len(subjects2) >= 1:
															tmp441 = []
															tmp441.append(subjects2.popleft())
															while True:
																if len(tmp441) > 1:
																	tmp442 = create_operation_expression(associative1, tmp441)
																elif len(tmp441) == 1:
																	tmp442 = tmp441[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp442)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																				if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																									# State 6115
																									if len(subjects2) == 0:
																										# State 6116
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_1']
																											tmp_subst['c'] = subst2['i2.2.0']
																											tmp_subst['n'] = subst2['i2.2']
																											tmp_subst['f'] = subst2['i2.2.1.0_2']
																											tmp_subst['e'] = subst2['i2.2.0_1']
																											tmp_subst['p'] = subst2['i2.2_1']
																											tmp_subst['b'] = subst2['i2.1.1.0']
																											tmp_subst['a'] = subst2['i2.1.0']
																											# 59: Integral((a + b*x)*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126)
																											yield 59, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp441.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp441))
				if pattern_index == 55:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f126)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f140)(subst1):
															if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f141)(subst1):
																# State 6152
																if len(subjects2) >= 1:
																	tmp444 = []
																	tmp444.append(subjects2.popleft())
																	while True:
																		if len(tmp444) > 1:
																			tmp445 = create_operation_expression(associative1, tmp444)
																		elif len(tmp444) == 1:
																			tmp445 = tmp444[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp445)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6153
																											if len(subjects2) == 0:
																												# State 6154
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['n'] = subst2['i2.2']
																													tmp_subst['f'] = subst2['i2.2.1.0_3']
																													tmp_subst['e'] = subst2['i2.2.0_2']
																													tmp_subst['p'] = subst2['i2.2_1']
																													# 60: Integral((a + b*x)**2*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f126) and (cons_f140) and (cons_f141)
																													yield 60, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp444.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp444))
				if pattern_index == 56:
					if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f70)(subst1):
														if 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f142)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f12)(subst1):
																if 'i2.2_1' in subst1 and CustomConstraint(cons_f143)(subst1):
																	if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f144)(subst1):
																		# State 6194
																		if len(subjects2) >= 1:
																			tmp447 = []
																			tmp447.append(subjects2.popleft())
																			while True:
																				if len(tmp447) > 1:
																					tmp448 = create_operation_expression(associative1, tmp447)
																				elif len(tmp447) == 1:
																					tmp448 = tmp447[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.0', tmp448)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																												if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													# State 6195
																													if len(subjects2) == 0:
																														# State 6196
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.0']
																															tmp_subst['f'] = subst2['i2.2.0_1']
																															tmp_subst['p'] = subst2['i2.2']
																															tmp_subst['b'] = subst2['i2.2.1.0']
																															tmp_subst['a'] = subst2['i2.2.0_2']
																															tmp_subst['m'] = subst2['i2.2_1']
																															tmp_subst['d'] = subst2['i2.2.1.0_1']
																															tmp_subst['c'] = subst2['i2.2.0_3']
																															tmp_subst['n'] = subst2['i2.2_2']
																															# 61: Integral((f*x)**p*(a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f142) and (cons_f12) and (cons_f143) and (cons_f144)
																															yield 61, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp447.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp447))
				if pattern_index == 57:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f38)(subst1):
												# State 6213
												if len(subjects2) >= 1:
													tmp450 = []
													tmp450.append(subjects2.popleft())
													while True:
														if len(tmp450) > 1:
															tmp451 = create_operation_expression(associative1, tmp450)
														elif len(tmp450) == 1:
															tmp451 = tmp450[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp451)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6214
																					if len(subjects2) == 0:
																						# State 6215
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							tmp_subst['p'] = subst2['i2.2']
																							# 62: Integral((e + f*x)**p/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f38)
																							yield 62, tmp_subst
														if len(subjects2) == 0:
															break
														tmp450.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp450))
				if pattern_index == 58:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f13)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f145)(subst1):
													# State 6216
													if len(subjects2) >= 1:
														tmp453 = []
														tmp453.append(subjects2.popleft())
														while True:
															if len(tmp453) > 1:
																tmp454 = create_operation_expression(associative1, tmp453)
															elif len(tmp453) == 1:
																tmp454 = tmp453[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp454)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6217
																						if len(subjects2) == 0:
																							# State 6218
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['f'] = subst2['i2.2.1.0_3']
																								tmp_subst['e'] = subst2['i2.2.0_2']
																								tmp_subst['p'] = subst2['i2.2']
																								# 63: Integral((e + f*x)**p/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f145)
																								yield 63, tmp_subst
															if len(subjects2) == 0:
																break
															tmp453.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp453))
				if pattern_index == 59:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f13)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f146)(subst1):
													# State 6225
													if len(subjects2) >= 1:
														tmp456 = []
														tmp456.append(subjects2.popleft())
														while True:
															if len(tmp456) > 1:
																tmp457 = create_operation_expression(associative1, tmp456)
															elif len(tmp456) == 1:
																tmp457 = tmp456[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp457)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6226
																						if len(subjects2) == 0:
																							# State 6227
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['f'] = subst2['i2.2.1.0_3']
																								tmp_subst['e'] = subst2['i2.2.0_2']
																								tmp_subst['p'] = subst2['i2.2']
																								# 64: Integral((e + f*x)**p/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f146)
																								yield 64, tmp_subst
															if len(subjects2) == 0:
																break
															tmp456.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp456))
				if pattern_index == 60:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f13)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f137)(subst1):
													# State 6228
													if len(subjects2) >= 1:
														tmp459 = []
														tmp459.append(subjects2.popleft())
														while True:
															if len(tmp459) > 1:
																tmp460 = create_operation_expression(associative1, tmp459)
															elif len(tmp459) == 1:
																tmp460 = tmp459[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp460)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6229
																						if len(subjects2) == 0:
																							# State 6230
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['f'] = subst2['i2.2.1.0_3']
																								tmp_subst['e'] = subst2['i2.2.0_2']
																								tmp_subst['p'] = subst2['i2.2']
																								# 65: Integral((e + f*x)**p/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f13) and (cons_f137)
																								yield 65, tmp_subst
															if len(subjects2) == 0:
																break
															tmp459.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp459))
				if pattern_index == 61:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
													# State 6231
													if len(subjects2) >= 1:
														tmp462 = []
														tmp462.append(subjects2.popleft())
														while True:
															if len(tmp462) > 1:
																tmp463 = create_operation_expression(associative1, tmp462)
															elif len(tmp462) == 1:
																tmp463 = tmp462[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp463)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																							# State 6232
																							if len(subjects2) == 0:
																								# State 6233
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.0']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['d'] = subst2['i2.2.1.0_2']
																									tmp_subst['c'] = subst2['i2.2.0_1']
																									tmp_subst['f'] = subst2['i2.2.1.0_3']
																									tmp_subst['e'] = subst2['i2.2.0_2']
																									tmp_subst['p'] = subst2['i2.2']
																									# 66: Integral((e + f*x)**p/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f147)
																									yield 66, tmp_subst
															if len(subjects2) == 0:
																break
															tmp462.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp462))
				if pattern_index == 62:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f137)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f148)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f149)(subst1):
														# State 6240
														if len(subjects2) >= 1:
															tmp465 = []
															tmp465.append(subjects2.popleft())
															while True:
																if len(tmp465) > 1:
																	tmp466 = create_operation_expression(associative1, tmp465)
																elif len(tmp465) == 1:
																	tmp466 = tmp465[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp466)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							# State 6241
																							if len(subjects2) == 0:
																								# State 6242
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.0']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['d'] = subst2['i2.2.1.0_2']
																									tmp_subst['c'] = subst2['i2.2.0_1']
																									tmp_subst['n'] = subst2['i2.2']
																									tmp_subst['f'] = subst2['i2.2.1.0_3']
																									tmp_subst['e'] = subst2['i2.2.0_2']
																									tmp_subst['p'] = subst2['i2.2_1']
																									# 67: Integral((c + d*x)**n*(e + f*x)**p/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f148) and (cons_f149) and (cons_f137)
																									yield 67, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp465.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp465))
				if pattern_index == 63:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f150)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f151)(subst1):
														# State 6243
														if len(subjects2) >= 1:
															tmp468 = []
															tmp468.append(subjects2.popleft())
															while True:
																if len(tmp468) > 1:
																	tmp469 = create_operation_expression(associative1, tmp468)
																elif len(tmp468) == 1:
																	tmp469 = tmp468[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp469)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																								# State 6244
																								if len(subjects2) == 0:
																									# State 6245
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['d'] = subst2['i2.2.1.0_2']
																										tmp_subst['c'] = subst2['i2.2.0_1']
																										tmp_subst['n'] = subst2['i2.2_1']
																										tmp_subst['f'] = subst2['i2.2.1.0_3']
																										tmp_subst['e'] = subst2['i2.2.0_2']
																										tmp_subst['p'] = subst2['i2.2_2']
																										# 68: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f150) and (cons_f151)
																										yield 68, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp468.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp468))
				if pattern_index == 64:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f152)(subst1):
														# State 6246
														if len(subjects2) >= 1:
															tmp471 = []
															tmp471.append(subjects2.popleft())
															while True:
																if len(tmp471) > 1:
																	tmp472 = create_operation_expression(associative1, tmp471)
																elif len(tmp471) == 1:
																	tmp472 = tmp471[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp472)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																									# State 6247
																									if len(subjects2) == 0:
																										# State 6248
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['p'] = subst2['i2.2_1']
																											# 69: Integral((a + b*x)**2*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f152)
																											yield 69, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp471.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp471))
				if pattern_index == 65:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f140)(subst1):
														# State 6249
														if len(subjects2) >= 1:
															tmp474 = []
															tmp474.append(subjects2.popleft())
															while True:
																if len(tmp474) > 1:
																	tmp475 = create_operation_expression(associative1, tmp474)
																elif len(tmp474) == 1:
																	tmp475 = tmp474[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp475)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																									# State 6250
																									if len(subjects2) == 0:
																										# State 6251
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['p'] = subst2['i2.2_1']
																											# 70: Integral((a + b*x)**2*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f140)
																											yield 70, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp474.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp474))
				if pattern_index == 66:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f153)(subst1):
												# State 6258
												if len(subjects2) >= 1:
													tmp477 = []
													tmp477.append(subjects2.popleft())
													while True:
														if len(tmp477) > 1:
															tmp478 = create_operation_expression(associative1, tmp477)
														elif len(tmp477) == 1:
															tmp478 = tmp477[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp478)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f153)(subst2):
																						# State 6259
																						if len(subjects2) == 0:
																							# State 6260
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['f'] = subst2['i2.2.1.0_3']
																								tmp_subst['e'] = subst2['i2.2.0_2']
																								# 71: Integral(1/((a + b*x)**(1/3)*(c + d*x)**(2/3)*(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f153)
																								yield 71, tmp_subst
														if len(subjects2) == 0:
															break
														tmp477.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp477))
				if pattern_index == 67:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f154)(subst1):
												# State 6261
												if len(subjects2) >= 1:
													tmp480 = []
													tmp480.append(subjects2.popleft())
													while True:
														if len(tmp480) > 1:
															tmp481 = create_operation_expression(associative1, tmp480)
														elif len(tmp480) == 1:
															tmp481 = tmp480[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp481)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6262
																					if len(subjects2) == 0:
																						# State 6263
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 72: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)*(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f154)
																							yield 72, tmp_subst
														if len(subjects2) == 0:
															break
														tmp480.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp480))
				if pattern_index == 68:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f107)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f155)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f156)(subst1):
															# State 6264
															if len(subjects2) >= 1:
																tmp483 = []
																tmp483.append(subjects2.popleft())
																while True:
																	if len(tmp483) > 1:
																		tmp484 = create_operation_expression(associative1, tmp483)
																	elif len(tmp483) == 1:
																		tmp484 = tmp483[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp484)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f156)(subst2):
																									# State 6265
																									if len(subjects2) == 0:
																										# State 6266
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											# 73: Integral((a + b*x)**m*(c + d*x)**n/(e + f*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f155) and (cons_f93) and (cons_f107) and (cons_f156)
																											yield 73, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp483.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp483))
				if pattern_index == 69:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f157)(subst1):
															if 'i2.2_1' in subst1 and CustomConstraint(cons_f87)(subst1):
																if 'i2.2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f158)(subst1):
																	# State 6267
																	if len(subjects2) >= 1:
																		tmp486 = []
																		tmp486.append(subjects2.popleft())
																		while True:
																			if len(tmp486) > 1:
																				tmp487 = create_operation_expression(associative1, tmp486)
																			elif len(tmp486) == 1:
																				tmp487 = tmp486[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp487)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6268
																												if len(subjects2) == 0:
																													# State 6269
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 74: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f87) and (cons_f88) and (cons_f158)
																														yield 74, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp486.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp486))
				if pattern_index == 70:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f159)(subst1):
																if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f160)(subst1):
																	# State 6270
																	if len(subjects2) >= 1:
																		tmp489 = []
																		tmp489.append(subjects2.popleft())
																		while True:
																			if len(tmp489) > 1:
																				tmp490 = create_operation_expression(associative1, tmp489)
																			elif len(tmp489) == 1:
																				tmp490 = tmp489[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp490)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													# State 6271
																													if len(subjects2) == 0:
																														# State 6272
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.1.0']
																															tmp_subst['b'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['m'] = subst2['i2.2']
																															tmp_subst['d'] = subst2['i2.2.1.0_2']
																															tmp_subst['c'] = subst2['i2.2.0_1']
																															tmp_subst['n'] = subst2['i2.2_1']
																															tmp_subst['f'] = subst2['i2.2.1.0_3']
																															tmp_subst['e'] = subst2['i2.2.0_2']
																															tmp_subst['p'] = subst2['i2.2_2']
																															# 75: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f160) and (cons_f66)
																															yield 75, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp489.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp489))
				if pattern_index == 71:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f159)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f161)(subst1):
																# State 6273
																if len(subjects2) >= 1:
																	tmp492 = []
																	tmp492.append(subjects2.popleft())
																	while True:
																		if len(tmp492) > 1:
																			tmp493 = create_operation_expression(associative1, tmp492)
																		elif len(tmp492) == 1:
																			tmp493 = tmp492[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp493)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6274
																												if len(subjects2) == 0:
																													# State 6275
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 76: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f159) and (cons_f161)
																														yield 76, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp492.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp492))
				if pattern_index == 72:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
										if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f162)(subst1):
														if 'i2.2_2' in subst1 and CustomConstraint(cons_f163)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f164)(subst1):
																# State 6276
																if len(subjects2) >= 1:
																	tmp495 = []
																	tmp495.append(subjects2.popleft())
																	while True:
																		if len(tmp495) > 1:
																			tmp496 = create_operation_expression(associative1, tmp495)
																		elif len(tmp495) == 1:
																			tmp496 = tmp495[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp496)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									# State 6277
																									if len(subjects2) == 0:
																										# State 6278
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['p'] = subst2['i2.2_2']
																											# 77: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f94) and (cons_f88) and (cons_f163) and (cons_f164)
																											yield 77, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp495.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp495))
				if pattern_index == 73:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f162)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f164)(subst1):
															if 'i2.2_1' in subst1 and CustomConstraint(cons_f165)(subst1):
																# State 6279
																if len(subjects2) >= 1:
																	tmp498 = []
																	tmp498.append(subjects2.popleft())
																	while True:
																		if len(tmp498) > 1:
																			tmp499 = create_operation_expression(associative1, tmp498)
																		elif len(tmp498) == 1:
																			tmp499 = tmp498[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp499)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																										# State 6280
																										if len(subjects2) == 0:
																											# State 6281
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['m'] = subst2['i2.2']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['n'] = subst2['i2.2_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['p'] = subst2['i2.2_2']
																												# 78: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f94) and (cons_f165) and (cons_f164)
																												yield 78, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp498.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp498))
				if pattern_index == 74:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
										if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f162)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f164)(subst1):
																# State 6282
																if len(subjects2) >= 1:
																	tmp501 = []
																	tmp501.append(subjects2.popleft())
																	while True:
																		if len(tmp501) > 1:
																			tmp502 = create_operation_expression(associative1, tmp501)
																		elif len(tmp501) == 1:
																			tmp502 = tmp501[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp502)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																										# State 6283
																										if len(subjects2) == 0:
																											# State 6284
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['m'] = subst2['i2.2']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['n'] = subst2['i2.2_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['p'] = subst2['i2.2_2']
																												# 79: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f5) and (cons_f162) and (cons_f94) and (cons_f88) and (cons_f164)
																												yield 79, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp501.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp501))
				if pattern_index == 75:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f166)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f167)(subst1):
																	# State 6285
																	if len(subjects2) >= 1:
																		tmp504 = []
																		tmp504.append(subjects2.popleft())
																		while True:
																			if len(tmp504) > 1:
																				tmp505 = create_operation_expression(associative1, tmp504)
																			elif len(tmp504) == 1:
																				tmp505 = tmp504[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp505)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6286
																												if len(subjects2) == 0:
																													# State 6287
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 80: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f17)
																														yield 80, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp504.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp504))
				if pattern_index == 76:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f162)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f167)(subst1):
														if 'i2.2' in subst1 and CustomConstraint(cons_f168)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f169)(subst1):
																# State 6288
																if len(subjects2) >= 1:
																	tmp507 = []
																	tmp507.append(subjects2.popleft())
																	while True:
																		if len(tmp507) > 1:
																			tmp508 = create_operation_expression(associative1, tmp507)
																		elif len(tmp507) == 1:
																			tmp508 = tmp507[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp508)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									# State 6289
																									if len(subjects2) == 0:
																										# State 6290
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['p'] = subst2['i2.2_2']
																											# 81: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f162) and (cons_f168) and (cons_f88) and (cons_f167) and (cons_f169)
																											yield 81, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp507.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp507))
				if pattern_index == 77:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and CustomConstraint(cons_f166)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f167)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f170)(subst1):
																	# State 6291
																	if len(subjects2) >= 1:
																		tmp510 = []
																		tmp510.append(subjects2.popleft())
																		while True:
																			if len(tmp510) > 1:
																				tmp511 = create_operation_expression(associative1, tmp510)
																			elif len(tmp510) == 1:
																				tmp511 = tmp510[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp511)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6292
																												if len(subjects2) == 0:
																													# State 6293
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 82: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f166) and (cons_f167) and (cons_f170)
																														yield 82, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp510.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp510))
				if pattern_index == 78:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
																if 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f171)(subst1):
																	# State 6294
																	if len(subjects2) >= 1:
																		tmp513 = []
																		tmp513.append(subjects2.popleft())
																		while True:
																			if len(tmp513) > 1:
																				tmp514 = create_operation_expression(associative1, tmp513)
																			elif len(tmp513) == 1:
																				tmp514 = tmp513[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp514)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6295
																												if len(subjects2) == 0:
																													# State 6296
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 83: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17) and (cons_f171)
																														yield 83, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp513.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp513))
				if pattern_index == 79:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f170)(subst1):
																# State 6297
																if len(subjects2) >= 1:
																	tmp516 = []
																	tmp516.append(subjects2.popleft())
																	while True:
																		if len(tmp516) > 1:
																			tmp517 = create_operation_expression(associative1, tmp516)
																		elif len(tmp516) == 1:
																			tmp517 = tmp516[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp517)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6298
																											if len(subjects2) == 0:
																												# State 6299
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['m'] = subst2['i2.2']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['n'] = subst2['i2.2_1']
																													tmp_subst['f'] = subst2['i2.2.1.0_3']
																													tmp_subst['e'] = subst2['i2.2.0_2']
																													tmp_subst['p'] = subst2['i2.2_2']
																													# 84: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
																													yield 84, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp516.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp516))
				if pattern_index == 80:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f172)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f173)(subst1):
															# State 6300
															if len(subjects2) >= 1:
																tmp519 = []
																tmp519.append(subjects2.popleft())
																while True:
																	if len(tmp519) > 1:
																		tmp520 = create_operation_expression(associative1, tmp519)
																	elif len(tmp519) == 1:
																		tmp520 = tmp519[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp520)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																										# State 6301
																										if len(subjects2) == 0:
																											# State 6302
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['m'] = subst2['i2.2']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['n'] = subst2['i2.2_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												# 85: Integral((a + b*x)**m*(c + d*x)**n/(e + f*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f172) and (cons_f173)
																												yield 85, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp519.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp519))
				if pattern_index == 81:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f174)(subst1):
												# State 6309
												if len(subjects2) >= 1:
													tmp522 = []
													tmp522.append(subjects2.popleft())
													while True:
														if len(tmp522) > 1:
															tmp523 = create_operation_expression(associative1, tmp522)
														elif len(tmp522) == 1:
															tmp523 = tmp522[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp523)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6310
																					if len(subjects2) == 0:
																						# State 6311
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 86: Integral(1/((a + b*x)*sqrt(c + d*x)*(e + f*x)**(1/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
																							yield 86, tmp_subst
														if len(subjects2) == 0:
															break
														tmp522.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp522))
				if pattern_index == 82:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f175)(subst1):
												# State 6312
												if len(subjects2) >= 1:
													tmp525 = []
													tmp525.append(subjects2.popleft())
													while True:
														if len(tmp525) > 1:
															tmp526 = create_operation_expression(associative1, tmp525)
														elif len(tmp525) == 1:
															tmp526 = tmp525[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp526)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6313
																					if len(subjects2) == 0:
																						# State 6314
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 87: Integral(1/((a + b*x)*sqrt(c + d*x)*(e + f*x)**(1/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
																							yield 87, tmp_subst
														if len(subjects2) == 0:
															break
														tmp525.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp525))
				if pattern_index == 83:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f174)(subst1):
												# State 6321
												if len(subjects2) >= 1:
													tmp528 = []
													tmp528.append(subjects2.popleft())
													while True:
														if len(tmp528) > 1:
															tmp529 = create_operation_expression(associative1, tmp528)
														elif len(tmp528) == 1:
															tmp529 = tmp528[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp529)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6322
																					if len(subjects2) == 0:
																						# State 6323
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 88: Integral(1/((a + b*x)*sqrt(c + d*x)*(e + f*x)**(3/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f174)
																							yield 88, tmp_subst
														if len(subjects2) == 0:
															break
														tmp528.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp528))
				if pattern_index == 84:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f175)(subst1):
												# State 6324
												if len(subjects2) >= 1:
													tmp531 = []
													tmp531.append(subjects2.popleft())
													while True:
														if len(tmp531) > 1:
															tmp532 = create_operation_expression(associative1, tmp531)
														elif len(tmp531) == 1:
															tmp532 = tmp531[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp532)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6325
																					if len(subjects2) == 0:
																						# State 6326
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 89: Integral(1/((a + b*x)*sqrt(c + d*x)*(e + f*x)**(3/4)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f175)
																							yield 89, tmp_subst
														if len(subjects2) == 0:
															break
														tmp531.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp531))
				if pattern_index == 85:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f176)(subst1):
											if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f177)(subst1):
												if 'i2.2.0_3' in subst1 and CustomConstraint(cons_f178)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f179)(subst1):
														# State 6336
														if len(subjects2) >= 1:
															tmp534 = []
															tmp534.append(subjects2.popleft())
															while True:
																if len(tmp534) > 1:
																	tmp535 = create_operation_expression(associative1, tmp534)
																elif len(tmp534) == 1:
																	tmp535 = tmp534[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.0', tmp535)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6337
																						if len(subjects2) == 0:
																							# State 6338
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.0']
																								tmp_subst['b'] = subst2['i2.2.0_1']
																								tmp_subst['d'] = subst2['i2.2.1.0']
																								tmp_subst['c'] = subst2['i2.2.0_2']
																								tmp_subst['f'] = subst2['i2.2.1.0_1']
																								tmp_subst['e'] = subst2['i2.2.0_3']
																								# 90: Integral(sqrt(e + f*x)/(sqrt(b*x)*sqrt(c + d*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f177) and (cons_f178) and (cons_f179)
																								yield 90, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp534.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp534))
				if pattern_index == 86:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f176)(subst1):
											if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f177)(subst1):
												if 'i2.2.0_3' in subst1 and CustomConstraint(cons_f178)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f180)(subst1):
														# State 6339
														if len(subjects2) >= 1:
															tmp537 = []
															tmp537.append(subjects2.popleft())
															while True:
																if len(tmp537) > 1:
																	tmp538 = create_operation_expression(associative1, tmp537)
																elif len(tmp537) == 1:
																	tmp538 = tmp537[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.0', tmp538)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6340
																						if len(subjects2) == 0:
																							# State 6341
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.0']
																								tmp_subst['b'] = subst2['i2.2.0_1']
																								tmp_subst['d'] = subst2['i2.2.1.0']
																								tmp_subst['c'] = subst2['i2.2.0_2']
																								tmp_subst['f'] = subst2['i2.2.1.0_1']
																								tmp_subst['e'] = subst2['i2.2.0_3']
																								# 91: Integral(sqrt(e + f*x)/(sqrt(b*x)*sqrt(c + d*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f177) and (cons_f178) and (cons_f180)
																								yield 91, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp537.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp537))
				if pattern_index == 87:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f176)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f181)(subst1):
												# State 6342
												if len(subjects2) >= 1:
													tmp540 = []
													tmp540.append(subjects2.popleft())
													while True:
														if len(tmp540) > 1:
															tmp541 = create_operation_expression(associative1, tmp540)
														elif len(tmp540) == 1:
															tmp541 = tmp540[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.0', tmp541)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																		if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																				# State 6343
																				if len(subjects2) == 0:
																					# State 6344
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.0']
																						tmp_subst['b'] = subst2['i2.2.0_1']
																						tmp_subst['d'] = subst2['i2.2.1.0']
																						tmp_subst['c'] = subst2['i2.2.0_2']
																						tmp_subst['f'] = subst2['i2.2.1.0_1']
																						tmp_subst['e'] = subst2['i2.2.0_3']
																						# 92: Integral(sqrt(e + f*x)/(sqrt(b*x)*sqrt(c + d*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f176) and (cons_f181)
																						yield 92, tmp_subst
														if len(subjects2) == 0:
															break
														tmp540.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp540))
				if pattern_index == 88:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f182)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f183)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f184)(subst1):
															# State 6351
															if len(subjects2) >= 1:
																tmp543 = []
																tmp543.append(subjects2.popleft())
																while True:
																	if len(tmp543) > 1:
																		tmp544 = create_operation_expression(associative1, tmp543)
																	elif len(tmp543) == 1:
																		tmp544 = tmp543[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp544)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f184)(subst2):
																									# State 6352
																									if len(subjects2) == 0:
																										# State 6353
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											# 93: Integral(sqrt(e + f*x)/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f183) and (cons_f184)
																											yield 93, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp543.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp543))
				if pattern_index == 89:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f183)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f185)(subst1):
													# State 6354
													if len(subjects2) >= 1:
														tmp546 = []
														tmp546.append(subjects2.popleft())
														while True:
															if len(tmp546) > 1:
																tmp547 = create_operation_expression(associative1, tmp546)
															elif len(tmp546) == 1:
																tmp547 = tmp546[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.0', tmp547)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																						# State 6355
																						if len(subjects2) == 0:
																							# State 6356
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.0']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['d'] = subst2['i2.2.1.0_2']
																								tmp_subst['c'] = subst2['i2.2.0_1']
																								tmp_subst['f'] = subst2['i2.2.1.0_3']
																								tmp_subst['e'] = subst2['i2.2.0_2']
																								# 94: Integral(sqrt(e + f*x)/(sqrt(a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f183)
																								yield 94, tmp_subst
															if len(subjects2) == 0:
																break
															tmp546.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp546))
				if pattern_index == 90:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f177)(subst1):
											if 'i2.2.0_3' in subst1 and CustomConstraint(cons_f178)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f186)(subst1):
													# State 6359
													if len(subjects2) >= 1:
														tmp549 = []
														tmp549.append(subjects2.popleft())
														while True:
															if len(tmp549) > 1:
																tmp550 = create_operation_expression(associative1, tmp549)
															elif len(tmp549) == 1:
																tmp550 = tmp549[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.0', tmp550)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6360
																					if len(subjects2) == 0:
																						# State 6361
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.0']
																							tmp_subst['b'] = subst2['i2.2.0_1']
																							tmp_subst['d'] = subst2['i2.2.1.0']
																							tmp_subst['c'] = subst2['i2.2.0_2']
																							tmp_subst['f'] = subst2['i2.2.1.0_1']
																							tmp_subst['e'] = subst2['i2.2.0_3']
																							# 95: Integral(1/(sqrt(b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f177) and (cons_f178) and (cons_f186)
																							yield 95, tmp_subst
															if len(subjects2) == 0:
																break
															tmp549.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp549))
				if pattern_index == 91:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f177)(subst1):
											if 'i2.2.0_3' in subst1 and CustomConstraint(cons_f178)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f187)(subst1):
													# State 6362
													if len(subjects2) >= 1:
														tmp552 = []
														tmp552.append(subjects2.popleft())
														while True:
															if len(tmp552) > 1:
																tmp553 = create_operation_expression(associative1, tmp552)
															elif len(tmp552) == 1:
																tmp553 = tmp552[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.0', tmp553)
															except ValueError:
																pass
															else:
																if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6363
																					if len(subjects2) == 0:
																						# State 6364
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.0']
																							tmp_subst['b'] = subst2['i2.2.0_1']
																							tmp_subst['d'] = subst2['i2.2.1.0']
																							tmp_subst['c'] = subst2['i2.2.0_2']
																							tmp_subst['f'] = subst2['i2.2.1.0_1']
																							tmp_subst['e'] = subst2['i2.2.0_3']
																							# 96: Integral(1/(sqrt(b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f177) and (cons_f178) and (cons_f187)
																							yield 96, tmp_subst
															if len(subjects2) == 0:
																break
															tmp552.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp552))
				if pattern_index == 92:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2.0_3' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f181)(subst1):
											# State 6365
											if len(subjects2) >= 1:
												tmp555 = []
												tmp555.append(subjects2.popleft())
												while True:
													if len(tmp555) > 1:
														tmp556 = create_operation_expression(associative1, tmp555)
													elif len(tmp555) == 1:
														tmp556 = tmp555[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.0', tmp556)
													except ValueError:
														pass
													else:
														if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																	if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																			# State 6366
																			if len(subjects2) == 0:
																				# State 6367
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['x'] = subst2['i2.2.0']
																					tmp_subst['b'] = subst2['i2.2.0_1']
																					tmp_subst['d'] = subst2['i2.2.1.0']
																					tmp_subst['c'] = subst2['i2.2.0_2']
																					tmp_subst['f'] = subst2['i2.2.1.0_1']
																					tmp_subst['e'] = subst2['i2.2.0_3']
																					# 97: Integral(1/(sqrt(b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f181)
																					yield 97, tmp_subst
													if len(subjects2) == 0:
														break
													tmp555.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp555))
				if pattern_index == 93:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f156)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f182)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f188)(subst1):
															if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f189)(subst1):
																# State 6371
																if len(subjects2) >= 1:
																	tmp558 = []
																	tmp558.append(subjects2.popleft())
																	while True:
																		if len(tmp558) > 1:
																			tmp559 = create_operation_expression(associative1, tmp558)
																		elif len(tmp558) == 1:
																			tmp559 = tmp558[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp559)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f156)(subst2):
																										if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f188)(subst2):
																											# State 6372
																											if len(subjects2) == 0:
																												# State 6373
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['f'] = subst2['i2.2.1.0_3']
																													tmp_subst['e'] = subst2['i2.2.0_2']
																													# 98: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f189)
																													yield 98, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp558.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp558))
				if pattern_index == 94:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f156)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f182)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f188)(subst1):
															if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f190)(subst1):
																# State 6374
																if len(subjects2) >= 1:
																	tmp561 = []
																	tmp561.append(subjects2.popleft())
																	while True:
																		if len(tmp561) > 1:
																			tmp562 = create_operation_expression(associative1, tmp561)
																		elif len(tmp561) == 1:
																			tmp562 = tmp561[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp562)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f156)(subst2):
																										if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f188)(subst2):
																											# State 6375
																											if len(subjects2) == 0:
																												# State 6376
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['f'] = subst2['i2.2.1.0_3']
																													tmp_subst['e'] = subst2['i2.2.0_2']
																													# 99: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f120) and (cons_f182) and (cons_f156) and (cons_f188) and (cons_f190)
																													yield 99, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp561.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp561))
				if pattern_index == 95:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f156)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f185)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f188)(subst1):
														# State 6377
														if len(subjects2) >= 1:
															tmp564 = []
															tmp564.append(subjects2.popleft())
															while True:
																if len(tmp564) > 1:
																	tmp565 = create_operation_expression(associative1, tmp564)
																elif len(tmp564) == 1:
																	tmp565 = tmp564[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp565)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f156)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f188)(subst2):
																									# State 6378
																									if len(subjects2) == 0:
																										# State 6379
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											# 100: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f185) and (cons_f156) and (cons_f188)
																											yield 100, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp564.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp564))
				if pattern_index == 96:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f191)(subst1):
												# State 6386
												if len(subjects2) >= 1:
													tmp567 = []
													tmp567.append(subjects2.popleft())
													while True:
														if len(tmp567) > 1:
															tmp568 = create_operation_expression(associative1, tmp567)
														elif len(tmp567) == 1:
															tmp568 = tmp567[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.0', tmp568)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																			if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					# State 6387
																					if len(subjects2) == 0:
																						# State 6388
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['d'] = subst2['i2.2.1.0_2']
																							tmp_subst['c'] = subst2['i2.2.0_1']
																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																							tmp_subst['e'] = subst2['i2.2.0_2']
																							# 101: Integral(1/((a + b*x)*(c + d*x)**(1/3)*(e + f*x)**(1/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191)
																							yield 101, tmp_subst
														if len(subjects2) == 0:
															break
														tmp567.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp567))
				if pattern_index == 97:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f191)(subst1):
														# State 6389
														if len(subjects2) >= 1:
															tmp570 = []
															tmp570.append(subjects2.popleft())
															while True:
																if len(tmp570) > 1:
																	tmp571 = create_operation_expression(associative1, tmp570)
																elif len(tmp570) == 1:
																	tmp571 = tmp570[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp571)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							# State 6390
																							if len(subjects2) == 0:
																								# State 6391
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.0']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['m'] = subst2['i2.2']
																									tmp_subst['d'] = subst2['i2.2.1.0_2']
																									tmp_subst['c'] = subst2['i2.2.0_1']
																									tmp_subst['f'] = subst2['i2.2.1.0_3']
																									tmp_subst['e'] = subst2['i2.2.0_2']
																									# 102: Integral((a + b*x)**m/((c + d*x)**(1/3)*(e + f*x)**(1/3)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f191) and (cons_f17) and (cons_f94)
																									yield 102, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp570.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp570))
				if pattern_index == 98:
					if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f70)(subst1):
														if 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f124)(subst1):
															if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f43)(subst1):
																if 'i2.2.0_3' in subst1 and CustomConstraint(cons_f177)(subst1):
																	# State 6392
																	if len(subjects2) >= 1:
																		tmp573 = []
																		tmp573.append(subjects2.popleft())
																		while True:
																			if len(tmp573) > 1:
																				tmp574 = create_operation_expression(associative1, tmp573)
																			elif len(tmp573) == 1:
																				tmp574 = tmp573[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.0', tmp574)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6393
																												if len(subjects2) == 0:
																													# State 6394
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.0']
																														tmp_subst['f'] = subst2['i2.2.0_1']
																														tmp_subst['p'] = subst2['i2.2']
																														tmp_subst['b'] = subst2['i2.2.1.0']
																														tmp_subst['a'] = subst2['i2.2.0_2']
																														tmp_subst['m'] = subst2['i2.2_1']
																														tmp_subst['d'] = subst2['i2.2.1.0_1']
																														tmp_subst['c'] = subst2['i2.2.0_3']
																														tmp_subst['n'] = subst2['i2.2_2']
																														# 103: Integral((f*x)**p*(a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124) and (cons_f43) and (cons_f177)
																														yield 103, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp573.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp573))
				if pattern_index == 99:
					if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f70)(subst1):
														if 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f124)(subst1):
															# State 6395
															if len(subjects2) >= 1:
																tmp576 = []
																tmp576.append(subjects2.popleft())
																while True:
																	if len(tmp576) > 1:
																		tmp577 = create_operation_expression(associative1, tmp576)
																	elif len(tmp576) == 1:
																		tmp577 = tmp576[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.0', tmp577)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																										# State 6396
																										if len(subjects2) == 0:
																											# State 6397
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.0']
																												tmp_subst['f'] = subst2['i2.2.0_1']
																												tmp_subst['p'] = subst2['i2.2']
																												tmp_subst['b'] = subst2['i2.2.1.0']
																												tmp_subst['a'] = subst2['i2.2.0_2']
																												tmp_subst['m'] = subst2['i2.2_1']
																												tmp_subst['d'] = subst2['i2.2.1.0_1']
																												tmp_subst['c'] = subst2['i2.2.0_3']
																												tmp_subst['n'] = subst2['i2.2_2']
																												# 104: Integral((f*x)**p*(a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f124)
																												yield 104, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp576.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp576))
				if pattern_index == 100:
					if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f125)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f70)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f144)(subst1):
															if 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f192)(subst1):
																# State 6398
																if len(subjects2) >= 1:
																	tmp579 = []
																	tmp579.append(subjects2.popleft())
																	while True:
																		if len(tmp579) > 1:
																			tmp580 = create_operation_expression(associative1, tmp579)
																		elif len(tmp579) == 1:
																			tmp580 = tmp579[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.0', tmp580)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6399
																											if len(subjects2) == 0:
																												# State 6400
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.0']
																													tmp_subst['f'] = subst2['i2.2.0_1']
																													tmp_subst['p'] = subst2['i2.2']
																													tmp_subst['b'] = subst2['i2.2.1.0']
																													tmp_subst['a'] = subst2['i2.2.0_2']
																													tmp_subst['m'] = subst2['i2.2_1']
																													tmp_subst['d'] = subst2['i2.2.1.0_1']
																													tmp_subst['c'] = subst2['i2.2.0_3']
																													tmp_subst['n'] = subst2['i2.2_2']
																													# 105: Integral((f*x)**p*(a + b*x)**m*(c + d*x)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f70) and (cons_f192) and (cons_f144)
																													yield 105, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp579.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp579))
				if pattern_index == 101:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f193)(subst1):
														# State 6401
														if len(subjects2) >= 1:
															tmp582 = []
															tmp582.append(subjects2.popleft())
															while True:
																if len(tmp582) > 1:
																	tmp583 = create_operation_expression(associative1, tmp582)
																elif len(tmp582) == 1:
																	tmp583 = tmp582[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp583)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																									# State 6402
																									if len(subjects2) == 0:
																										# State 6403
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['p'] = subst2['i2.2_2']
																											# 106: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f5) and (cons_f193)
																											yield 106, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp582.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp582))
				if pattern_index == 102:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f194)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f195)(subst1):
																	# State 6404
																	if len(subjects2) >= 1:
																		tmp585 = []
																		tmp585.append(subjects2.popleft())
																		while True:
																			if len(tmp585) > 1:
																				tmp586 = create_operation_expression(associative1, tmp585)
																			elif len(tmp585) == 1:
																				tmp586 = tmp585[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp586)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													# State 6405
																													if len(subjects2) == 0:
																														# State 6406
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.1.0']
																															tmp_subst['b'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['m'] = subst2['i2.2']
																															tmp_subst['d'] = subst2['i2.2.1.0_2']
																															tmp_subst['c'] = subst2['i2.2.0_1']
																															tmp_subst['n'] = subst2['i2.2_1']
																															tmp_subst['f'] = subst2['i2.2.1.0_3']
																															tmp_subst['e'] = subst2['i2.2.0_2']
																															tmp_subst['p'] = subst2['i2.2_2']
																															# 107: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
																															yield 107, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp585.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp585))
				if pattern_index == 103:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f157)(subst1):
														if 'i2.2_1' in subst1 and CustomConstraint(cons_f196)(subst1):
															# State 6413
															if len(subjects2) >= 1:
																tmp588 = []
																tmp588.append(subjects2.popleft())
																while True:
																	if len(tmp588) > 1:
																		tmp589 = create_operation_expression(associative1, tmp588)
																	elif len(tmp588) == 1:
																		tmp589 = tmp588[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp589)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																										# State 6414
																										if len(subjects2) == 0:
																											# State 6415
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['m'] = subst2['i2.2']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['n'] = subst2['i2.2_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['p'] = subst2['i2.2_2']
																												# 108: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f5) and (cons_f157) and (cons_f196)
																												yield 108, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp588.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp588))
				if pattern_index == 104:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f157)(subst1):
																# State 6416
																if len(subjects2) >= 1:
																	tmp591 = []
																	tmp591.append(subjects2.popleft())
																	while True:
																		if len(tmp591) > 1:
																			tmp592 = create_operation_expression(associative1, tmp591)
																		elif len(tmp591) == 1:
																			tmp592 = tmp591[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp592)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6417
																												if len(subjects2) == 0:
																													# State 6418
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 109: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f157) and (cons_f23)
																														yield 109, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp591.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp591))
				if pattern_index == 105:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f177)(subst1):
															if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
																if 'i2.2_2' in subst1 and 'i2.2.0_3' in subst1 and CustomConstraint(cons_f197)(subst1):
																	# State 6421
																	if len(subjects2) >= 1:
																		tmp594 = []
																		tmp594.append(subjects2.popleft())
																		while True:
																			if len(tmp594) > 1:
																				tmp595 = create_operation_expression(associative1, tmp594)
																			elif len(tmp594) == 1:
																				tmp595 = tmp594[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.0', tmp595)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6422
																												if len(subjects2) == 0:
																													# State 6423
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.0']
																														tmp_subst['b'] = subst2['i2.2.0_1']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0']
																														tmp_subst['c'] = subst2['i2.2.0_2']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_1']
																														tmp_subst['e'] = subst2['i2.2.0_3']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 110: Integral((b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f177) and (cons_f197)
																														yield 110, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp594.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp594))
				if pattern_index == 106:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f198)(subst1):
																if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f199)(subst1):
																	# State 6424
																	if len(subjects2) >= 1:
																		tmp597 = []
																		tmp597.append(subjects2.popleft())
																		while True:
																			if len(tmp597) > 1:
																				tmp598 = create_operation_expression(associative1, tmp597)
																			elif len(tmp597) == 1:
																				tmp598 = tmp597[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.0', tmp598)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												# State 6425
																												if len(subjects2) == 0:
																													# State 6426
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.0']
																														tmp_subst['b'] = subst2['i2.2.0_1']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['d'] = subst2['i2.2.1.0']
																														tmp_subst['c'] = subst2['i2.2.0_2']
																														tmp_subst['n'] = subst2['i2.2_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_1']
																														tmp_subst['e'] = subst2['i2.2.0_3']
																														tmp_subst['p'] = subst2['i2.2_2']
																														# 111: Integral((b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f198) and (cons_f199)
																														yield 111, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp597.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp597))
				if pattern_index == 107:
					if 'i2.2.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
												if 'i2.2.0_2' in subst1 and CustomConstraint(cons_f117)(subst1):
													if 'i2.2.0_3' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f48)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f125)(subst1):
															if 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f5)(subst1):
																# State 6427
																if len(subjects2) >= 1:
																	tmp600 = []
																	tmp600.append(subjects2.popleft())
																	while True:
																		if len(tmp600) > 1:
																			tmp601 = create_operation_expression(associative1, tmp600)
																		elif len(tmp600) == 1:
																			tmp601 = tmp600[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.0', tmp601)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2.2.0_3' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											# State 6428
																											if len(subjects2) == 0:
																												# State 6429
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.0']
																													tmp_subst['b'] = subst2['i2.2.0_1']
																													tmp_subst['m'] = subst2['i2.2']
																													tmp_subst['d'] = subst2['i2.2.1.0']
																													tmp_subst['c'] = subst2['i2.2.0_2']
																													tmp_subst['n'] = subst2['i2.2_1']
																													tmp_subst['f'] = subst2['i2.2.1.0_1']
																													tmp_subst['e'] = subst2['i2.2.0_3']
																													tmp_subst['p'] = subst2['i2.2_2']
																													# 112: Integral((b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f117)
																													yield 112, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp600.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp600))
				if pattern_index == 108:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
														if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
															if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
																if 'i2.2_2' in subst1 and CustomConstraint(cons_f38)(subst1):
																	if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f200)(subst1):
																		# State 6430
																		if len(subjects2) >= 1:
																			tmp603 = []
																			tmp603.append(subjects2.popleft())
																			while True:
																				if len(tmp603) > 1:
																					tmp604 = create_operation_expression(associative1, tmp603)
																				elif len(tmp603) == 1:
																					tmp604 = tmp603[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp604)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f200)(subst2):
																														# State 6431
																														if len(subjects2) == 0:
																															# State 6432
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_2']
																																# 113: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f23) and (cons_f38) and (cons_f120) and (cons_f200)
																																yield 113, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp603.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp603))
				if pattern_index == 109:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
													if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
														if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
															if 'i2.2_2' in subst1 and CustomConstraint(cons_f38)(subst1):
																if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f201)(subst1):
																	if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f202)(subst1):
																		# State 6433
																		if len(subjects2) >= 1:
																			tmp606 = []
																			tmp606.append(subjects2.popleft())
																			while True:
																				if len(tmp606) > 1:
																					tmp607 = create_operation_expression(associative1, tmp606)
																				elif len(tmp606) == 1:
																					tmp607 = tmp606[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp607)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f202)(subst2):
																														# State 6434
																														if len(subjects2) == 0:
																															# State 6435
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_2']
																																# 114: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f18) and (cons_f23) and (cons_f38) and (cons_f201) and (cons_f202)
																																yield 114, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp606.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp606))
				if pattern_index == 110:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
														if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
															if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
																if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
																	if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f182)(subst1):
																		if 'i2.2_2' in subst1 and CustomConstraint(cons_f147)(subst1):
																			if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f203)(subst1):
																				if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f204)(subst1):
																					# State 6436
																					if len(subjects2) >= 1:
																						tmp609 = []
																						tmp609.append(subjects2.popleft())
																						while True:
																							if len(tmp609) > 1:
																								tmp610 = create_operation_expression(associative1, tmp609)
																							elif len(tmp609) == 1:
																								tmp610 = tmp609[0]
																							else:
																								assert False, "Unreachable"
																							subst2 = Substitution(subst1)
																							try:
																								subst2.try_add_variable('i2.2.1.0', tmp610)
																							except ValueError:
																								pass
																							else:
																								if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																												if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																													if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																														if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																															if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																																if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f203)(subst2):
																																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f204)(subst2):
																																			# State 6437
																																			if len(subjects2) == 0:
																																				# State 6438
																																				if len(subjects) == 0:
																																					tmp_subst = Substitution()
																																					tmp_subst['x'] = subst2['i2.2.1.0']
																																					tmp_subst['b'] = subst2['i2.2.1.0_1']
																																					tmp_subst['a'] = subst2['i2.2.0']
																																					tmp_subst['m'] = subst2['i2.2']
																																					tmp_subst['d'] = subst2['i2.2.1.0_2']
																																					tmp_subst['c'] = subst2['i2.2.0_1']
																																					tmp_subst['n'] = subst2['i2.2_1']
																																					tmp_subst['f'] = subst2['i2.2.1.0_3']
																																					tmp_subst['e'] = subst2['i2.2.0_2']
																																					tmp_subst['p'] = subst2['i2.2_2']
																																					# 115: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f147) and (cons_f120) and (cons_f182) and (cons_f203) and (cons_f204)
																																					yield 115, tmp_subst
																							if len(subjects2) == 0:
																								break
																							tmp609.append(subjects2.popleft())
																						subjects2.extendleft(reversed(tmp609))
				if pattern_index == 111:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f120)(subst1):
														if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
															if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
																if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
																	if 'i2.2_2' in subst1 and CustomConstraint(cons_f147)(subst1):
																		if 'i2.2.1.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f205)(subst1):
																			# State 6439
																			if len(subjects2) >= 1:
																				tmp612 = []
																				tmp612.append(subjects2.popleft())
																				while True:
																					if len(tmp612) > 1:
																						tmp613 = create_operation_expression(associative1, tmp612)
																					elif len(tmp612) == 1:
																						tmp613 = tmp612[0]
																					else:
																						assert False, "Unreachable"
																					subst2 = Substitution(subst1)
																					try:
																						subst2.try_add_variable('i2.2.1.0', tmp613)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																										if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																											if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																												if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																													if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																														if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																															# State 6440
																															if len(subjects2) == 0:
																																# State 6441
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.2.1.0_3']
																																	tmp_subst['e'] = subst2['i2.2.0_2']
																																	tmp_subst['p'] = subst2['i2.2_2']
																																	# 116: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f147) and (cons_f120) and (cons_f205)
																																	yield 116, tmp_subst
																					if len(subjects2) == 0:
																						break
																					tmp612.append(subjects2.popleft())
																				subjects2.extendleft(reversed(tmp612))
				if pattern_index == 112:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f23)(subst1):
													if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
														if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
															if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
																if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f201)(subst1):
																	if 'i2.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f202)(subst1):
																		if 'i2.2_2' in subst1 and CustomConstraint(cons_f147)(subst1):
																			if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f206)(subst1):
																				# State 6442
																				if len(subjects2) >= 1:
																					tmp615 = []
																					tmp615.append(subjects2.popleft())
																					while True:
																						if len(tmp615) > 1:
																							tmp616 = create_operation_expression(associative1, tmp615)
																						elif len(tmp615) == 1:
																							tmp616 = tmp615[0]
																						else:
																							assert False, "Unreachable"
																						subst2 = Substitution(subst1)
																						try:
																							subst2.try_add_variable('i2.2.1.0', tmp616)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																											if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																												if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																													if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																														if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																															if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																																if 'i2.2.1.0_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f202)(subst2):
																																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f206)(subst2):
																																		# State 6443
																																		if len(subjects2) == 0:
																																			# State 6444
																																			if len(subjects) == 0:
																																				tmp_subst = Substitution()
																																				tmp_subst['x'] = subst2['i2.2.1.0']
																																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																																				tmp_subst['a'] = subst2['i2.2.0']
																																				tmp_subst['m'] = subst2['i2.2']
																																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																																				tmp_subst['c'] = subst2['i2.2.0_1']
																																				tmp_subst['n'] = subst2['i2.2_1']
																																				tmp_subst['f'] = subst2['i2.2.1.0_3']
																																				tmp_subst['e'] = subst2['i2.2.0_2']
																																				tmp_subst['p'] = subst2['i2.2_2']
																																				# 117: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f18) and (cons_f23) and (cons_f147) and (cons_f201) and (cons_f202) and (cons_f206)
																																				yield 117, tmp_subst
																						if len(subjects2) == 0:
																							break
																						tmp615.append(subjects2.popleft())
																					subjects2.extendleft(reversed(tmp615))
				if pattern_index == 113:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f68)(subst1):
												if 'i2' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f69)(subst1):
																# State 6448
																if len(subjects2) >= 1:
																	tmp618 = []
																	tmp618.append(subjects2.popleft())
																	while True:
																		if len(tmp618) > 1:
																			tmp619 = create_operation_expression(associative1, tmp618)
																		elif len(tmp618) == 1:
																			tmp619 = tmp618[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2', tmp619)
																		except ValueError:
																			pass
																		else:
																			if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f68)(subst2):
																										if 'i2' in subst2 and 'i2.2.0_2' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f69)(subst2):
																														# State 6449
																														if len(subjects2) == 0:
																															# State 6450
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['u'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_2']
																																tmp_subst['x'] = subst2['i2']
																																# 118: Integral((a + b*u)**m*(c + d*u)**n*(e + f*u)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f68) and (cons_f69)
																																yield 118, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp618.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp618))
				if pattern_index == 114:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f207)(subst1):
														# State 6462
														if len(subjects2) >= 1:
															tmp621 = []
															tmp621.append(subjects2.popleft())
															while True:
																if len(tmp621) > 1:
																	tmp622 = create_operation_expression(associative1, tmp621)
																elif len(tmp621) == 1:
																	tmp622 = tmp621[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp622)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									# State 6463
																									if len(subjects2) == 0:
																										# State 6464
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2_1']
																											tmp_subst['f'] = subst2['i2.1.1.0']
																											tmp_subst['e'] = subst2['i2.1.0']
																											tmp_subst['h'] = subst2['i2.1.1.0_1']
																											tmp_subst['g'] = subst2['i2.1.0_1']
																											# 119: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f207)
																											yield 119, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp621.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp621))
				if pattern_index == 115:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f72)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
													if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
														if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
															if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																	if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f210)(subst1):
																		# State 6465
																		if len(subjects2) >= 1:
																			tmp624 = []
																			tmp624.append(subjects2.popleft())
																			while True:
																				if len(tmp624) > 1:
																					tmp625 = create_operation_expression(associative1, tmp624)
																				elif len(tmp624) == 1:
																					tmp625 = tmp624[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp625)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6466
																															if len(subjects2) == 0:
																																# State 6467
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.1.1.0']
																																	tmp_subst['e'] = subst2['i2.1.0']
																																	tmp_subst['h'] = subst2['i2.1.1.0_1']
																																	tmp_subst['g'] = subst2['i2.1.0_1']
																																	# 120: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f72) and (cons_f66) and (cons_f210)
																																	yield 120, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp624.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp624))
				if pattern_index == 116:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2_1' in subst1 and CustomConstraint(cons_f89)(subst1):
																# State 6468
																if len(subjects2) >= 1:
																	tmp627 = []
																	tmp627.append(subjects2.popleft())
																	while True:
																		if len(tmp627) > 1:
																			tmp628 = create_operation_expression(associative1, tmp627)
																		elif len(tmp627) == 1:
																			tmp628 = tmp627[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp628)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																										if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																											# State 6469
																											if len(subjects2) == 0:
																												# State 6470
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['m'] = subst2['i2.2']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['n'] = subst2['i2.2_1']
																													tmp_subst['f'] = subst2['i2.1.1.0']
																													tmp_subst['e'] = subst2['i2.1.0']
																													tmp_subst['h'] = subst2['i2.1.1.0_1']
																													tmp_subst['g'] = subst2['i2.1.0_1']
																													# 121: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f93) and (cons_f94) and (cons_f89)
																													yield 121, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp627.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp627))
				if pattern_index == 117:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f211)(subst1):
																# State 6471
																if len(subjects2) >= 1:
																	tmp630 = []
																	tmp630.append(subjects2.popleft())
																	while True:
																		if len(tmp630) > 1:
																			tmp631 = create_operation_expression(associative1, tmp630)
																		elif len(tmp630) == 1:
																			tmp631 = tmp630[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp631)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																												if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																													# State 6472
																													if len(subjects2) == 0:
																														# State 6473
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.1.0']
																															tmp_subst['b'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['m'] = subst2['i2.2']
																															tmp_subst['d'] = subst2['i2.2.1.0_2']
																															tmp_subst['c'] = subst2['i2.2.0_1']
																															tmp_subst['n'] = subst2['i2.2_1']
																															tmp_subst['f'] = subst2['i2.1.1.0']
																															tmp_subst['e'] = subst2['i2.1.0']
																															tmp_subst['h'] = subst2['i2.1.1.0_1']
																															tmp_subst['g'] = subst2['i2.1.0_1']
																															# 122: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f211)
																															yield 122, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp630.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp630))
				if pattern_index == 118:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
												if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
															if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																if 'i2.2' in subst1 and CustomConstraint(cons_f212)(subst1):
																	if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f213)(subst1):
																		# State 6474
																		if len(subjects2) >= 1:
																			tmp633 = []
																			tmp633.append(subjects2.popleft())
																			while True:
																				if len(tmp633) > 1:
																					tmp634 = create_operation_expression(associative1, tmp633)
																				elif len(tmp633) == 1:
																					tmp634 = tmp633[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp634)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6475
																															if len(subjects2) == 0:
																																# State 6476
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.1.1.0']
																																	tmp_subst['e'] = subst2['i2.1.0']
																																	tmp_subst['h'] = subst2['i2.1.1.0_1']
																																	tmp_subst['g'] = subst2['i2.1.0_1']
																																	# 123: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f212) and (cons_f66) and (cons_f213)
																																	yield 123, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp633.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp633))
				if pattern_index == 119:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.1.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f213)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f214)(subst1):
																	# State 6477
																	if len(subjects2) >= 1:
																		tmp636 = []
																		tmp636.append(subjects2.popleft())
																		while True:
																			if len(tmp636) > 1:
																				tmp637 = create_operation_expression(associative1, tmp636)
																			elif len(tmp636) == 1:
																				tmp637 = tmp636[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp637)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																													if 'i2.1.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																														# State 6478
																														if len(subjects2) == 0:
																															# State 6479
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.1.1.0']
																																tmp_subst['e'] = subst2['i2.1.0']
																																tmp_subst['h'] = subst2['i2.1.1.0_1']
																																tmp_subst['g'] = subst2['i2.1.0_1']
																																# 124: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f214) and (cons_f213)
																																yield 124, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp636.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp636))
				if pattern_index == 120:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
													if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f215)(subst1):
															# State 6480
															if len(subjects2) >= 1:
																tmp639 = []
																tmp639.append(subjects2.popleft())
																while True:
																	if len(tmp639) > 1:
																		tmp640 = create_operation_expression(associative1, tmp639)
																	elif len(tmp639) == 1:
																		tmp640 = tmp639[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp640)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																										if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																											# State 6481
																											if len(subjects2) == 0:
																												# State 6482
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['x'] = subst2['i2.2.1.0']
																													tmp_subst['b'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['m'] = subst2['i2.2']
																													tmp_subst['d'] = subst2['i2.2.1.0_2']
																													tmp_subst['c'] = subst2['i2.2.0_1']
																													tmp_subst['n'] = subst2['i2.2_1']
																													tmp_subst['f'] = subst2['i2.2.1.0_3']
																													tmp_subst['e'] = subst2['i2.2.0_2']
																													tmp_subst['p'] = subst2['i2.2_2']
																													tmp_subst['h'] = subst2['i2.1.1.0']
																													tmp_subst['g'] = subst2['i2.1.0']
																													# 125: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f215)
																													yield 125, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp639.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp639))
				if pattern_index == 121:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		# State 6483
																		if len(subjects2) >= 1:
																			tmp642 = []
																			tmp642.append(subjects2.popleft())
																			while True:
																				if len(tmp642) > 1:
																					tmp643 = create_operation_expression(associative1, tmp642)
																				elif len(tmp642) == 1:
																					tmp643 = tmp642[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp643)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																													if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																														# State 6484
																														if len(subjects2) == 0:
																															# State 6485
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_2']
																																tmp_subst['h'] = subst2['i2.1.1.0']
																																tmp_subst['g'] = subst2['i2.1.0']
																																# 126: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f88) and (cons_f17)
																																yield 126, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp642.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp642))
				if pattern_index == 122:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f93)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f88)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f170)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		# State 6486
																		if len(subjects2) >= 1:
																			tmp645 = []
																			tmp645.append(subjects2.popleft())
																			while True:
																				if len(tmp645) > 1:
																					tmp646 = create_operation_expression(associative1, tmp645)
																				elif len(tmp645) == 1:
																					tmp646 = tmp645[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp646)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																												if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																													if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																														# State 6487
																														if len(subjects2) == 0:
																															# State 6488
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['m'] = subst2['i2.2']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2_1']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_2']
																																tmp_subst['h'] = subst2['i2.1.1.0']
																																tmp_subst['g'] = subst2['i2.1.0']
																																# 127: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f5) and (cons_f93) and (cons_f94) and (cons_f88) and (cons_f170)
																																yield 127, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp645.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp645))
				if pattern_index == 123:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		# State 6489
																		if len(subjects2) >= 1:
																			tmp648 = []
																			tmp648.append(subjects2.popleft())
																			while True:
																				if len(tmp648) > 1:
																					tmp649 = create_operation_expression(associative1, tmp648)
																				elif len(tmp648) == 1:
																					tmp649 = tmp648[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp649)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6490
																															if len(subjects2) == 0:
																																# State 6491
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.2.1.0_3']
																																	tmp_subst['e'] = subst2['i2.2.0_2']
																																	tmp_subst['p'] = subst2['i2.2_2']
																																	tmp_subst['h'] = subst2['i2.1.1.0']
																																	tmp_subst['g'] = subst2['i2.1.0']
																																	# 128: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f17)
																																	yield 128, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp648.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp648))
				if pattern_index == 124:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f94)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
												if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f170)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		# State 6492
																		if len(subjects2) >= 1:
																			tmp651 = []
																			tmp651.append(subjects2.popleft())
																			while True:
																				if len(tmp651) > 1:
																					tmp652 = create_operation_expression(associative1, tmp651)
																				elif len(tmp651) == 1:
																					tmp652 = tmp651[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp652)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6493
																															if len(subjects2) == 0:
																																# State 6494
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.2.1.0_3']
																																	tmp_subst['e'] = subst2['i2.2.0_2']
																																	tmp_subst['p'] = subst2['i2.2_2']
																																	tmp_subst['h'] = subst2['i2.1.1.0']
																																	tmp_subst['g'] = subst2['i2.1.0']
																																	# 129: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f94) and (cons_f170)
																																	yield 129, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp651.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp651))
				if pattern_index == 125:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
															if 'i2.2' in subst1 and CustomConstraint(cons_f168)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f144)(subst1):
																			# State 6495
																			if len(subjects2) >= 1:
																				tmp654 = []
																				tmp654.append(subjects2.popleft())
																				while True:
																					if len(tmp654) > 1:
																						tmp655 = create_operation_expression(associative1, tmp654)
																					elif len(tmp654) == 1:
																						tmp655 = tmp654[0]
																					else:
																						assert False, "Unreachable"
																					subst2 = Substitution(subst1)
																					try:
																						subst2.try_add_variable('i2.2.1.0', tmp655)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																														if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																															if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																																# State 6496
																																if len(subjects2) == 0:
																																	# State 6497
																																	if len(subjects) == 0:
																																		tmp_subst = Substitution()
																																		tmp_subst['x'] = subst2['i2.2.1.0']
																																		tmp_subst['b'] = subst2['i2.2.1.0_1']
																																		tmp_subst['a'] = subst2['i2.2.0']
																																		tmp_subst['m'] = subst2['i2.2']
																																		tmp_subst['d'] = subst2['i2.2.1.0_2']
																																		tmp_subst['c'] = subst2['i2.2.0_1']
																																		tmp_subst['n'] = subst2['i2.2_1']
																																		tmp_subst['f'] = subst2['i2.2.1.0_3']
																																		tmp_subst['e'] = subst2['i2.2.0_2']
																																		tmp_subst['p'] = subst2['i2.2_2']
																																		tmp_subst['h'] = subst2['i2.1.1.0']
																																		tmp_subst['g'] = subst2['i2.1.0']
																																		# 130: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f17)
																																		yield 130, tmp_subst
																					if len(subjects2) == 0:
																						break
																					tmp654.append(subjects2.popleft())
																				subjects2.extendleft(reversed(tmp654))
				if pattern_index == 126:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f31)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and CustomConstraint(cons_f168)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f170)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f144)(subst1):
																			# State 6498
																			if len(subjects2) >= 1:
																				tmp657 = []
																				tmp657.append(subjects2.popleft())
																				while True:
																					if len(tmp657) > 1:
																						tmp658 = create_operation_expression(associative1, tmp657)
																					elif len(tmp657) == 1:
																						tmp658 = tmp657[0]
																					else:
																						assert False, "Unreachable"
																					subst2 = Substitution(subst1)
																					try:
																						subst2.try_add_variable('i2.2.1.0', tmp658)
																					except ValueError:
																						pass
																					else:
																						if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																														if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																															if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																																# State 6499
																																if len(subjects2) == 0:
																																	# State 6500
																																	if len(subjects) == 0:
																																		tmp_subst = Substitution()
																																		tmp_subst['x'] = subst2['i2.2.1.0']
																																		tmp_subst['b'] = subst2['i2.2.1.0_1']
																																		tmp_subst['a'] = subst2['i2.2.0']
																																		tmp_subst['m'] = subst2['i2.2']
																																		tmp_subst['d'] = subst2['i2.2.1.0_2']
																																		tmp_subst['c'] = subst2['i2.2.0_1']
																																		tmp_subst['n'] = subst2['i2.2_1']
																																		tmp_subst['f'] = subst2['i2.2.1.0_3']
																																		tmp_subst['e'] = subst2['i2.2.0_2']
																																		tmp_subst['p'] = subst2['i2.2_2']
																																		tmp_subst['h'] = subst2['i2.1.1.0']
																																		tmp_subst['g'] = subst2['i2.1.0']
																																		# 131: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f31) and (cons_f168) and (cons_f144) and (cons_f170)
																																		yield 131, tmp_subst
																					if len(subjects2) == 0:
																						break
																					tmp657.append(subjects2.popleft())
																				subjects2.extendleft(reversed(tmp657))
				if pattern_index == 127:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f194)(subst1):
															if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f195)(subst1):
																if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																		# State 6501
																		if len(subjects2) >= 1:
																			tmp660 = []
																			tmp660.append(subjects2.popleft())
																			while True:
																				if len(tmp660) > 1:
																					tmp661 = create_operation_expression(associative1, tmp660)
																				elif len(tmp660) == 1:
																					tmp661 = tmp660[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp661)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6502
																															if len(subjects2) == 0:
																																# State 6503
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.2.1.0_3']
																																	tmp_subst['e'] = subst2['i2.2.0_2']
																																	tmp_subst['p'] = subst2['i2.2_2']
																																	tmp_subst['h'] = subst2['i2.1.1.0']
																																	tmp_subst['g'] = subst2['i2.1.0']
																																	# 132: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f194) and (cons_f66) and (cons_f195)
																																	yield 132, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp660.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp660))
				if pattern_index == 128:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6504
														if len(subjects2) >= 1:
															tmp663 = []
															tmp663.append(subjects2.popleft())
															while True:
																if len(tmp663) > 1:
																	tmp664 = create_operation_expression(associative1, tmp663)
																elif len(tmp663) == 1:
																	tmp664 = tmp663[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp664)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6505
																										if len(subjects2) == 0:
																											# State 6506
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['p'] = subst2['i2.2']
																												tmp_subst['h'] = subst2['i2.1.1.0']
																												tmp_subst['g'] = subst2['i2.1.0']
																												# 133: Integral((e + f*x)**p*(g + h*x)/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 133, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp663.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp663))
				if pattern_index == 129:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.1.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f217)(subst1):
																# State 6507
																if len(subjects2) >= 1:
																	tmp666 = []
																	tmp666.append(subjects2.popleft())
																	while True:
																		if len(tmp666) > 1:
																			tmp667 = create_operation_expression(associative1, tmp666)
																		elif len(tmp666) == 1:
																			tmp667 = tmp666[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp667)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																											if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																												if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																													if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.1.0' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f217)(subst2):
																														# State 6508
																														if len(subjects2) == 0:
																															# State 6509
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['x'] = subst2['i2.2.1.0']
																																tmp_subst['b'] = subst2['i2.2.1.0_1']
																																tmp_subst['a'] = subst2['i2.2.0']
																																tmp_subst['d'] = subst2['i2.2.1.0_2']
																																tmp_subst['c'] = subst2['i2.2.0_1']
																																tmp_subst['n'] = subst2['i2.2']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_2']
																																tmp_subst['p'] = subst2['i2.2_1']
																																tmp_subst['h'] = subst2['i2.1.1.0']
																																tmp_subst['g'] = subst2['i2.1.0']
																																# 134: Integral((c + d*x)**n*(e + f*x)**p*(g + h*x)/(a + b*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f4) and (cons_f5) and (cons_f217)
																																yield 134, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp666.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp666))
				if pattern_index == 130:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f188)(subst1):
												if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
													if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
														if 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f218)(subst1):
															# State 6510
															if len(subjects2) >= 1:
																tmp669 = []
																tmp669.append(subjects2.popleft())
																while True:
																	if len(tmp669) > 1:
																		tmp670 = create_operation_expression(associative1, tmp669)
																	elif len(tmp669) == 1:
																		tmp670 = tmp669[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.0', tmp670)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																						if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f188)(subst2):
																									if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																										if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																											if 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f218)(subst2):
																												# State 6511
																												if len(subjects2) == 0:
																													# State 6512
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['h'] = subst2['i2.1.1.0']
																														tmp_subst['g'] = subst2['i2.1.0']
																														# 135: Integral((g + h*x)/(sqrt(a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f188) and (cons_f218)
																														yield 135, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp669.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp669))
				if pattern_index == 131:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
															if 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f219)(subst1):
																	# State 6513
																	if len(subjects2) >= 1:
																		tmp672 = []
																		tmp672.append(subjects2.popleft())
																		while True:
																			if len(tmp672) > 1:
																				tmp673 = create_operation_expression(associative1, tmp672)
																			elif len(tmp672) == 1:
																				tmp673 = tmp672[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.0', tmp673)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																									if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																										if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																												if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																															# State 6514
																															if len(subjects2) == 0:
																																# State 6515
																																if len(subjects) == 0:
																																	tmp_subst = Substitution()
																																	tmp_subst['x'] = subst2['i2.2.1.0']
																																	tmp_subst['b'] = subst2['i2.2.1.0_1']
																																	tmp_subst['a'] = subst2['i2.2.0']
																																	tmp_subst['m'] = subst2['i2.2']
																																	tmp_subst['d'] = subst2['i2.2.1.0_2']
																																	tmp_subst['c'] = subst2['i2.2.0_1']
																																	tmp_subst['n'] = subst2['i2.2_1']
																																	tmp_subst['f'] = subst2['i2.2.1.0_3']
																																	tmp_subst['e'] = subst2['i2.2.0_2']
																																	tmp_subst['p'] = subst2['i2.2_2']
																																	tmp_subst['h'] = subst2['i2.1.1.0']
																																	tmp_subst['g'] = subst2['i2.1.0']
																																	# 136: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f219)
																																	yield 136, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp672.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp672))
				if pattern_index == 132:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2' in subst1 and CustomConstraint(cons_f13)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f145)(subst1):
													if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f50)(subst1):
																# State 6529
																if len(subjects2) >= 1:
																	tmp675 = []
																	tmp675.append(subjects2.popleft())
																	while True:
																		if len(tmp675) > 1:
																			tmp676 = create_operation_expression(associative1, tmp675)
																		elif len(tmp675) == 1:
																			tmp676 = tmp675[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp676)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																										if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																											if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
																												# State 6530
																												if len(subjects2) == 0:
																													# State 6531
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.0']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['d'] = subst2['i2.2.1.0_2']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['f'] = subst2['i2.2.1.0_3']
																														tmp_subst['e'] = subst2['i2.2.0_2']
																														tmp_subst['p'] = subst2['i2.2']
																														tmp_subst['h'] = subst2['i2.2.1.0_4']
																														tmp_subst['g'] = subst2['i2.2.0_3']
																														tmp_subst['q'] = subst2['i2.2_1']
																														# 137: Integral((e + f*x)**p*(g + h*x)**q/((a + b*x)*(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f50) and (cons_f13) and (cons_f145)
																														yield 137, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp675.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp675))
				if pattern_index == 133:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6544
														if len(subjects2) >= 1:
															tmp678 = []
															tmp678.append(subjects2.popleft())
															while True:
																if len(tmp678) > 1:
																	tmp679 = create_operation_expression(associative1, tmp678)
																elif len(tmp678) == 1:
																	tmp679 = tmp678[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp679)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6545
																										if len(subjects2) == 0:
																											# State 6546
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 138: Integral(1/((a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 138, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp678.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp678))
				if pattern_index == 134:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2' in subst1 and CustomConstraint(cons_f80)(subst1):
														# State 6547
														if len(subjects2) >= 1:
															tmp681 = []
															tmp681.append(subjects2.popleft())
															while True:
																if len(tmp681) > 1:
																	tmp682 = create_operation_expression(associative1, tmp681)
																elif len(tmp681) == 1:
																	tmp682 = tmp681[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp682)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									# State 6548
																									if len(subjects2) == 0:
																										# State 6549
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['x'] = subst2['i2.2.1.0']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['d'] = subst2['i2.2.1.0_2']
																											tmp_subst['c'] = subst2['i2.2.0_1']
																											tmp_subst['n'] = subst2['i2.2']
																											tmp_subst['f'] = subst2['i2.2.1.0_3']
																											tmp_subst['e'] = subst2['i2.2.0_2']
																											tmp_subst['h'] = subst2['i2.2.1.0_4']
																											tmp_subst['g'] = subst2['i2.2.0_3']
																											# 139: Integral((c + d*x)**n/((a + b*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f80)
																											yield 139, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp681.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp681))
				if pattern_index == 135:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6556
														if len(subjects2) >= 1:
															tmp684 = []
															tmp684.append(subjects2.popleft())
															while True:
																if len(tmp684) > 1:
																	tmp685 = create_operation_expression(associative1, tmp684)
																elif len(tmp684) == 1:
																	tmp685 = tmp684[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp685)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6557
																										if len(subjects2) == 0:
																											# State 6558
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 140: Integral(sqrt(e + f*x)*sqrt(g + h*x)/((a + b*x)*sqrt(c + d*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 140, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp684.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp684))
				if pattern_index == 136:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6559
														if len(subjects2) >= 1:
															tmp687 = []
															tmp687.append(subjects2.popleft())
															while True:
																if len(tmp687) > 1:
																	tmp688 = create_operation_expression(associative1, tmp687)
																elif len(tmp687) == 1:
																	tmp688 = tmp687[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp688)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6560
																										if len(subjects2) == 0:
																											# State 6561
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 141: Integral(1/(sqrt(a + b*x)*sqrt(c + d*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 141, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp687.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp687))
				if pattern_index == 137:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6574
														if len(subjects2) >= 1:
															tmp690 = []
															tmp690.append(subjects2.popleft())
															while True:
																if len(tmp690) > 1:
																	tmp691 = create_operation_expression(associative1, tmp690)
																elif len(tmp690) == 1:
																	tmp691 = tmp690[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp691)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6575
																										if len(subjects2) == 0:
																											# State 6576
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 142: Integral(sqrt(c + d*x)/((a + b*x)**(3/2)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 142, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp690.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp690))
				if pattern_index == 138:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6583
														if len(subjects2) >= 1:
															tmp693 = []
															tmp693.append(subjects2.popleft())
															while True:
																if len(tmp693) > 1:
																	tmp694 = create_operation_expression(associative1, tmp693)
																elif len(tmp693) == 1:
																	tmp694 = tmp693[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp694)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6584
																										if len(subjects2) == 0:
																											# State 6585
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 143: Integral(sqrt(a + b*x)/(sqrt(c + d*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 143, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp693.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp693))
				if pattern_index == 139:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6586
														if len(subjects2) >= 1:
															tmp696 = []
															tmp696.append(subjects2.popleft())
															while True:
																if len(tmp696) > 1:
																	tmp697 = create_operation_expression(associative1, tmp696)
																elif len(tmp696) == 1:
																	tmp697 = tmp696[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp697)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6587
																										if len(subjects2) == 0:
																											# State 6588
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 144: Integral(1/((a + b*x)**(3/2)*sqrt(c + d*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 144, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp696.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp696))
				if pattern_index == 140:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6589
														if len(subjects2) >= 1:
															tmp699 = []
															tmp699.append(subjects2.popleft())
															while True:
																if len(tmp699) > 1:
																	tmp700 = create_operation_expression(associative1, tmp699)
																elif len(tmp699) == 1:
																	tmp700 = tmp699[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp700)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6590
																										if len(subjects2) == 0:
																											# State 6591
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 145: Integral(sqrt(a + b*x)*sqrt(c + d*x)/(sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 145, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp699.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp699))
				if pattern_index == 141:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f216)(subst1):
														# State 6598
														if len(subjects2) >= 1:
															tmp702 = []
															tmp702.append(subjects2.popleft())
															while True:
																if len(tmp702) > 1:
																	tmp703 = create_operation_expression(associative1, tmp702)
																elif len(tmp702) == 1:
																	tmp703 = tmp702[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.0', tmp703)
																except ValueError:
																	pass
																else:
																	if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																								if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f216)(subst2):
																										# State 6599
																										if len(subjects2) == 0:
																											# State 6600
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.0']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['d'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.0_1']
																												tmp_subst['f'] = subst2['i2.2.1.0_3']
																												tmp_subst['e'] = subst2['i2.2.0_2']
																												tmp_subst['h'] = subst2['i2.2.1.0_4']
																												tmp_subst['g'] = subst2['i2.2.0_3']
																												# 146: Integral((a + b*x)**(3/2)/(sqrt(c + d*x)*sqrt(e + f*x)*sqrt(g + h*x)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f216)
																												yield 146, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp702.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp702))
				if pattern_index == 142:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
														if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
															if 'i2.2_3' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f220)(subst1):
																# State 6607
																if len(subjects2) >= 1:
																	tmp705 = []
																	tmp705.append(subjects2.popleft())
																	while True:
																		if len(tmp705) > 1:
																			tmp706 = create_operation_expression(associative1, tmp705)
																		elif len(tmp705) == 1:
																			tmp706 = tmp705[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2.2.1.0', tmp706)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																								if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																									if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																										if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																											if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																												if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																													# State 6608
																													if len(subjects2) == 0:
																														# State 6609
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['x'] = subst2['i2.2.1.0']
																															tmp_subst['b'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['m'] = subst2['i2.2']
																															tmp_subst['d'] = subst2['i2.2.1.0_2']
																															tmp_subst['c'] = subst2['i2.2.0_1']
																															tmp_subst['n'] = subst2['i2.2_1']
																															tmp_subst['f'] = subst2['i2.2.1.0_3']
																															tmp_subst['e'] = subst2['i2.2.0_2']
																															tmp_subst['p'] = subst2['i2.2_2']
																															tmp_subst['h'] = subst2['i2.2.1.0_4']
																															tmp_subst['g'] = subst2['i2.2.0_3']
																															tmp_subst['q'] = subst2['i2.2_3']
																															# 147: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f220)
																															yield 147, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp705.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp705))
				if pattern_index == 143:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f219)(subst1):
															if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
																if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																	if 'i2.2_3' in subst1 and CustomConstraint(cons_f221)(subst1):
																		# State 6610
																		if len(subjects2) >= 1:
																			tmp708 = []
																			tmp708.append(subjects2.popleft())
																			while True:
																				if len(tmp708) > 1:
																					tmp709 = create_operation_expression(associative1, tmp708)
																				elif len(tmp708) == 1:
																					tmp709 = tmp708[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp709)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																														if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																															if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																																# State 6611
																																if len(subjects2) == 0:
																																	# State 6612
																																	if len(subjects) == 0:
																																		tmp_subst = Substitution()
																																		tmp_subst['x'] = subst2['i2.2.1.0']
																																		tmp_subst['b'] = subst2['i2.2.1.0_1']
																																		tmp_subst['a'] = subst2['i2.2.0']
																																		tmp_subst['m'] = subst2['i2.2']
																																		tmp_subst['d'] = subst2['i2.2.1.0_2']
																																		tmp_subst['c'] = subst2['i2.2.0_1']
																																		tmp_subst['n'] = subst2['i2.2_1']
																																		tmp_subst['f'] = subst2['i2.2.1.0_3']
																																		tmp_subst['e'] = subst2['i2.2.0_2']
																																		tmp_subst['p'] = subst2['i2.2_2']
																																		tmp_subst['h'] = subst2['i2.2.1.0_4']
																																		tmp_subst['g'] = subst2['i2.2.0_3']
																																		tmp_subst['q'] = subst2['i2.2_3']
																																		# 148: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f221) and (cons_f219)
																																		yield 148, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp708.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp708))
				if pattern_index == 144:
					if 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
													if 'i2.2_2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2.0_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
															if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f209)(subst1):
																if 'i2.2_3' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f50)(subst1):
																	if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2_3' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f222)(subst1):
																		# State 6634
																		if len(subjects2) >= 1:
																			tmp711 = []
																			tmp711.append(subjects2.popleft())
																			while True:
																				if len(tmp711) > 1:
																					tmp712 = create_operation_expression(associative1, tmp711)
																				elif len(tmp711) == 1:
																					tmp712 = tmp711[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2.2.1.0', tmp712)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																							if 'i2.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2_1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2_2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																														if 'i2.2.0_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																															if 'i2.2.1.0_4' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f209)(subst2):
																																if 'i2.2_3' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
																																	if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2_3' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f222)(subst2):
																																		# State 6635
																																		if len(subjects2) == 0:
																																			# State 6636
																																			if len(subjects) == 0:
																																				tmp_subst = Substitution()
																																				tmp_subst['x'] = subst2['i2.2.1.0']
																																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																																				tmp_subst['a'] = subst2['i2.2.0']
																																				tmp_subst['m'] = subst2['i2.2']
																																				tmp_subst['d'] = subst2['i2.2.1.0_2']
																																				tmp_subst['c'] = subst2['i2.2.0_1']
																																				tmp_subst['n'] = subst2['i2.2_1']
																																				tmp_subst['f'] = subst2['i2.2.1.0_3']
																																				tmp_subst['e'] = subst2['i2.2.0_2']
																																				tmp_subst['p'] = subst2['i2.2_2']
																																				tmp_subst['h'] = subst2['i2.2.1.0_4']
																																				tmp_subst['g'] = subst2['i2.2.0_3']
																																				tmp_subst['q'] = subst2['i2.2_3']
																																				# 149: Integral((a + b*x)**m*(c + d*x)**n*(e + f*x)**p*(g + h*x)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f222)
																																				yield 149, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp711.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp711))
				if pattern_index == 145:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f68)(subst1):
												if 'i2' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f48)(subst1):
													if 'i2' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f5)(subst1):
															if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f69)(subst1):
																if 'i2' in subst1 and 'i2.2.0_3' in subst1 and CustomConstraint(cons_f208)(subst1):
																	if 'i2.2.1.0_4' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f209)(subst1):
																		if 'i2' in subst1 and 'i2.2_3' in subst1 and CustomConstraint(cons_f50)(subst1):
																			# State 6637
																			if len(subjects2) >= 1:
																				tmp714 = []
																				tmp714.append(subjects2.popleft())
																				while True:
																					if len(tmp714) > 1:
																						tmp715 = create_operation_expression(associative1, tmp714)
																					elif len(tmp714) == 1:
																						tmp715 = tmp714[0]
																					else:
																						assert False, "Unreachable"
																					subst2 = Substitution(subst1)
																					try:
																						subst2.try_add_variable('i2', tmp715)
																					except ValueError:
																						pass
																					else:
																						if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																									if 'i2' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f27)(subst2):
																										if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																											if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																												if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f68)(subst2):
																													if 'i2' in subst2 and 'i2.2.0_2' in subst2 and CustomConstraint(cons_f48)(subst2):
																														if 'i2' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																															if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f5)(subst2):
																																if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f69)(subst2):
																																	if 'i2' in subst2 and 'i2.2.0_3' in subst2 and CustomConstraint(cons_f208)(subst2):
																																		if 'i2.2.1.0_4' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f209)(subst2):
																																			if 'i2' in subst2 and 'i2.2_3' in subst2 and CustomConstraint(cons_f50)(subst2):
																																				# State 6638
																																				if len(subjects2) == 0:
																																					# State 6639
																																					if len(subjects) == 0:
																																						tmp_subst = Substitution()
																																						tmp_subst['u'] = subst2['i2.2.1.0']
																																						tmp_subst['b'] = subst2['i2.2.1.0_1']
																																						tmp_subst['a'] = subst2['i2.2.0']
																																						tmp_subst['m'] = subst2['i2.2']
																																						tmp_subst['d'] = subst2['i2.2.1.0_2']
																																						tmp_subst['c'] = subst2['i2.2.0_1']
																																						tmp_subst['n'] = subst2['i2.2_1']
																																						tmp_subst['f'] = subst2['i2.2.1.0_3']
																																						tmp_subst['e'] = subst2['i2.2.0_2']
																																						tmp_subst['p'] = subst2['i2.2_2']
																																						tmp_subst['h'] = subst2['i2.2.1.0_4']
																																						tmp_subst['g'] = subst2['i2.2.0_3']
																																						tmp_subst['q'] = subst2['i2.2_3']
																																						tmp_subst['x'] = subst2['i2']
																																						# 150: Integral((a + b*u)**m*(c + d*u)**n*(e + f*u)**p*(g + h*u)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f68) and (cons_f69)
																																						yield 150, tmp_subst
																					if len(subjects2) == 0:
																						break
																					tmp714.append(subjects2.popleft())
																				subjects2.extendleft(reversed(tmp714))
				if pattern_index == 146:
					if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
						if 'i2.2.2.0' in subst1 and 'i2.2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.2.1.0_1' in subst1 and 'i2.2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.2.1.0' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2' in subst1 and 'i2.2.2.1.0' in subst1 and CustomConstraint(cons_f5)(subst1):
											if 'i2.0' in subst1 and 'i2.2.2.1.0' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f2002)(subst1):
												# State 6768
												if len(subjects2) >= 1:
													tmp717 = []
													tmp717.append(subjects2.popleft())
													while True:
														if len(tmp717) > 1:
															tmp718 = create_operation_expression(associative1, tmp717)
														elif len(tmp717) == 1:
															tmp718 = tmp717[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.2.1.0', tmp718)
														except ValueError:
															pass
														else:
															if 'i2.2.2.0' in subst2 and 'i2.2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.2.1.0_1' in subst2 and 'i2.2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																		if 'i2.2.2.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.2.1.0' in subst2 and CustomConstraint(cons_f5)(subst2):
																				if 'i2.0' in subst2 and 'i2.2.2.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f2002)(subst2):
																					# State 6769
																					if len(subjects2) == 0:
																						# State 6770
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.2.1.0']
																							tmp_subst['b'] = subst2['i2.2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.2.0']
																							tmp_subst['n'] = subst2['i2.2.2']
																							tmp_subst['c'] = subst2['i2.2.0']
																							tmp_subst['p'] = subst2['i2.2']
																							tmp_subst['u'] = subst2['i2.0']
																							# 152: Integral(u*(c*(a + b*x)**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f2002)
																							yield 152, tmp_subst
														if len(subjects2) == 0:
															break
														tmp717.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp717))
				if pattern_index == 147:
					if 'i2.2.2.1.0' in subst1 and 'i2.2.2.1.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.2.1.1.0_1' in subst1 and 'i2.2.2.1.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.2.1.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.2.0' in subst1 and 'i2.2.2.1.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.2.1.1.0' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2.2' in subst1 and 'i2.2.2.1.1.0' in subst1 and CustomConstraint(cons_f50)(subst1):
											if 'i2.2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f386)(subst1):
													# State 6868
													if len(subjects2) >= 1:
														tmp720 = []
														tmp720.append(subjects2.popleft())
														while True:
															if len(tmp720) > 1:
																tmp721 = create_operation_expression(associative1, tmp720)
															elif len(tmp720) == 1:
																tmp721 = tmp720[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.2.1.1.0', tmp721)
															except ValueError:
																pass
															else:
																if 'i2.2.2.1.0' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.2.1.1.0_1' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.2.1.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.2.0' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																				if 'i2.2.2.1.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f5)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.2.1.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
																						# State 6869
																						if len(subjects2) == 0:
																							# State 6870
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.2.1.1.0']
																								tmp_subst['b'] = subst2['i2.2.2.1.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.2.1.0']
																								tmp_subst['d'] = subst2['i2.2.2.0']
																								tmp_subst['p'] = subst2['i2.2.2']
																								tmp_subst['c'] = subst2['i2.2.0']
																								tmp_subst['q'] = subst2['i2.2']
																								tmp_subst['u'] = subst2['i2.0']
																								# 153: Integral(u*(c*(d*(a + b*x))**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																								yield 153, tmp_subst
															if len(subjects2) == 0:
																break
															tmp720.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp720))
				if pattern_index == 148:
					if 'i2.2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
						if 'i2.2' in subst1 and CustomConstraint(cons_f386)(subst1):
							if 'i2.2.2.2.0' in subst1 and 'i2.2.2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
								if 'i2.2.2.2.1.0_1' in subst1 and 'i2.2.2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2.2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2.2.2.0' in subst1 and 'i2.2.2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
											if 'i2.2.2.2' in subst1 and 'i2.2.2.2.1.0' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2.2.2.1.0' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f5)(subst1):
													if 'i2.2' in subst1 and 'i2.2.2.2.1.0' in subst1 and CustomConstraint(cons_f50)(subst1):
														# State 7111
														if len(subjects2) >= 1:
															tmp723 = []
															tmp723.append(subjects2.popleft())
															while True:
																if len(tmp723) > 1:
																	tmp724 = create_operation_expression(associative1, tmp723)
																elif len(tmp723) == 1:
																	tmp724 = tmp723[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.2.2.1.0', tmp724)
																except ValueError:
																	pass
																else:
																	if 'i2.2.2.2.0' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.2.2.1.0_1' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.2.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.2.0' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.2.2' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.2.2.1.0' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.2.2.1.0' in subst2 and CustomConstraint(cons_f50)(subst2):
																								# State 7112
																								if len(subjects2) == 0:
																									# State 7113
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.2.2.1.0']
																										tmp_subst['b'] = subst2['i2.2.2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.2.2.0']
																										tmp_subst['n'] = subst2['i2.2.2.2']
																										tmp_subst['d'] = subst2['i2.2.2.0']
																										tmp_subst['p'] = subst2['i2.2.2']
																										tmp_subst['c'] = subst2['i2.2.0']
																										tmp_subst['q'] = subst2['i2.2']
																										tmp_subst['u'] = subst2['i2.0']
																										# 154: Integral(u*(c*(d*(a + b*x)**n)**p)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f386)
																										yield 154, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp723.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp723))
				if pattern_index == 149:
					if 'i2.2.1.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.0_1' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.0_2' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f34)(subst1):
													if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.0_4' in subst1 and CustomConstraint(cons_f35)(subst1):
														if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f36)(subst1):
															if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f1099)(subst1):
																if 'i2.2.1.2.1.0_1' in subst1 and 'i2.2.1.2.1.0_2' in subst1 and CustomConstraint(cons_f2003)(subst1):
																	if 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.0_1' in subst1 and CustomConstraint(cons_f2004)(subst1):
																		if 'i2.2.1.2.0' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.2.0_1' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f2005)(subst1):
																			if 'i2.2.1.2.0' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f2006)(subst1):
																				# State 7285
																				if len(subjects2) >= 1:
																					tmp726 = []
																					tmp726.append(subjects2.popleft())
																					while True:
																						if len(tmp726) > 1:
																							tmp727 = create_operation_expression(associative1, tmp726)
																						elif len(tmp726) == 1:
																							tmp727 = tmp726[0]
																						else:
																							assert False, "Unreachable"
																						subst2 = Substitution(subst1)
																						try:
																							subst2.try_add_variable('i2.2.1.2.1.0', tmp727)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2.1.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																									if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f7)(subst2):
																										if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																											if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.0_1' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.0_2' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.2.1.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f34)(subst2):
																															if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.0_4' in subst2 and CustomConstraint(cons_f35)(subst2):
																																if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f36)(subst2):
																																	if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1099)(subst2):
																																		# State 7286
																																		if len(subjects2) == 0:
																																			# State 7287
																																			if len(subjects) == 0:
																																				tmp_subst = Substitution()
																																				tmp_subst['x'] = subst2['i2.2.1.2.1.0']
																																				tmp_subst['e'] = subst2['i2.2.1.2.1.0_1']
																																				tmp_subst['d'] = subst2['i2.2.1.2.0']
																																				tmp_subst['g'] = subst2['i2.2.1.2.1.0_2']
																																				tmp_subst['f'] = subst2['i2.2.1.2.0_1']
																																				tmp_subst['F'] = subst2['i2.2.1.0']
																																				tmp_subst['b'] = subst2['i2.2.1.0_1']
																																				tmp_subst['c'] = subst2['i2.2.1.0_2']
																																				tmp_subst['a'] = subst2['i2.2.0']
																																				tmp_subst['n'] = subst2['i2.2']
																																				tmp_subst['C'] = subst2['i2.2.1.0_3']
																																				tmp_subst['B'] = subst2['i2.2.1.0_4']
																																				tmp_subst['A'] = subst2['i2.2.0_1']
																																				# 155: Integral((F*b*c*sqrt(d + e*x)/sqrt(f + g*x) + a)**n/(A + B*x + C*x**2), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
																																				yield 155, tmp_subst
																						if len(subjects2) == 0:
																							break
																						tmp726.append(subjects2.popleft())
																					subjects2.extendleft(reversed(tmp726))
				if pattern_index == 150:
					if 'i2.2.1.1' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.1' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.1' in subst1 and 'i2.2.1.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.1' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f208)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f34)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f36)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f1099)(subst1):
													if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f2003)(subst1):
														if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2007)(subst1):
															# State 7382
															if len(subjects2) >= 1:
																tmp729 = []
																tmp729.append(subjects2.popleft())
																while True:
																	if len(tmp729) > 1:
																		tmp730 = create_operation_expression(associative1, tmp729)
																	elif len(tmp729) == 1:
																		tmp730 = tmp729[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.1', tmp730)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.1.1' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.1' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.1' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.1' in subst2 and 'i2.2.1.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.1' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f208)(subst2):
																							if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f34)(subst2):
																								if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f36)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f1099)(subst2):
																										# State 7383
																										if len(subjects2) == 0:
																											# State 7384
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['x'] = subst2['i2.2.1.1']
																												tmp_subst['C'] = subst2['i2.2.1.0']
																												tmp_subst['A'] = subst2['i2.2.0']
																												tmp_subst['e'] = subst2['i2.2.1.2.1.0']
																												tmp_subst['g'] = subst2['i2.2.1.2.1.0_1']
																												tmp_subst['F'] = subst2['i2.2.1.0_1']
																												tmp_subst['b'] = subst2['i2.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.1.0_3']
																												tmp_subst['a'] = subst2['i2.2.0_1']
																												tmp_subst['n'] = subst2['i2.2']
																												# 156: Integral((F*b*c*sqrt(e*x + 1)/sqrt(g*x + 1) + a)**n/(A + C*x**2), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
																												yield 156, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp729.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp729))
				if pattern_index == 151:
					if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.3.0' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.3.2.0' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
									if 'i2.2.1.3.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
										if 'i2.2.1.3.2.0_1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f125)(subst1):
											if 'i2.2.1.3.2.1.0_2' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
												if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f34)(subst1):
													if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f35)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f36)(subst1):
															if 'i2.2.1.1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f1099)(subst1):
																if 'i2.2.1.3.2.1.0_2' in subst1 and 'i2.2.1.3.2.1.0_1' in subst1 and CustomConstraint(cons_f2003)(subst1):
																	if 'i2.2.1.3.2.0_1' in subst1 and 'i2.2.1.3.2.0' in subst1 and CustomConstraint(cons_f2004)(subst1):
																		if 'i2.2.1.0_1' in subst1 and 'i2.2.1.3.2.0' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.1.3.2.0_1' in subst1 and 'i2.2.1.3.2.1.0_1' in subst1 and CustomConstraint(cons_f2005)(subst1):
																			if 'i2.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0_1' in subst1 and 'i2.2.1.3.2.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f2006)(subst1):
																				# State 7746
																				if len(subjects2) >= 1:
																					tmp732 = []
																					tmp732.append(subjects2.popleft())
																					while True:
																						if len(tmp732) > 1:
																							tmp733 = create_operation_expression(associative1, tmp732)
																						elif len(tmp732) == 1:
																							tmp733 = tmp732[0]
																						else:
																							assert False, "Unreachable"
																						subst2 = Substitution(subst1)
																						try:
																							subst2.try_add_variable('i2.2.1.3.2.1.0', tmp733)
																						except ValueError:
																							pass
																						else:
																							if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																								if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																									if 'i2.2.1.3.0' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																										if 'i2.2.1.3.2.0' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																											if 'i2.2.1.3.2.1.0_1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																												if 'i2.2.1.3.2.0_1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f125)(subst2):
																													if 'i2.2.1.3.2.1.0_2' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																														if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f34)(subst2):
																															if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f35)(subst2):
																																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f36)(subst2):
																																	if 'i2.2.1.1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f1099)(subst2):
																																		# State 7747
																																		if len(subjects2) == 0:
																																			# State 7748
																																			if len(subjects) == 0:
																																				tmp_subst = Substitution()
																																				tmp_subst['F'] = subst2['i2.2.1.1']
																																				tmp_subst['x'] = subst2['i2.2.1.3.2.1.0']
																																				tmp_subst['e'] = subst2['i2.2.1.3.2.1.0_1']
																																				tmp_subst['d'] = subst2['i2.2.1.3.2.0']
																																				tmp_subst['g'] = subst2['i2.2.1.3.2.1.0_2']
																																				tmp_subst['f'] = subst2['i2.2.1.3.2.0_1']
																																				tmp_subst['c'] = subst2['i2.2.1.3.0']
																																				tmp_subst['b'] = subst2['i2.2.1.0']
																																				tmp_subst['a'] = subst2['i2.2.0']
																																				tmp_subst['n'] = subst2['i2.2']
																																				tmp_subst['C'] = subst2['i2.2.1.0_1']
																																				tmp_subst['B'] = subst2['i2.2.1.0_2']
																																				tmp_subst['A'] = subst2['i2.2.0_1']
																																				# 157: Integral((F**(c*sqrt(d + e*x)/sqrt(f + g*x))*b + a)**n/(A + B*x + C*x**2), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f34) and (cons_f35) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2004) and (cons_f2005) and (cons_f2006)
																																				yield 157, tmp_subst
																						if len(subjects2) == 0:
																							break
																						tmp732.append(subjects2.popleft())
																					subjects2.extendleft(reversed(tmp732))
				if pattern_index == 152:
					if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.3.0' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.3.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2.2.1.3.2.1.0_2' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f208)(subst1):
										if 'i2.2.1.3.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f34)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f36)(subst1):
												if 'i2.2.1.1' in subst1 and 'i2.2.1.3.2.1.0' in subst1 and CustomConstraint(cons_f1099)(subst1):
													if 'i2.2.1.3.2.1.0_2' in subst1 and 'i2.2.1.3.2.1.0_1' in subst1 and CustomConstraint(cons_f2003)(subst1):
														if 'i2.2.1.0_1' in subst1 and 'i2.2.1.3.2.1.0_1' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f2007)(subst1):
															# State 7849
															if len(subjects2) >= 1:
																tmp735 = []
																tmp735.append(subjects2.popleft())
																while True:
																	if len(tmp735) > 1:
																		tmp736 = create_operation_expression(associative1, tmp735)
																	elif len(tmp735) == 1:
																		tmp736 = tmp735[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2.2.1.3.2.1.0', tmp736)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2.1.3.0' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.3.2.1.0_1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.3.2.1.0_2' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f208)(subst2):
																							if 'i2.2.1.3.2.1.0' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f34)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f36)(subst2):
																									if 'i2.2.1.1' in subst2 and 'i2.2.1.3.2.1.0' in subst2 and CustomConstraint(cons_f1099)(subst2):
																										# State 7850
																										if len(subjects2) == 0:
																											# State 7851
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['F'] = subst2['i2.2.1.1']
																												tmp_subst['x'] = subst2['i2.2.1.3.2.1.0']
																												tmp_subst['e'] = subst2['i2.2.1.3.2.1.0_1']
																												tmp_subst['g'] = subst2['i2.2.1.3.2.1.0_2']
																												tmp_subst['c'] = subst2['i2.2.1.3.0']
																												tmp_subst['b'] = subst2['i2.2.1.0']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['n'] = subst2['i2.2']
																												tmp_subst['C'] = subst2['i2.2.1.0_1']
																												tmp_subst['A'] = subst2['i2.2.0_1']
																												# 158: Integral((F**(c*sqrt(e*x + 1)/sqrt(g*x + 1))*b + a)**n/(A + C*x**2), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f48) and (cons_f208) and (cons_f34) and (cons_f36) and (cons_f1099) and (cons_f2003) and (cons_f2007)
																												yield 158, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp735.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp735))
				if pattern_index == 153:
					if 'i2.0' in subst1 and 'i2' in subst1 and 'i2.1' in subst1 and CustomConstraint(With6938)(subst1):
						# State 7855
						if len(subjects2) >= 1:
							tmp738 = []
							tmp738.append(subjects2.popleft())
							while True:
								if len(tmp738) > 1:
									tmp739 = create_operation_expression(associative1, tmp738)
								elif len(tmp738) == 1:
									tmp739 = tmp738[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2', tmp739)
								except ValueError:
									pass
								else:
									if 'i2.0' in subst2 and 'i2' in subst2 and 'i2.1' in subst2 and CustomConstraint(With6938)(subst2):
										# State 7856
										if len(subjects2) == 0:
											# State 7857
											if len(subjects) == 0:
												tmp_subst = Substitution()
												tmp_subst['y'] = subst2['i2.1']
												tmp_subst['u'] = subst2['i2.0']
												tmp_subst['x'] = subst2['i2']
												# 159: Integral(u/y, x) /; (With6938)
												yield 159, tmp_subst
								if len(subjects2) == 0:
									break
								tmp738.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp738))
				if pattern_index == 154:
					if 'i2.0' in subst1 and 'i2' in subst1 and 'i2.1' in subst1 and 'i2.1_1' in subst1 and CustomConstraint(With6939)(subst1):
						# State 7861
						if len(subjects2) >= 1:
							tmp741 = []
							tmp741.append(subjects2.popleft())
							while True:
								if len(tmp741) > 1:
									tmp742 = create_operation_expression(associative1, tmp741)
								elif len(tmp741) == 1:
									tmp742 = tmp741[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2', tmp742)
								except ValueError:
									pass
								else:
									if 'i2.0' in subst2 and 'i2' in subst2 and 'i2.1' in subst2 and 'i2.1_1' in subst2 and CustomConstraint(With6939)(subst2):
										# State 7862
										if len(subjects2) == 0:
											# State 7863
											if len(subjects) == 0:
												tmp_subst = Substitution()
												tmp_subst['w'] = subst2['i2.1']
												tmp_subst['y'] = subst2['i2.1_1']
												tmp_subst['u'] = subst2['i2.0']
												tmp_subst['x'] = subst2['i2']
												# 160: Integral(u/(w*y), x) /; (With6939)
												yield 160, tmp_subst
								if len(subjects2) == 0:
									break
								tmp741.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp741))
				if pattern_index == 155:
					if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(With6940)(subst1):
								# State 7867
								if len(subjects2) >= 1:
									tmp744 = []
									tmp744.append(subjects2.popleft())
									while True:
										if len(tmp744) > 1:
											tmp745 = create_operation_expression(associative1, tmp744)
										elif len(tmp744) == 1:
											tmp745 = tmp744[0]
										else:
											assert False, "Unreachable"
										subst2 = Substitution(subst1)
										try:
											subst2.try_add_variable('i2', tmp745)
										except ValueError:
											pass
										else:
											if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
												if 'i2.2' in subst2 and 'i2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(With6940)(subst2):
													# State 7868
													if len(subjects2) == 0:
														# State 7869
														if len(subjects) == 0:
															tmp_subst = Substitution()
															tmp_subst['y'] = subst2['i2.1']
															tmp_subst['m'] = subst2['i2.2']
															tmp_subst['u'] = subst2['i2.0']
															tmp_subst['x'] = subst2['i2']
															# 161: Integral(u*y**m, x) /; (cons_f21) and (cons_f66) and (With6940)
															yield 161, tmp_subst
										if len(subjects2) == 0:
											break
										tmp744.append(subjects2.popleft())
									subjects2.extendleft(reversed(tmp744))
				if pattern_index == 156:
					if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.2' in subst1 and 'i2.0' in subst1 and 'i2.1' in subst1 and 'i2.2_1' in subst1 and 'i2.1_1' in subst1 and 'i2' in subst1 and CustomConstraint(With6941)(subst1):
									# State 7873
									if len(subjects2) >= 1:
										tmp747 = []
										tmp747.append(subjects2.popleft())
										while True:
											if len(tmp747) > 1:
												tmp748 = create_operation_expression(associative1, tmp747)
											elif len(tmp747) == 1:
												tmp748 = tmp747[0]
											else:
												assert False, "Unreachable"
											subst2 = Substitution(subst1)
											try:
												subst2.try_add_variable('i2', tmp748)
											except ValueError:
												pass
											else:
												if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
													if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
														if 'i2.2' in subst2 and 'i2.0' in subst2 and 'i2.1' in subst2 and 'i2.2_1' in subst2 and 'i2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(With6941)(subst2):
															# State 7874
															if len(subjects2) == 0:
																# State 7875
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['y'] = subst2['i2.1']
																	tmp_subst['m'] = subst2['i2.2']
																	tmp_subst['z'] = subst2['i2.1_1']
																	tmp_subst['n'] = subst2['i2.2_1']
																	tmp_subst['u'] = subst2['i2.0']
																	tmp_subst['x'] = subst2['i2']
																	# 162: Integral(u*y**m*z**n, x) /; (cons_f21) and (cons_f4) and (cons_f66) and (With6941)
																	yield 162, tmp_subst
											if len(subjects2) == 0:
												break
											tmp747.append(subjects2.popleft())
										subjects2.extendleft(reversed(tmp747))
				if pattern_index == 157:
					if 'i2.2' in subst1 and CustomConstraint(cons_f84)(subst1):
						if 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f27)(subst1):
										if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f1037)(subst1):
														# State 8220
														if len(subjects2) >= 1:
															tmp750 = []
															tmp750.append(subjects2.popleft())
															while True:
																if len(tmp750) > 1:
																	tmp751 = create_operation_expression(associative1, tmp750)
																elif len(tmp750) == 1:
																	tmp751 = tmp750[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.2.1.1', tmp751)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																								# State 8221
																								if len(subjects2) == 0:
																									# State 8222
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.2.1.1']
																										tmp_subst['n'] = subst2['i2.2.1.2.1.2']
																										tmp_subst['b'] = subst2['i2.2.1.2.1.0']
																										tmp_subst['a'] = subst2['i2.2.1.2.0']
																										tmp_subst['e'] = subst2['i2.2.1.0']
																										tmp_subst['d'] = subst2['i2.2.1.2.1.0_1']
																										tmp_subst['c'] = subst2['i2.2.1.2.0_1']
																										tmp_subst['f'] = subst2['i2.2.1.0_1']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['u'] = subst2['i2.0']
																										# 164: Integral(u*(e*sqrt(a + b*x**n) + f*sqrt(c + d*x**n))**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1037)
																										yield 164, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp750.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp750))
				if pattern_index == 158:
					if 'i2.2' in subst1 and CustomConstraint(cons_f84)(subst1):
						if 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.1.2.1.0' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.1.0_1' in subst1 and CustomConstraint(cons_f27)(subst1):
										if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f48)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.1.1' in subst1 and CustomConstraint(cons_f125)(subst1):
												if 'i2.2.1.2.1.1' in subst1 and 'i2.2.1.2.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.0_1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f1036)(subst1):
														# State 8228
														if len(subjects2) >= 1:
															tmp753 = []
															tmp753.append(subjects2.popleft())
															while True:
																if len(tmp753) > 1:
																	tmp754 = create_operation_expression(associative1, tmp753)
																elif len(tmp753) == 1:
																	tmp754 = tmp753[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.2.1.1', tmp754)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.2.1.0' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.0_1' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f48)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1.1' in subst2 and CustomConstraint(cons_f125)(subst2):
																							if 'i2.2.1.2.1.1' in subst2 and 'i2.2.1.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																								# State 8229
																								if len(subjects2) == 0:
																									# State 8230
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['x'] = subst2['i2.2.1.2.1.1']
																										tmp_subst['n'] = subst2['i2.2.1.2.1.2']
																										tmp_subst['b'] = subst2['i2.2.1.2.1.0']
																										tmp_subst['a'] = subst2['i2.2.1.2.0']
																										tmp_subst['e'] = subst2['i2.2.1.0']
																										tmp_subst['d'] = subst2['i2.2.1.2.1.0_1']
																										tmp_subst['c'] = subst2['i2.2.1.2.0_1']
																										tmp_subst['f'] = subst2['i2.2.1.0_1']
																										tmp_subst['m'] = subst2['i2.2']
																										tmp_subst['u'] = subst2['i2.0']
																										# 165: Integral(u*(e*sqrt(a + b*x**n) + f*sqrt(c + d*x**n))**m, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f4) and (cons_f84) and (cons_f1036)
																										yield 165, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp753.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp753))
				if pattern_index == 159:
					if 'i2.2' in subst1 and CustomConstraint(cons_f38)(subst1):
						if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
								if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
									if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f2008)(subst1):
										if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f10)(subst1):
											# State 8249
											if len(subjects2) >= 1:
												tmp756 = []
												tmp756.append(subjects2.popleft())
												while True:
													if len(tmp756) > 1:
														tmp757 = create_operation_expression(associative1, tmp756)
													elif len(tmp756) == 1:
														tmp757 = tmp756[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2', tmp757)
													except ValueError:
														pass
													else:
														if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																	if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f10)(subst2):
																		# State 8250
																		if len(subjects2) == 0:
																			# State 8251
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['u'] = subst2['i2.2.1.1']
																				tmp_subst['n'] = subst2['i2.2.1.2']
																				tmp_subst['a'] = subst2['i2.2.1.0']
																				tmp_subst['v'] = subst2['i2.2.0']
																				tmp_subst['p'] = subst2['i2.2']
																				tmp_subst['m'] = subst2['i2.2_1']
																				tmp_subst['w'] = subst2['i2.0']
																				tmp_subst['x'] = subst2['i2']
																				# 166: Integral(u**m*w*(a*u**n + v)**p, x) /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f38) and (cons_f2008) and (cons_f10)
																				yield 166, tmp_subst
													if len(subjects2) == 0:
														break
													tmp756.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp756))
				if pattern_index == 160:
					if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
						if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f27)(subst1):
										if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f2009)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(With6946)(subst1):
													# State 8270
													if len(subjects2) >= 1:
														tmp759 = []
														tmp759.append(subjects2.popleft())
														while True:
															if len(tmp759) > 1:
																tmp760 = create_operation_expression(associative1, tmp759)
															elif len(tmp759) == 1:
																tmp760 = tmp759[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2', tmp760)
															except ValueError:
																pass
															else:
																if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																	if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f27)(subst2):
																					if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.0' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(With6946)(subst2):
																							# State 8271
																							if len(subjects2) == 0:
																								# State 8272
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['v'] = subst2['i2.2.1.0']
																									tmp_subst['d'] = subst2['i2.2.1.0_1']
																									tmp_subst['c'] = subst2['i2.2.0']
																									tmp_subst['n'] = subst2['i2.2']
																									tmp_subst['y'] = subst2['i2.2.1.0_2']
																									tmp_subst['b'] = subst2['i2.2.1.0_3']
																									tmp_subst['a'] = subst2['i2.2.0_1']
																									tmp_subst['m'] = subst2['i2.2_1']
																									tmp_subst['u'] = subst2['i2.0']
																									tmp_subst['x'] = subst2['i2']
																									# 167: Integral(u*(a + b*y)**m*(c + d*v)**n, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f2009) and (With6946)
																									yield 167, tmp_subst
															if len(subjects2) == 0:
																break
															tmp759.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp759))
				if pattern_index == 161:
					if 'i2' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
						if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f27)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
									if 'i2' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f2)(subst1):
										if 'i2' in subst1 and 'i2.2.1.0_5' in subst1 and CustomConstraint(cons_f3)(subst1):
											if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
												if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f21)(subst1):
													if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
														if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2009)(subst1):
															if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f2010)(subst1):
																if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_5' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(With6947)(subst1):
																	# State 8293
																	if len(subjects2) >= 1:
																		tmp762 = []
																		tmp762.append(subjects2.popleft())
																		while True:
																			if len(tmp762) > 1:
																				tmp763 = create_operation_expression(associative1, tmp762)
																			elif len(tmp762) == 1:
																				tmp763 = tmp762[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2', tmp763)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																					if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f27)(subst2):
																							if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																								if 'i2' in subst2 and 'i2.2.0_2' in subst2 and CustomConstraint(cons_f2)(subst2):
																									if 'i2' in subst2 and 'i2.2.1.0_5' in subst2 and CustomConstraint(cons_f3)(subst2):
																										if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																											if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f21)(subst2):
																												if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																													if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.0_5' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.0_2' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(With6947)(subst2):
																														# State 8294
																														if len(subjects2) == 0:
																															# State 8295
																															if len(subjects) == 0:
																																tmp_subst = Substitution()
																																tmp_subst['v'] = subst2['i2.2.1.0']
																																tmp_subst['d'] = subst2['i2.2.1.0_1']
																																tmp_subst['c'] = subst2['i2.2.0']
																																tmp_subst['n'] = subst2['i2.2']
																																tmp_subst['w'] = subst2['i2.2.1.0_2']
																																tmp_subst['f'] = subst2['i2.2.1.0_3']
																																tmp_subst['e'] = subst2['i2.2.0_1']
																																tmp_subst['p'] = subst2['i2.2_1']
																																tmp_subst['y'] = subst2['i2.2.1.0_4']
																																tmp_subst['b'] = subst2['i2.2.1.0_5']
																																tmp_subst['a'] = subst2['i2.2.0_2']
																																tmp_subst['m'] = subst2['i2.2_2']
																																tmp_subst['u'] = subst2['i2.0']
																																tmp_subst['x'] = subst2['i2']
																																# 168: Integral(u*(a + b*y)**m*(c + d*v)**n*(e + f*w)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f2009) and (cons_f2010) and (With6947)
																																yield 168, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp762.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp762))
				if pattern_index == 162:
					if 'i2' in subst1 and 'i2.2.1.0_3' in subst1 and CustomConstraint(cons_f125)(subst1):
						if 'i2' in subst1 and 'i2.2.0_3' in subst1 and CustomConstraint(cons_f208)(subst1):
							if 'i2' in subst1 and 'i2.2_3' in subst1 and CustomConstraint(cons_f50)(subst1):
								if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f27)(subst1):
										if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f2)(subst1):
												if 'i2' in subst1 and 'i2.2.1.0_5' in subst1 and CustomConstraint(cons_f3)(subst1):
													if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
														if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f21)(subst1):
															if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
																if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2009)(subst1):
																	if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f2010)(subst1):
																		if 'i2.2.1.0_7' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f209)(subst1):
																			if 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_6' in subst1 and CustomConstraint(cons_f2011)(subst1):
																				if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.0_6' in subst1 and 'i2.2.0_3' in subst1 and 'i2.2_3' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.0_4' in subst1 and 'i2.2.1.0_5' in subst1 and 'i2.2.1.0_3' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.0_7' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(With6948)(subst1):
																					# State 8316
																					if len(subjects2) >= 1:
																						tmp765 = []
																						tmp765.append(subjects2.popleft())
																						while True:
																							if len(tmp765) > 1:
																								tmp766 = create_operation_expression(associative1, tmp765)
																							elif len(tmp765) == 1:
																								tmp766 = tmp765[0]
																							else:
																								assert False, "Unreachable"
																							subst2 = Substitution(subst1)
																							try:
																								subst2.try_add_variable('i2', tmp766)
																							except ValueError:
																								pass
																							else:
																								if 'i2' in subst2 and 'i2.2.1.0_3' in subst2 and CustomConstraint(cons_f125)(subst2):
																									if 'i2' in subst2 and 'i2.2.0_3' in subst2 and CustomConstraint(cons_f208)(subst2):
																										if 'i2' in subst2 and 'i2.2_3' in subst2 and CustomConstraint(cons_f50)(subst2):
																											if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																												if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f27)(subst2):
																													if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																														if 'i2' in subst2 and 'i2.2.0_2' in subst2 and CustomConstraint(cons_f2)(subst2):
																															if 'i2' in subst2 and 'i2.2.1.0_5' in subst2 and CustomConstraint(cons_f3)(subst2):
																																if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																																	if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f21)(subst2):
																																		if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																																			if 'i2.2.1.0_7' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f209)(subst2):
																																				if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.0_6' in subst2 and 'i2.2.0_3' in subst2 and 'i2.2_3' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.0_4' in subst2 and 'i2.2.1.0_5' in subst2 and 'i2.2.1.0_3' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.0_7' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(With6948)(subst2):
																																					# State 8317
																																					if len(subjects2) == 0:
																																						# State 8318
																																						if len(subjects) == 0:
																																							tmp_subst = Substitution()
																																							tmp_subst['v'] = subst2['i2.2.1.0']
																																							tmp_subst['d'] = subst2['i2.2.1.0_1']
																																							tmp_subst['c'] = subst2['i2.2.0']
																																							tmp_subst['n'] = subst2['i2.2']
																																							tmp_subst['w'] = subst2['i2.2.1.0_2']
																																							tmp_subst['f'] = subst2['i2.2.1.0_3']
																																							tmp_subst['e'] = subst2['i2.2.0_1']
																																							tmp_subst['p'] = subst2['i2.2_1']
																																							tmp_subst['y'] = subst2['i2.2.1.0_4']
																																							tmp_subst['b'] = subst2['i2.2.1.0_5']
																																							tmp_subst['a'] = subst2['i2.2.0_2']
																																							tmp_subst['m'] = subst2['i2.2_2']
																																							tmp_subst['z'] = subst2['i2.2.1.0_6']
																																							tmp_subst['h'] = subst2['i2.2.1.0_7']
																																							tmp_subst['g'] = subst2['i2.2.0_3']
																																							tmp_subst['q'] = subst2['i2.2_3']
																																							tmp_subst['u'] = subst2['i2.0']
																																							tmp_subst['x'] = subst2['i2']
																																							# 169: Integral(u*(a + b*y)**m*(c + d*v)**n*(e + f*w)**p*(g + h*z)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f208) and (cons_f209) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2009) and (cons_f2010) and (cons_f2011) and (With6948)
																																							yield 169, tmp_subst
																							if len(subjects2) == 0:
																								break
																							tmp765.append(subjects2.popleft())
																						subjects2.extendleft(reversed(tmp765))
				if pattern_index == 163:
					if 'i2' in subst1 and 'i2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2' in subst1 and 'i2.1.0' in subst1 and 'i2.1.1.0' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f1831)(subst1):
									if 'i2' in subst1 and 'i2.0' in subst1 and 'i2.1.0' in subst1 and 'i2.1.1.2' in subst1 and 'i2.1.1.0' in subst1 and 'i2.1.1.1' in subst1 and CustomConstraint(With6949)(subst1):
										# State 8346
										if len(subjects2) >= 1:
											tmp768 = []
											tmp768.append(subjects2.popleft())
											while True:
												if len(tmp768) > 1:
													tmp769 = create_operation_expression(associative1, tmp768)
												elif len(tmp768) == 1:
													tmp769 = tmp768[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2', tmp769)
												except ValueError:
													pass
												else:
													if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
														if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
															if 'i2' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																if 'i2' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.0' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f1831)(subst2):
																	if 'i2' in subst2 and 'i2.0' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.2' in subst2 and 'i2.1.1.0' in subst2 and 'i2.1.1.1' in subst2 and CustomConstraint(With6949)(subst2):
																		# State 8347
																		if len(subjects2) == 0:
																			# State 8348
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['y'] = subst2['i2.1.1.1']
																				tmp_subst['n'] = subst2['i2.1.1.2']
																				tmp_subst['b'] = subst2['i2.1.1.0']
																				tmp_subst['a'] = subst2['i2.1.0']
																				tmp_subst['u'] = subst2['i2.0']
																				tmp_subst['x'] = subst2['i2']
																				# 170: Integral(u*(a + b*y**n), x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f1831) and (With6949)
																				yield 170, tmp_subst
												if len(subjects2) == 0:
													break
												tmp768.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp768))
				if pattern_index == 164:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2.0' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f1244)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6950)(subst1):
											# State 8394
											if len(subjects2) >= 1:
												tmp771 = []
												tmp771.append(subjects2.popleft())
												while True:
													if len(tmp771) > 1:
														tmp772 = create_operation_expression(associative1, tmp771)
													elif len(tmp771) == 1:
														tmp772 = tmp771[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2', tmp772)
													except ValueError:
														pass
													else:
														if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.2.0' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1244)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6950)(subst2):
																				# State 8395
																				if len(subjects2) == 0:
																					# State 8396
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['y'] = subst2['i2.2.1.1']
																						tmp_subst['n'] = subst2['i2.2.1.2']
																						tmp_subst['b'] = subst2['i2.2.1.0']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['p'] = subst2['i2.2']
																						tmp_subst['u'] = subst2['i2.0']
																						tmp_subst['x'] = subst2['i2']
																						# 171: Integral(u*(a + b*y**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f4) and (cons_f5) and (cons_f1244) and (With6950)
																						yield 171, tmp_subst
													if len(subjects2) == 0:
														break
													tmp771.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp771))
				if pattern_index == 165:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2012)(subst1):
											if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6951)(subst1):
												# State 8412
												if len(subjects2) >= 1:
													tmp774 = []
													tmp774.append(subjects2.popleft())
													while True:
														if len(tmp774) > 1:
															tmp775 = create_operation_expression(associative1, tmp774)
														elif len(tmp774) == 1:
															tmp775 = tmp774[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2', tmp775)
														except ValueError:
															pass
														else:
															if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																	if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																		if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																				if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2012)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6951)(subst2):
																						# State 8413
																						if len(subjects2) == 0:
																							# State 8414
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['y'] = subst2['i2.2.1.1']
																								tmp_subst['n'] = subst2['i2.2.1.2']
																								tmp_subst['b'] = subst2['i2.2.1.0']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['p'] = subst2['i2.2']
																								tmp_subst['v'] = subst2['i2.1']
																								tmp_subst['m'] = subst2['i2.2_1']
																								tmp_subst['u'] = subst2['i2.0']
																								tmp_subst['x'] = subst2['i2']
																								# 172: Integral(u*v**m*(a + b*y**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f2012) and (With6951)
																								yield 172, tmp_subst
														if len(subjects2) == 0:
															break
														tmp774.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp774))
				if pattern_index == 166:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2009)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(With6952)(subst1):
													# State 8455
													if len(subjects2) >= 1:
														tmp777 = []
														tmp777.append(subjects2.popleft())
														while True:
															if len(tmp777) > 1:
																tmp778 = create_operation_expression(associative1, tmp777)
															elif len(tmp777) == 1:
																tmp778 = tmp777[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2', tmp778)
															except ValueError:
																pass
															else:
																if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																			if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
																					if 'i2.2.1.0_1' in subst2 and 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(With6952)(subst2):
																						# State 8456
																						if len(subjects2) == 0:
																							# State 8457
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['v'] = subst2['i2.2.1.1']
																								tmp_subst['n2'] = subst2['i2.2.1.2']
																								tmp_subst['c'] = subst2['i2.2.1.0']
																								tmp_subst['y'] = subst2['i2.2.1.1_1']
																								tmp_subst['n'] = subst2['i2.2.1.2_1']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['a'] = subst2['i2.2.0']
																								tmp_subst['p'] = subst2['i2.2']
																								tmp_subst['u'] = subst2['i2.0']
																								tmp_subst['x'] = subst2['i2']
																								# 173: Integral(u*(a + b*y**n + c*v**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (With6952)
																								yield 173, tmp_subst
															if len(subjects2) == 0:
																break
															tmp777.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp777))
				if pattern_index == 167:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2' in subst1 and 'i2.1.0' in subst1 and CustomConstraint(cons_f34)(subst1):
											if 'i2' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f35)(subst1):
												if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
													if 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and CustomConstraint(cons_f2009)(subst1):
														if 'i2.1.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2010)(subst1):
															if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2' in subst1 and 'i2.1.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6953)(subst1):
																# State 8489
																if len(subjects2) >= 1:
																	tmp780 = []
																	tmp780.append(subjects2.popleft())
																	while True:
																		if len(tmp780) > 1:
																			tmp781 = create_operation_expression(associative1, tmp780)
																		elif len(tmp780) == 1:
																			tmp781 = tmp780[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2', tmp781)
																		except ValueError:
																			pass
																		else:
																			if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																					if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f34)(subst2):
																									if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f35)(subst2):
																										if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2' in subst2 and 'i2.1.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.1.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6953)(subst2):
																											# State 8490
																											if len(subjects2) == 0:
																												# State 8491
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['v'] = subst2['i2.2.1.1']
																													tmp_subst['n'] = subst2['i2.2.1.2']
																													tmp_subst['b'] = subst2['i2.2.1.0']
																													tmp_subst['w'] = subst2['i2.2.1.1_1']
																													tmp_subst['n2'] = subst2['i2.2.1.2_1']
																													tmp_subst['c'] = subst2['i2.2.1.0_1']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['p'] = subst2['i2.2']
																													tmp_subst['y'] = subst2['i2.1.1.1']
																													tmp_subst['B'] = subst2['i2.1.1.0']
																													tmp_subst['A'] = subst2['i2.1.0']
																													tmp_subst['u'] = subst2['i2.0']
																													tmp_subst['x'] = subst2['i2']
																													# 174: Integral(u*(A + B*y**n)*(a + b*v**n + c*w**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f34) and (cons_f35) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6953)
																													yield 174, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp780.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp780))
				if pattern_index == 168:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2' in subst1 and 'i2.1.0' in subst1 and CustomConstraint(cons_f34)(subst1):
										if 'i2' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f35)(subst1):
											if 'i2.2.1.2' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f46)(subst1):
												if 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and CustomConstraint(cons_f2010)(subst1):
													if 'i2.2' in subst1 and 'i2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.1.0' in subst1 and 'i2.1.1.2' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(With6954)(subst1):
														# State 8529
														if len(subjects2) >= 1:
															tmp783 = []
															tmp783.append(subjects2.popleft())
															while True:
																if len(tmp783) > 1:
																	tmp784 = create_operation_expression(associative1, tmp783)
																elif len(tmp783) == 1:
																	tmp784 = tmp783[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2', tmp784)
																except ValueError:
																	pass
																else:
																	if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																			if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																				if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f34)(subst2):
																						if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f35)(subst2):
																							if 'i2.2' in subst2 and 'i2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.2' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.1.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(With6954)(subst2):
																								# State 8530
																								if len(subjects2) == 0:
																									# State 8531
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['w'] = subst2['i2.2.1.1']
																										tmp_subst['n2'] = subst2['i2.2.1.2']
																										tmp_subst['c'] = subst2['i2.2.1.0']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['p'] = subst2['i2.2']
																										tmp_subst['y'] = subst2['i2.1.1.1']
																										tmp_subst['n'] = subst2['i2.1.1.2']
																										tmp_subst['B'] = subst2['i2.1.1.0']
																										tmp_subst['A'] = subst2['i2.1.0']
																										tmp_subst['u'] = subst2['i2.0']
																										tmp_subst['x'] = subst2['i2']
																										# 175: Integral(u*(A + B*y**n)*(a + c*w**n2)**p, x) /; (cons_f2) and (cons_f7) and (cons_f34) and (cons_f35) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6954)
																										yield 175, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp783.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp783))
				if pattern_index == 169:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
												if 'i2.2.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2010)(subst1):
													if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.1' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6955)(subst1):
														# State 8540
														if len(subjects2) >= 1:
															tmp786 = []
															tmp786.append(subjects2.popleft())
															while True:
																if len(tmp786) > 1:
																	tmp787 = create_operation_expression(associative1, tmp786)
																elif len(tmp786) == 1:
																	tmp787 = tmp786[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2', tmp787)
																except ValueError:
																	pass
																else:
																	if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																				if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																					if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
																							if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.1' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6955)(subst2):
																								# State 8541
																								if len(subjects2) == 0:
																									# State 8542
																									if len(subjects) == 0:
																										tmp_subst = Substitution()
																										tmp_subst['w'] = subst2['i2.2.1.1']
																										tmp_subst['n2'] = subst2['i2.2.1.2']
																										tmp_subst['c'] = subst2['i2.2.1.0']
																										tmp_subst['y'] = subst2['i2.2.1.1_1']
																										tmp_subst['n'] = subst2['i2.2.1.2_1']
																										tmp_subst['b'] = subst2['i2.2.1.0_1']
																										tmp_subst['a'] = subst2['i2.2.0']
																										tmp_subst['p'] = subst2['i2.2']
																										tmp_subst['v'] = subst2['i2.1']
																										tmp_subst['m'] = subst2['i2.2_1']
																										tmp_subst['u'] = subst2['i2.0']
																										tmp_subst['x'] = subst2['i2']
																										# 176: Integral(u*v**m*(a + b*y**n + c*w**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6955)
																										yield 176, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp786.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp786))
				if pattern_index == 170:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f7)(subst1):
											if 'i2' in subst1 and 'i2.1.0' in subst1 and CustomConstraint(cons_f34)(subst1):
												if 'i2' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f35)(subst1):
													if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
														if 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and CustomConstraint(cons_f2009)(subst1):
															if 'i2.1.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2010)(subst1):
																if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and 'i2' in subst1 and 'i2.1.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6956)(subst1):
																	# State 8543
																	if len(subjects2) >= 1:
																		tmp789 = []
																		tmp789.append(subjects2.popleft())
																		while True:
																			if len(tmp789) > 1:
																				tmp790 = create_operation_expression(associative1, tmp789)
																			elif len(tmp789) == 1:
																				tmp790 = tmp789[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2', tmp790)
																			except ValueError:
																				pass
																			else:
																				if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																						if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																							if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																								if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																									if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f7)(subst2):
																										if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f34)(subst2):
																											if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f35)(subst2):
																												if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and 'i2' in subst2 and 'i2.1.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.1.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6956)(subst2):
																													# State 8544
																													if len(subjects2) == 0:
																														# State 8545
																														if len(subjects) == 0:
																															tmp_subst = Substitution()
																															tmp_subst['v'] = subst2['i2.2.1.1']
																															tmp_subst['n'] = subst2['i2.2.1.2']
																															tmp_subst['b'] = subst2['i2.2.1.0']
																															tmp_subst['w'] = subst2['i2.2.1.1_1']
																															tmp_subst['n2'] = subst2['i2.2.1.2_1']
																															tmp_subst['c'] = subst2['i2.2.1.0_1']
																															tmp_subst['a'] = subst2['i2.2.0']
																															tmp_subst['p'] = subst2['i2.2']
																															tmp_subst['z'] = subst2['i2.1']
																															tmp_subst['m'] = subst2['i2.2_1']
																															tmp_subst['y'] = subst2['i2.1.1.1']
																															tmp_subst['B'] = subst2['i2.1.1.0']
																															tmp_subst['A'] = subst2['i2.1.0']
																															tmp_subst['u'] = subst2['i2.0']
																															tmp_subst['x'] = subst2['i2']
																															# 177: Integral(u*z**m*(A + B*y**n)*(a + b*v**n + c*w**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f34) and (cons_f35) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2009) and (cons_f2010) and (With6956)
																															yield 177, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp789.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp789))
				if pattern_index == 171:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2' in subst1 and 'i2.1.0' in subst1 and CustomConstraint(cons_f34)(subst1):
											if 'i2' in subst1 and 'i2.1.1.0' in subst1 and CustomConstraint(cons_f35)(subst1):
												if 'i2.2.1.2' in subst1 and 'i2.1.1.2' in subst1 and CustomConstraint(cons_f46)(subst1):
													if 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and CustomConstraint(cons_f2010)(subst1):
														if 'i2.2' in subst1 and 'i2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.1' in subst1 and 'i2.1.0' in subst1 and 'i2.1.1.2' in subst1 and 'i2.2_1' in subst1 and 'i2.1.1.0' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.1.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(With6957)(subst1):
															# State 8546
															if len(subjects2) >= 1:
																tmp792 = []
																tmp792.append(subjects2.popleft())
																while True:
																	if len(tmp792) > 1:
																		tmp793 = create_operation_expression(associative1, tmp792)
																	elif len(tmp792) == 1:
																		tmp793 = tmp792[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2', tmp793)
																	except ValueError:
																		pass
																	else:
																		if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																				if 'i2' in subst2 and 'i2.1.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																					if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2' in subst2 and 'i2.1.0' in subst2 and CustomConstraint(cons_f34)(subst2):
																								if 'i2' in subst2 and 'i2.1.1.0' in subst2 and CustomConstraint(cons_f35)(subst2):
																									if 'i2.2' in subst2 and 'i2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.1' in subst2 and 'i2.1.0' in subst2 and 'i2.1.1.2' in subst2 and 'i2.2_1' in subst2 and 'i2.1.1.0' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.1.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(With6957)(subst2):
																										# State 8547
																										if len(subjects2) == 0:
																											# State 8548
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['w'] = subst2['i2.2.1.1']
																												tmp_subst['n2'] = subst2['i2.2.1.2']
																												tmp_subst['c'] = subst2['i2.2.1.0']
																												tmp_subst['a'] = subst2['i2.2.0']
																												tmp_subst['p'] = subst2['i2.2']
																												tmp_subst['z'] = subst2['i2.1']
																												tmp_subst['m'] = subst2['i2.2_1']
																												tmp_subst['y'] = subst2['i2.1.1.1']
																												tmp_subst['n'] = subst2['i2.1.1.2']
																												tmp_subst['B'] = subst2['i2.1.1.0']
																												tmp_subst['A'] = subst2['i2.1.0']
																												tmp_subst['u'] = subst2['i2.0']
																												tmp_subst['x'] = subst2['i2']
																												# 178: Integral(u*z**m*(A + B*y**n)*(a + c*w**n2)**p, x) /; (cons_f2) and (cons_f7) and (cons_f34) and (cons_f35) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f2010) and (With6957)
																												yield 178, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp792.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp792))
				if pattern_index == 172:
					if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
								if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2009)(subst1):
												if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
													if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6958)(subst1):
														# State 8589
														if len(subjects2) >= 1:
															tmp795 = []
															tmp795.append(subjects2.popleft())
															while True:
																if len(tmp795) > 1:
																	tmp796 = create_operation_expression(associative1, tmp795)
																elif len(tmp795) == 1:
																	tmp796 = tmp795[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2', tmp796)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																			if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																				if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																						if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6958)(subst2):
																									# State 8590
																									if len(subjects2) == 0:
																										# State 8591
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst2['i2.2.1.1']
																											tmp_subst['n'] = subst2['i2.2.1.2']
																											tmp_subst['d'] = subst2['i2.2.1.0']
																											tmp_subst['c'] = subst2['i2.2.0']
																											tmp_subst['p'] = subst2['i2.2']
																											tmp_subst['y'] = subst2['i2.2.1.1_1']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['a'] = subst2['i2.2.0_1']
																											tmp_subst['m'] = subst2['i2.2_1']
																											tmp_subst['u'] = subst2['i2.0']
																											tmp_subst['x'] = subst2['i2']
																											# 179: Integral(u*(a + b*y**n)**m*(c + d*v**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f2009) and (With6958)
																											yield 179, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp795.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp795))
				if pattern_index == 173:
					if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f4)(subst1):
						if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f7)(subst1):
							if 'i2' in subst1 and 'i2.2.0_2' in subst1 and CustomConstraint(cons_f2)(subst1):
								if 'i2' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f48)(subst1):
									if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
											if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f27)(subst1):
												if 'i2' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(cons_f3)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f125)(subst1):
														if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f50)(subst1):
															if 'i2.2.1.1' in subst1 and 'i2.2.1.1_2' in subst1 and CustomConstraint(cons_f2009)(subst1):
																if 'i2.2.1.1_2' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2010)(subst1):
																	if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.0_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.0_2' in subst1 and 'i2.2.1.1' in subst1 and 'i2.2.1.1_2' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and 'i2.2.1.0_2' in subst1 and CustomConstraint(With6959)(subst1):
																		# State 8638
																		if len(subjects2) >= 1:
																			tmp798 = []
																			tmp798.append(subjects2.popleft())
																			while True:
																				if len(tmp798) > 1:
																					tmp799 = create_operation_expression(associative1, tmp798)
																				elif len(tmp798) == 1:
																					tmp799 = tmp798[0]
																				else:
																					assert False, "Unreachable"
																				subst2 = Substitution(subst1)
																				try:
																					subst2.try_add_variable('i2', tmp799)
																				except ValueError:
																					pass
																				else:
																					if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f7)(subst2):
																							if 'i2' in subst2 and 'i2.2.0_2' in subst2 and CustomConstraint(cons_f2)(subst2):
																								if 'i2' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f48)(subst2):
																									if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																											if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f27)(subst2):
																												if 'i2' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(cons_f3)(subst2):
																													if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f125)(subst2):
																														if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f50)(subst2):
																															if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.0_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.0_2' in subst2 and 'i2.2.1.1' in subst2 and 'i2.2.1.1_2' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and 'i2.2.1.0_2' in subst2 and CustomConstraint(With6959)(subst2):
																																# State 8639
																																if len(subjects2) == 0:
																																	# State 8640
																																	if len(subjects) == 0:
																																		tmp_subst = Substitution()
																																		tmp_subst['v'] = subst2['i2.2.1.1']
																																		tmp_subst['n'] = subst2['i2.2.1.2']
																																		tmp_subst['d'] = subst2['i2.2.1.0']
																																		tmp_subst['c'] = subst2['i2.2.0']
																																		tmp_subst['p'] = subst2['i2.2']
																																		tmp_subst['w'] = subst2['i2.2.1.1_1']
																																		tmp_subst['f'] = subst2['i2.2.1.0_1']
																																		tmp_subst['e'] = subst2['i2.2.0_1']
																																		tmp_subst['q'] = subst2['i2.2_1']
																																		tmp_subst['y'] = subst2['i2.2.1.1_2']
																																		tmp_subst['b'] = subst2['i2.2.1.0_2']
																																		tmp_subst['a'] = subst2['i2.2.0_2']
																																		tmp_subst['m'] = subst2['i2.2_2']
																																		tmp_subst['u'] = subst2['i2.0']
																																		tmp_subst['x'] = subst2['i2']
																																		# 180: Integral(u*(a + b*y**n)**m*(c + d*v**n)**p*(e + f*w**n)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f48) and (cons_f125) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2009) and (cons_f2010) and (With6959)
																																		yield 180, tmp_subst
																				if len(subjects2) == 0:
																					break
																				tmp798.append(subjects2.popleft())
																			subjects2.extendleft(reversed(tmp798))
				if pattern_index == 174:
					if 'i2' in subst1 and 'i2.1' in subst1 and CustomConstraint(cons_f1099)(subst1):
						if 'i2.2' in subst1 and 'i2.1' in subst1 and 'i2' in subst1 and 'i2.0' in subst1 and CustomConstraint(With6960)(subst1):
							# State 8643
							if len(subjects2) >= 1:
								tmp801 = []
								tmp801.append(subjects2.popleft())
								while True:
									if len(tmp801) > 1:
										tmp802 = create_operation_expression(associative1, tmp801)
									elif len(tmp801) == 1:
										tmp802 = tmp801[0]
									else:
										assert False, "Unreachable"
									subst2 = Substitution(subst1)
									try:
										subst2.try_add_variable('i2', tmp802)
									except ValueError:
										pass
									else:
										if 'i2' in subst2 and 'i2.1' in subst2 and CustomConstraint(cons_f1099)(subst2):
											if 'i2.2' in subst2 and 'i2.1' in subst2 and 'i2' in subst2 and 'i2.0' in subst2 and CustomConstraint(With6960)(subst2):
												# State 8644
												if len(subjects2) == 0:
													# State 8645
													if len(subjects) == 0:
														tmp_subst = Substitution()
														tmp_subst['F'] = subst2['i2.1']
														tmp_subst['v'] = subst2['i2.2']
														tmp_subst['u'] = subst2['i2.0']
														tmp_subst['x'] = subst2['i2']
														# 181: Integral(F**v*u, x) /; (cons_f1099) and (cons_f1099) and (With6960)
														yield 181, tmp_subst
									if len(subjects2) == 0:
										break
									tmp801.append(subjects2.popleft())
								subjects2.extendleft(reversed(tmp801))
				if pattern_index == 175:
					if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
						if 'i2' in subst1 and 'i2.1' in subst1 and CustomConstraint(cons_f1099)(subst1):
							if 'i2.2' in subst1 and 'i2.1_1' in subst1 and CustomConstraint(cons_f2013)(subst1):
								if 'i2.2' in subst1 and 'i2.0' in subst1 and 'i2.1' in subst1 and 'i2.2_1' in subst1 and 'i2.1_1' in subst1 and 'i2' in subst1 and CustomConstraint(With6961)(subst1):
									# State 8646
									if len(subjects2) >= 1:
										tmp804 = []
										tmp804.append(subjects2.popleft())
										while True:
											if len(tmp804) > 1:
												tmp805 = create_operation_expression(associative1, tmp804)
											elif len(tmp804) == 1:
												tmp805 = tmp804[0]
											else:
												assert False, "Unreachable"
											subst2 = Substitution(subst1)
											try:
												subst2.try_add_variable('i2', tmp805)
											except ValueError:
												pass
											else:
												if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
													if 'i2' in subst2 and 'i2.1' in subst2 and CustomConstraint(cons_f1099)(subst2):
														if 'i2.2' in subst2 and 'i2.0' in subst2 and 'i2.1' in subst2 and 'i2.2_1' in subst2 and 'i2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(With6961)(subst2):
															# State 8647
															if len(subjects2) == 0:
																# State 8648
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['F'] = subst2['i2.1']
																	tmp_subst['v'] = subst2['i2.2']
																	tmp_subst['w'] = subst2['i2.1_1']
																	tmp_subst['m'] = subst2['i2.2_1']
																	tmp_subst['u'] = subst2['i2.0']
																	tmp_subst['x'] = subst2['i2']
																	# 182: Integral(F**v*u*w**m, x) /; (cons_f1099) and (cons_f21) and (cons_f2013) and (With6961)
																	yield 182, tmp_subst
											if len(subjects2) == 0:
												break
											tmp804.append(subjects2.popleft())
										subjects2.extendleft(reversed(tmp804))
				if pattern_index == 176:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f38)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6962)(subst1):
											# State 8661
											if len(subjects2) >= 1:
												tmp807 = []
												tmp807.append(subjects2.popleft())
												while True:
													if len(tmp807) > 1:
														tmp808 = create_operation_expression(associative1, tmp807)
													elif len(tmp807) == 1:
														tmp808 = tmp807[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2', tmp808)
													except ValueError:
														pass
													else:
														if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6962)(subst2):
																			# State 8662
																			if len(subjects2) == 0:
																				# State 8663
																				if len(subjects) == 0:
																					tmp_subst = Substitution()
																					tmp_subst['v'] = subst2['i2.2.1.1']
																					tmp_subst['p'] = subst2['i2.2.1.2']
																					tmp_subst['w'] = subst2['i2.2.1.1_1']
																					tmp_subst['b'] = subst2['i2.2.1.0']
																					tmp_subst['a'] = subst2['i2.2.0']
																					tmp_subst['m'] = subst2['i2.2']
																					tmp_subst['u'] = subst2['i2.0']
																					tmp_subst['x'] = subst2['i2']
																					# 183: Integral(u*(a + b*v**p*w**p)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f38) and (With6962)
																					yield 183, tmp_subst
													if len(subjects2) == 0:
														break
													tmp807.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp807))
				if pattern_index == 177:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
										if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f52)(subst1):
											if 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f2014)(subst1):
												if 'i2.2_1' in subst1 and CustomConstraint(cons_f2015)(subst1):
													if 'i2.2.1.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f2016)(subst1):
														if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6963)(subst1):
															# State 8670
															if len(subjects2) >= 1:
																tmp810 = []
																tmp810.append(subjects2.popleft())
																while True:
																	if len(tmp810) > 1:
																		tmp811 = create_operation_expression(associative1, tmp810)
																	elif len(tmp810) == 1:
																		tmp811 = tmp810[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2', tmp811)
																	except ValueError:
																		pass
																	else:
																		if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																			if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																				if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																							if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f52)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6963)(subst2):
																									# State 8671
																									if len(subjects2) == 0:
																										# State 8672
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst2['i2.2.1.1']
																											tmp_subst['p'] = subst2['i2.2.1.2']
																											tmp_subst['w'] = subst2['i2.2.1.1_1']
																											tmp_subst['q'] = subst2['i2.2.1.2_1']
																											tmp_subst['b'] = subst2['i2.2.1.0']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['r'] = subst2['i2.2_1']
																											tmp_subst['u'] = subst2['i2.0']
																											tmp_subst['x'] = subst2['i2']
																											# 184: Integral(u*v**r*(a + b*v**p*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f2014) and (cons_f2015) and (cons_f2016) and (With6963)
																											yield 184, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp810.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp810))
				if pattern_index == 178:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
										if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f52)(subst1):
											if 'i2.2_1' in subst1 and CustomConstraint(cons_f2015)(subst1):
												if 'i2.2.1.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f2016)(subst1):
													if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f800)(subst1):
														if 'i2.2.1.2_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f2017)(subst1):
															if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6964)(subst1):
																# State 8677
																if len(subjects2) >= 1:
																	tmp813 = []
																	tmp813.append(subjects2.popleft())
																	while True:
																		if len(tmp813) > 1:
																			tmp814 = create_operation_expression(associative1, tmp813)
																		elif len(tmp813) == 1:
																			tmp814 = tmp813[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2', tmp814)
																		except ValueError:
																			pass
																		else:
																			if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																					if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																								if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f52)(subst2):
																									if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f800)(subst2):
																										if 'i2.2' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6964)(subst2):
																											# State 8678
																											if len(subjects2) == 0:
																												# State 8679
																												if len(subjects) == 0:
																													tmp_subst = Substitution()
																													tmp_subst['v'] = subst2['i2.2.1.1']
																													tmp_subst['p'] = subst2['i2.2.1.2']
																													tmp_subst['w'] = subst2['i2.2.1.1_1']
																													tmp_subst['q'] = subst2['i2.2.1.2_1']
																													tmp_subst['b'] = subst2['i2.2.1.0']
																													tmp_subst['a'] = subst2['i2.2.0']
																													tmp_subst['m'] = subst2['i2.2']
																													tmp_subst['r'] = subst2['i2.2_1']
																													tmp_subst['s'] = subst2['i2.2_2']
																													tmp_subst['u'] = subst2['i2.0']
																													tmp_subst['x'] = subst2['i2']
																													# 185: Integral(u*v**r*w**s*(a + b*v**p*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f800) and (cons_f2017) and (cons_f2015) and (cons_f2016) and (With6964)
																													yield 185, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp813.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp813))
				if pattern_index == 179:
					if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f38)(subst1):
											if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f2018)(subst1):
													if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6965)(subst1):
														# State 8684
														if len(subjects2) >= 1:
															tmp816 = []
															tmp816.append(subjects2.popleft())
															while True:
																if len(tmp816) > 1:
																	tmp817 = create_operation_expression(associative1, tmp816)
																elif len(tmp816) == 1:
																	tmp817 = tmp816[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2', tmp817)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																			if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																				if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																					if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6965)(subst2):
																							# State 8685
																							if len(subjects2) == 0:
																								# State 8686
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['v'] = subst2['i2.2.1.1']
																									tmp_subst['p'] = subst2['i2.2.1.2']
																									tmp_subst['a'] = subst2['i2.2.1.0']
																									tmp_subst['w'] = subst2['i2.2.1.1_1']
																									tmp_subst['q'] = subst2['i2.2.1.2_1']
																									tmp_subst['b'] = subst2['i2.2.1.0_1']
																									tmp_subst['m'] = subst2['i2.2']
																									tmp_subst['u'] = subst2['i2.0']
																									tmp_subst['x'] = subst2['i2']
																									# 186: Integral(u*(a*v**p + b*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f2018) and (cons_f38) and (cons_f17) and (With6965)
																									yield 186, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp816.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp816))
				if pattern_index == 180:
					if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
											if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f52)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f2019)(subst1):
													if 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f586)(subst1):
														if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6966)(subst1):
															# State 8687
															if len(subjects2) >= 1:
																tmp819 = []
																tmp819.append(subjects2.popleft())
																while True:
																	if len(tmp819) > 1:
																		tmp820 = create_operation_expression(associative1, tmp819)
																	elif len(tmp819) == 1:
																		tmp820 = tmp819[0]
																	else:
																		assert False, "Unreachable"
																	subst2 = Substitution(subst1)
																	try:
																		subst2.try_add_variable('i2', tmp820)
																	except ValueError:
																		pass
																	else:
																		if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																				if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																							if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f52)(subst2):
																								if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6966)(subst2):
																									# State 8688
																									if len(subjects2) == 0:
																										# State 8689
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst2['i2.2.1.1']
																											tmp_subst['p'] = subst2['i2.2.1.2']
																											tmp_subst['a'] = subst2['i2.2.1.0']
																											tmp_subst['w'] = subst2['i2.2.1.1_1']
																											tmp_subst['q'] = subst2['i2.2.1.2_1']
																											tmp_subst['b'] = subst2['i2.2.1.0_1']
																											tmp_subst['m'] = subst2['i2.2']
																											tmp_subst['r'] = subst2['i2.2_1']
																											tmp_subst['u'] = subst2['i2.0']
																											tmp_subst['x'] = subst2['i2']
																											# 187: Integral(u*v**r*(a*v**p + b*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f2019) and (cons_f586) and (cons_f17) and (With6966)
																											yield 187, tmp_subst
																	if len(subjects2) == 0:
																		break
																	tmp819.append(subjects2.popleft())
																subjects2.extendleft(reversed(tmp819))
				if pattern_index == 181:
					if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
											if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f800)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f2020)(subst1):
													if 'i2.2_1' in subst1 and CustomConstraint(cons_f2021)(subst1):
														if 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f2022)(subst1):
															if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6967)(subst1):
																# State 8693
																if len(subjects2) >= 1:
																	tmp822 = []
																	tmp822.append(subjects2.popleft())
																	while True:
																		if len(tmp822) > 1:
																			tmp823 = create_operation_expression(associative1, tmp822)
																		elif len(tmp822) == 1:
																			tmp823 = tmp822[0]
																		else:
																			assert False, "Unreachable"
																		subst2 = Substitution(subst1)
																		try:
																			subst2.try_add_variable('i2', tmp823)
																		except ValueError:
																			pass
																		else:
																			if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																				if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																					if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																						if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																								if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f800)(subst2):
																									if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6967)(subst2):
																										# State 8694
																										if len(subjects2) == 0:
																											# State 8695
																											if len(subjects) == 0:
																												tmp_subst = Substitution()
																												tmp_subst['v'] = subst2['i2.2.1.1']
																												tmp_subst['p'] = subst2['i2.2.1.2']
																												tmp_subst['a'] = subst2['i2.2.1.0']
																												tmp_subst['w'] = subst2['i2.2.1.1_1']
																												tmp_subst['q'] = subst2['i2.2.1.2_1']
																												tmp_subst['b'] = subst2['i2.2.1.0_1']
																												tmp_subst['m'] = subst2['i2.2']
																												tmp_subst['s'] = subst2['i2.2_1']
																												tmp_subst['u'] = subst2['i2.0']
																												tmp_subst['x'] = subst2['i2']
																												# 188: Integral(u*w**s*(a*v**p + b*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f800) and (cons_f2020) and (cons_f2021) and (cons_f2022) and (cons_f17) and (With6967)
																												yield 188, tmp_subst
																		if len(subjects2) == 0:
																			break
																		tmp822.append(subjects2.popleft())
																	subjects2.extendleft(reversed(tmp822))
				if pattern_index == 182:
					if 'i2.2.1.0_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f3)(subst1):
						if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
								if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
									if 'i2.2.1.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
											if 'i2.2_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f52)(subst1):
												if 'i2' in subst1 and 'i2.2_2' in subst1 and CustomConstraint(cons_f800)(subst1):
													if 'i2.2' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f2023)(subst1):
														if 'i2.2_2' in subst1 and CustomConstraint(cons_f2021)(subst1):
															if 'i2.2_2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f2022)(subst1):
																if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.1_1' in subst1 and 'i2.2_1' in subst1 and 'i2.2_2' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6968)(subst1):
																	# State 8696
																	if len(subjects2) >= 1:
																		tmp825 = []
																		tmp825.append(subjects2.popleft())
																		while True:
																			if len(tmp825) > 1:
																				tmp826 = create_operation_expression(associative1, tmp825)
																			elif len(tmp825) == 1:
																				tmp826 = tmp825[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2', tmp826)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.1.0_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f3)(subst2):
																					if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f21)(subst2):
																						if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																							if 'i2.2.1.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																								if 'i2' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																									if 'i2.2_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f52)(subst2):
																										if 'i2' in subst2 and 'i2.2_2' in subst2 and CustomConstraint(cons_f800)(subst2):
																											if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.1_1' in subst2 and 'i2.2_1' in subst2 and 'i2.2_2' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6968)(subst2):
																												# State 8697
																												if len(subjects2) == 0:
																													# State 8698
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['v'] = subst2['i2.2.1.1']
																														tmp_subst['p'] = subst2['i2.2.1.2']
																														tmp_subst['a'] = subst2['i2.2.1.0']
																														tmp_subst['w'] = subst2['i2.2.1.1_1']
																														tmp_subst['q'] = subst2['i2.2.1.2_1']
																														tmp_subst['b'] = subst2['i2.2.1.0_1']
																														tmp_subst['m'] = subst2['i2.2']
																														tmp_subst['r'] = subst2['i2.2_1']
																														tmp_subst['s'] = subst2['i2.2_2']
																														tmp_subst['u'] = subst2['i2.0']
																														tmp_subst['x'] = subst2['i2']
																														# 189: Integral(u*v**r*w**s*(a*v**p + b*w**q)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f50) and (cons_f52) and (cons_f800) and (cons_f2023) and (cons_f2021) and (cons_f2022) and (cons_f17) and (With6968)
																														yield 189, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp825.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp825))
				if pattern_index == 183:
					if 'i2.2' in subst1 and CustomConstraint(cons_f66)(subst1):
						if 'i2.2' in subst1 and 'i2.1' in subst1 and CustomConstraint(cons_f21)(subst1):
							if 'i2.2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2024)(subst1):
								# State 8699
								if len(subjects2) >= 1:
									tmp828 = []
									tmp828.append(subjects2.popleft())
									while True:
										if len(tmp828) > 1:
											tmp829 = create_operation_expression(associative1, tmp828)
										elif len(tmp828) == 1:
											tmp829 = tmp828[0]
										else:
											assert False, "Unreachable"
										subst2 = Substitution(subst1)
										try:
											subst2.try_add_variable('i2.1', tmp829)
										except ValueError:
											pass
										else:
											if 'i2.2' in subst2 and 'i2.1' in subst2 and CustomConstraint(cons_f21)(subst2):
												if 'i2.2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2024)(subst2):
													# State 8700
													if len(subjects2) == 0:
														# State 8701
														if len(subjects) == 0:
															tmp_subst = Substitution()
															tmp_subst['x'] = subst2['i2.1']
															tmp_subst['m'] = subst2['i2.2']
															tmp_subst['u'] = subst2['i2.0']
															# 190: Integral(u*x**m, x) /; (cons_f21) and (cons_f66) and (cons_f2024)
															yield 190, tmp_subst
										if len(subjects2) == 0:
											break
										tmp828.append(subjects2.popleft())
									subjects2.extendleft(reversed(tmp828))
				if pattern_index == 184:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2' in subst1 and 'i2.2.2_1' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2' in subst1 and 'i2.2.2_2' in subst1 and CustomConstraint(cons_f50)(subst1):
											if 'i2.2.1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f10)(subst1):
												if 'i2.2.1_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f2025)(subst1):
													if 'i2' in subst1 and 'i2.2.1_2' in subst1 and CustomConstraint(cons_f2026)(subst1):
														# State 8740
														if len(subjects2) >= 1:
															tmp831 = []
															tmp831.append(subjects2.popleft())
															while True:
																if len(tmp831) > 1:
																	tmp832 = create_operation_expression(associative1, tmp831)
																elif len(tmp831) == 1:
																	tmp832 = tmp831[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2', tmp832)
																except ValueError:
																	pass
																else:
																	if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																			if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
																				if 'i2' in subst2 and 'i2.2.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
																					if 'i2' in subst2 and 'i2.2.2_2' in subst2 and CustomConstraint(cons_f50)(subst2):
																						if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
																							if 'i2.2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2025)(subst2):
																								if 'i2' in subst2 and 'i2.2.1_2' in subst2 and CustomConstraint(cons_f2026)(subst2):
																									# State 8741
																									if len(subjects2) == 0:
																										# State 8742
																										if len(subjects) == 0:
																											tmp_subst = Substitution()
																											tmp_subst['v'] = subst2['i2.2.1']
																											tmp_subst['m'] = subst2['i2.2.2']
																											tmp_subst['w'] = subst2['i2.2.1_1']
																											tmp_subst['n'] = subst2['i2.2.2_1']
																											tmp_subst['z'] = subst2['i2.2.1_2']
																											tmp_subst['q'] = subst2['i2.2.2_2']
																											tmp_subst['a'] = subst2['i2.2.0']
																											tmp_subst['p'] = subst2['i2.2']
																											tmp_subst['u'] = subst2['i2.0']
																											tmp_subst['x'] = subst2['i2']
																											# 193: Integral(u*(a*v**m*w**n*z**q)**p, x) /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f147) and (cons_f10) and (cons_f2025) and (cons_f2026)
																											yield 193, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp831.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp831))
				if pattern_index == 185:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2' in subst1 and 'i2.2.2_1' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f10)(subst1):
											if 'i2.2.1_1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f2025)(subst1):
												# State 8751
												if len(subjects2) >= 1:
													tmp834 = []
													tmp834.append(subjects2.popleft())
													while True:
														if len(tmp834) > 1:
															tmp835 = create_operation_expression(associative1, tmp834)
														elif len(tmp834) == 1:
															tmp835 = tmp834[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2', tmp835)
														except ValueError:
															pass
														else:
															if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																	if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
																		if 'i2' in subst2 and 'i2.2.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
																			if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
																				if 'i2.2.1_1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2025)(subst2):
																					# State 8752
																					if len(subjects2) == 0:
																						# State 8753
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['v'] = subst2['i2.2.1']
																							tmp_subst['m'] = subst2['i2.2.2']
																							tmp_subst['w'] = subst2['i2.2.1_1']
																							tmp_subst['n'] = subst2['i2.2.2_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['p'] = subst2['i2.2']
																							tmp_subst['u'] = subst2['i2.0']
																							tmp_subst['x'] = subst2['i2']
																							# 194: Integral(u*(a*v**m*w**n)**p, x) /; (cons_f2) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2025)
																							yield 194, tmp_subst
														if len(subjects2) == 0:
															break
														tmp834.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp834))
				if pattern_index == 186:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
							if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2.1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f10)(subst1):
										if 'i2.2.2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2027)(subst1):
											if 'i2.2.1' in subst1 and 'i2' in subst1 and 'i2.2.2' in subst1 and CustomConstraint(cons_f2028)(subst1):
												# State 8784
												if len(subjects2) >= 1:
													tmp837 = []
													tmp837.append(subjects2.popleft())
													while True:
														if len(tmp837) > 1:
															tmp838 = create_operation_expression(associative1, tmp837)
														elif len(tmp837) == 1:
															tmp838 = tmp837[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2', tmp838)
														except ValueError:
															pass
														else:
															if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																	if 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f21)(subst2):
																		if 'i2.2.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f10)(subst2):
																			if 'i2.2.1' in subst2 and 'i2' in subst2 and 'i2.2.2' in subst2 and CustomConstraint(cons_f2028)(subst2):
																				# State 8785
																				if len(subjects2) == 0:
																					# State 8786
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['v'] = subst2['i2.2.1']
																						tmp_subst['m'] = subst2['i2.2.2']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['p'] = subst2['i2.2']
																						tmp_subst['u'] = subst2['i2.0']
																						tmp_subst['x'] = subst2['i2']
																						# 195: Integral(u*(a*v**m)**p, x) /; (cons_f2) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f10) and (cons_f2027) and (cons_f2028)
																						yield 195, tmp_subst
														if len(subjects2) == 0:
															break
														tmp837.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp837))
				if pattern_index == 187:
					if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2.2' in subst1 and CustomConstraint(cons_f667)(subst1):
									if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f196)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2029)(subst1):
											# State 8799
											if len(subjects2) >= 1:
												tmp840 = []
												tmp840.append(subjects2.popleft())
												while True:
													if len(tmp840) > 1:
														tmp841 = create_operation_expression(associative1, tmp840)
													elif len(tmp840) == 1:
														tmp841 = tmp840[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.1', tmp841)
													except ValueError:
														pass
													else:
														if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f5)(subst2):
																	if 'i2.2.1.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2029)(subst2):
																		# State 8800
																		if len(subjects2) == 0:
																			# State 8801
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.1']
																				tmp_subst['n'] = subst2['i2.2.1.2']
																				tmp_subst['b'] = subst2['i2.2.1.0']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['p'] = subst2['i2.2']
																				tmp_subst['u'] = subst2['i2.0']
																				# 196: Integral(u*(a + b*x**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f667) and (cons_f196) and (cons_f2029)
																				yield 196, tmp_subst
													if len(subjects2) == 0:
														break
													tmp840.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp840))
				if pattern_index == 188:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
							if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f196)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f840)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2' in subst1 and CustomConstraint(cons_f2030)(subst1):
												# State 8812
												if len(subjects2) >= 1:
													tmp843 = []
													tmp843.append(subjects2.popleft())
													while True:
														if len(tmp843) > 1:
															tmp844 = create_operation_expression(associative1, tmp843)
														elif len(tmp843) == 1:
															tmp844 = tmp843[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2', tmp844)
														except ValueError:
															pass
														else:
															if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f5)(subst2):
																		if 'i2.2.1.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f840)(subst2):
																			if 'i2.2.1.1' in subst2 and 'i2' in subst2 and CustomConstraint(cons_f2030)(subst2):
																				# State 8813
																				if len(subjects2) == 0:
																					# State 8814
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['v'] = subst2['i2.2.1.1']
																						tmp_subst['n'] = subst2['i2.2.1.2']
																						tmp_subst['b'] = subst2['i2.2.1.0']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['p'] = subst2['i2.2']
																						tmp_subst['u'] = subst2['i2.0']
																						tmp_subst['x'] = subst2['i2']
																						# 197: Integral(u*(a + b*v**n)**p, x) /; (cons_f2) and (cons_f3) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840) and (cons_f2030)
																						yield 197, tmp_subst
														if len(subjects2) == 0:
															break
														tmp843.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp843))
				if pattern_index == 189:
					if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
						if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f196)(subst1):
							if 'i2.2.0' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f2)(subst1):
								if 'i2.2.1.0' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2.1.2_1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f21)(subst1):
										if 'i2.2' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f5)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.1_1' in subst1 and CustomConstraint(cons_f840)(subst1):
												# State 8847
												if len(subjects2) >= 1:
													tmp846 = []
													tmp846.append(subjects2.popleft())
													while True:
														if len(tmp846) > 1:
															tmp847 = create_operation_expression(associative1, tmp846)
														elif len(tmp846) == 1:
															tmp847 = tmp846[0]
														else:
															assert False, "Unreachable"
														subst2 = Substitution(subst1)
														try:
															subst2.try_add_variable('i2.2.1.1_1', tmp847)
														except ValueError:
															pass
														else:
															if 'i2.2.0' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f2)(subst2):
																if 'i2.2.1.0' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f3)(subst2):
																	if 'i2.2.1.2_1' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f21)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f5)(subst2):
																			if 'i2.2.1.1' in subst2 and 'i2.2.1.1_1' in subst2 and CustomConstraint(cons_f840)(subst2):
																				# State 8848
																				if len(subjects2) == 0:
																					# State 8849
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['v'] = subst2['i2.2.1.1']
																						tmp_subst['n'] = subst2['i2.2.1.2']
																						tmp_subst['x'] = subst2['i2.2.1.1_1']
																						tmp_subst['m'] = subst2['i2.2.1.2_1']
																						tmp_subst['b'] = subst2['i2.2.1.0']
																						tmp_subst['a'] = subst2['i2.2.0']
																						tmp_subst['p'] = subst2['i2.2']
																						tmp_subst['u'] = subst2['i2.0']
																						# 198: Integral(u*(a + b*v**n*x**m)**p, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f5) and (cons_f147) and (cons_f196) and (cons_f840)
																						yield 198, tmp_subst
														if len(subjects2) == 0:
															break
														tmp846.append(subjects2.popleft())
													subjects2.extendleft(reversed(tmp846))
				if pattern_index == 190:
					if 'i2.2' in subst1 and CustomConstraint(cons_f18)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2.1.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f52)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f800)(subst1):
											if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f2031)(subst1):
												if 'i2.2' in subst1 and 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6978)(subst1):
													# State 8875
													if len(subjects2) >= 1:
														tmp849 = []
														tmp849.append(subjects2.popleft())
														while True:
															if len(tmp849) > 1:
																tmp850 = create_operation_expression(associative1, tmp849)
															elif len(tmp849) == 1:
																tmp850 = tmp849[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.1', tmp850)
															except ValueError:
																pass
															else:
																if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f21)(subst2):
																			if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f52)(subst2):
																				if 'i2.2.1.1' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f800)(subst2):
																					if 'i2.2' in subst2 and 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6978)(subst2):
																						# State 8876
																						if len(subjects2) == 0:
																							# State 8877
																							if len(subjects) == 0:
																								tmp_subst = Substitution()
																								tmp_subst['x'] = subst2['i2.2.1.1']
																								tmp_subst['r'] = subst2['i2.2.1.2']
																								tmp_subst['a'] = subst2['i2.2.1.0']
																								tmp_subst['s'] = subst2['i2.2.1.2_1']
																								tmp_subst['b'] = subst2['i2.2.1.0_1']
																								tmp_subst['m'] = subst2['i2.2']
																								tmp_subst['u'] = subst2['i2.0']
																								# 199: Integral(u*(a*x**r + b*x**s)**m, x) /; (cons_f2) and (cons_f3) and (cons_f21) and (cons_f52) and (cons_f800) and (cons_f18) and (cons_f2031) and (With6978)
																								yield 199, tmp_subst
															if len(subjects2) == 0:
																break
															tmp849.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp849))
				if pattern_index == 191:
					if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f148)(subst1):
								if 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6979)(subst1):
									# State 8880
									if len(subjects2) >= 1:
										tmp852 = []
										tmp852.append(subjects2.popleft())
										while True:
											if len(tmp852) > 1:
												tmp853 = create_operation_expression(associative1, tmp852)
											elif len(tmp852) == 1:
												tmp853 = tmp852[0]
											else:
												assert False, "Unreachable"
											subst2 = Substitution(subst1)
											try:
												subst2.try_add_variable('i2.2.1.1', tmp853)
											except ValueError:
												pass
											else:
												if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
													if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
														if 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6979)(subst2):
															# State 8881
															if len(subjects2) == 0:
																# State 8882
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['x'] = subst2['i2.2.1.1']
																	tmp_subst['n'] = subst2['i2.2.1.2']
																	tmp_subst['b'] = subst2['i2.2.1.0']
																	tmp_subst['a'] = subst2['i2.2.0']
																	tmp_subst['u'] = subst2['i2.0']
																	# 200: Integral(u/(a + b*x**n), x) /; (cons_f2) and (cons_f3) and (cons_f148) and (With6979)
																	yield 200, tmp_subst
											if len(subjects2) == 0:
												break
											tmp852.append(subjects2.popleft())
										subjects2.extendleft(reversed(tmp852))
				if pattern_index == 192:
					if 'i2.2' in subst1 and CustomConstraint(cons_f38)(subst1):
						if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
							if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
								if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f45)(subst1):
												if 'i2.2.1.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2032)(subst1):
													# State 8895
													if len(subjects2) >= 1:
														tmp855 = []
														tmp855.append(subjects2.popleft())
														while True:
															if len(tmp855) > 1:
																tmp856 = create_operation_expression(associative1, tmp855)
															elif len(tmp855) == 1:
																tmp856 = tmp855[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.1', tmp856)
															except ValueError:
																pass
															else:
																if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f7)(subst2):
																			if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																				if 'i2.2.1.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2032)(subst2):
																					# State 8896
																					if len(subjects2) == 0:
																						# State 8897
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.1']
																							tmp_subst['n'] = subst2['i2.2.1.2']
																							tmp_subst['b'] = subst2['i2.2.1.0']
																							tmp_subst['n2'] = subst2['i2.2.1.2_1']
																							tmp_subst['c'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['p'] = subst2['i2.2']
																							tmp_subst['u'] = subst2['i2.0']
																							# 201: Integral(u*(a + b*x**n + c*x**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f46) and (cons_f45) and (cons_f38) and (cons_f2032)
																							yield 201, tmp_subst
															if len(subjects2) == 0:
																break
															tmp855.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp855))
				if pattern_index == 193:
					if 'i2.2' in subst1 and CustomConstraint(cons_f147)(subst1):
						if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
							if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
								if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
									if 'i2.2' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f5)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f7)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f45)(subst1):
													if 'i2.2.1.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2032)(subst1):
														# State 8900
														if len(subjects2) >= 1:
															tmp858 = []
															tmp858.append(subjects2.popleft())
															while True:
																if len(tmp858) > 1:
																	tmp859 = create_operation_expression(associative1, tmp858)
																elif len(tmp858) == 1:
																	tmp859 = tmp858[0]
																else:
																	assert False, "Unreachable"
																subst2 = Substitution(subst1)
																try:
																	subst2.try_add_variable('i2.2.1.1', tmp859)
																except ValueError:
																	pass
																else:
																	if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																		if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																			if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f5)(subst2):
																				if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f7)(subst2):
																					if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																						if 'i2.2.1.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2032)(subst2):
																							# State 8901
																							if len(subjects2) == 0:
																								# State 8902
																								if len(subjects) == 0:
																									tmp_subst = Substitution()
																									tmp_subst['x'] = subst2['i2.2.1.1']
																									tmp_subst['n'] = subst2['i2.2.1.2']
																									tmp_subst['b'] = subst2['i2.2.1.0']
																									tmp_subst['n2'] = subst2['i2.2.1.2_1']
																									tmp_subst['c'] = subst2['i2.2.1.0_1']
																									tmp_subst['a'] = subst2['i2.2.0']
																									tmp_subst['p'] = subst2['i2.2']
																									tmp_subst['u'] = subst2['i2.0']
																									# 202: Integral(u*(a + b*x**n + c*x**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f45) and (cons_f147) and (cons_f2032)
																									yield 202, tmp_subst
																if len(subjects2) == 0:
																	break
																tmp858.append(subjects2.popleft())
															subjects2.extendleft(reversed(tmp858))
				if pattern_index == 194:
					if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f148)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2' in subst1 and 'i2.0' in subst1 and 'i2.2.1.2_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(With6982)(subst1):
											# State 8905
											if len(subjects2) >= 1:
												tmp861 = []
												tmp861.append(subjects2.popleft())
												while True:
													if len(tmp861) > 1:
														tmp862 = create_operation_expression(associative1, tmp861)
													elif len(tmp861) == 1:
														tmp862 = tmp861[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.1', tmp862)
													except ValueError:
														pass
													else:
														if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2' in subst2 and 'i2.0' in subst2 and 'i2.2.1.2_1' in subst2 and 'i2.2.0' in subst2 and 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(With6982)(subst2):
																		# State 8906
																		if len(subjects2) == 0:
																			# State 8907
																			if len(subjects) == 0:
																				tmp_subst = Substitution()
																				tmp_subst['x'] = subst2['i2.2.1.1']
																				tmp_subst['n'] = subst2['i2.2.1.2']
																				tmp_subst['b'] = subst2['i2.2.1.0']
																				tmp_subst['n2'] = subst2['i2.2.1.2_1']
																				tmp_subst['c'] = subst2['i2.2.1.0_1']
																				tmp_subst['a'] = subst2['i2.2.0']
																				tmp_subst['u'] = subst2['i2.0']
																				# 203: Integral(u/(a + b*x**n + c*x**n2), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f46) and (cons_f148) and (With6982)
																				yield 203, tmp_subst
													if len(subjects2) == 0:
														break
													tmp861.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp861))
				if pattern_index == 195:
					if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.1' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.2.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.2.0' in subst1 and 'i2.2.1.2.1' in subst1 and CustomConstraint(cons_f7)(subst1):
								if 'i2.2.1.2.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f21)(subst1):
									if 'i2.2.1.2.1' in subst1 and 'i2.2.1.2.2' in subst1 and CustomConstraint(cons_f4)(subst1):
										if 'i2.2.1.0_1' in subst1 and 'i2.2.1.2.0' in subst1 and 'i2.2.1.2' in subst1 and 'i2.2.1.2.2' in subst1 and 'i2.2.1.2.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f1854)(subst1):
											# State 9002
											if len(subjects2) >= 1:
												tmp864 = []
												tmp864.append(subjects2.popleft())
												while True:
													if len(tmp864) > 1:
														tmp865 = create_operation_expression(associative1, tmp864)
													elif len(tmp864) == 1:
														tmp865 = tmp864[0]
													else:
														assert False, "Unreachable"
													subst2 = Substitution(subst1)
													try:
														subst2.try_add_variable('i2.2.1.2.1', tmp865)
													except ValueError:
														pass
													else:
														if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.1' in subst2 and CustomConstraint(cons_f2)(subst2):
															if 'i2.2.1.2.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																if 'i2.2.1.2.0' in subst2 and 'i2.2.1.2.1' in subst2 and CustomConstraint(cons_f7)(subst2):
																	if 'i2.2.1.2.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f21)(subst2):
																		if 'i2.2.1.2.1' in subst2 and 'i2.2.1.2.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.2.0' in subst2 and 'i2.2.1.2' in subst2 and 'i2.2.1.2.2' in subst2 and 'i2.2.1.2.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f1854)(subst2):
																				# State 9003
																				if len(subjects2) == 0:
																					# State 9004
																					if len(subjects) == 0:
																						tmp_subst = Substitution()
																						tmp_subst['x'] = subst2['i2.2.1.2.1']
																						tmp_subst['n'] = subst2['i2.2.1.2.2']
																						tmp_subst['c'] = subst2['i2.2.1.2.0']
																						tmp_subst['b'] = subst2['i2.2.1.0']
																						tmp_subst['m'] = subst2['i2.2.1.2']
																						tmp_subst['a'] = subst2['i2.2.1.0_1']
																						tmp_subst['u'] = subst2['i2.0']
																						# 204: Integral(u/(a*x**m + b*sqrt(c*x**n)), x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f21) and (cons_f4) and (cons_f1854)
																						yield 204, tmp_subst
													if len(subjects2) == 0:
														break
													tmp864.append(subjects2.popleft())
												subjects2.extendleft(reversed(tmp864))
				if pattern_index == 196:
					if 'i2.0' in subst1 and CustomConstraint(cons_f1247)(subst1):
						if 'i2.0' in subst1 and 'i2.1' in subst1 and CustomConstraint(cons_f2029)(subst1):
							if 'i2.0' in subst1 and 'i2.1' in subst1 and CustomConstraint(With6985)(subst1):
								# State 9005
								if len(subjects2) >= 1:
									tmp867 = []
									tmp867.append(subjects2.popleft())
									while True:
										if len(tmp867) > 1:
											tmp868 = create_operation_expression(associative1, tmp867)
										elif len(tmp867) == 1:
											tmp868 = tmp867[0]
										else:
											assert False, "Unreachable"
										subst2 = Substitution(subst1)
										try:
											subst2.try_add_variable('i2.1', tmp868)
										except ValueError:
											pass
										else:
											if 'i2.0' in subst2 and 'i2.1' in subst2 and CustomConstraint(cons_f2029)(subst2):
												if 'i2.0' in subst2 and 'i2.1' in subst2 and CustomConstraint(With6985)(subst2):
													# State 9006
													if len(subjects2) == 0:
														# State 9007
														if len(subjects) == 0:
															tmp_subst = Substitution()
															tmp_subst['x'] = subst2['i2.1']
															tmp_subst['u'] = subst2['i2.0']
															# 206: Integral(u/x, x) /; (cons_f1247) and (cons_f2029) and (With6985)
															yield 206, tmp_subst
										if len(subjects2) == 0:
											break
										tmp867.append(subjects2.popleft())
									subjects2.extendleft(reversed(tmp867))
				if pattern_index == 197:
					if 'i2.2' in subst1 and CustomConstraint(cons_f17)(subst1):
						if 'i2.0' in subst1 and CustomConstraint(cons_f1247)(subst1):
							if 'i2.2' in subst1 and CustomConstraint(cons_f261)(subst1):
								if 'i2.2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2033)(subst1):
									if 'i2.2' in subst1 and 'i2.1' in subst1 and 'i2.0' in subst1 and CustomConstraint(With6986)(subst1):
										# State 9008
										if len(subjects2) >= 1:
											tmp870 = []
											tmp870.append(subjects2.popleft())
											while True:
												if len(tmp870) > 1:
													tmp871 = create_operation_expression(associative1, tmp870)
												elif len(tmp870) == 1:
													tmp871 = tmp870[0]
												else:
													assert False, "Unreachable"
												subst2 = Substitution(subst1)
												try:
													subst2.try_add_variable('i2.1', tmp871)
												except ValueError:
													pass
												else:
													if 'i2.2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2033)(subst2):
														if 'i2.2' in subst2 and 'i2.1' in subst2 and 'i2.0' in subst2 and CustomConstraint(With6986)(subst2):
															# State 9009
															if len(subjects2) == 0:
																# State 9010
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['x'] = subst2['i2.1']
																	tmp_subst['m'] = subst2['i2.2']
																	tmp_subst['u'] = subst2['i2.0']
																	# 207: Integral(u*x**m, x) /; (cons_f17) and (cons_f261) and (cons_f1247) and (cons_f2033) and (With6986)
																	yield 207, tmp_subst
												if len(subjects2) == 0:
													break
												tmp870.append(subjects2.popleft())
											subjects2.extendleft(reversed(tmp870))
				if pattern_index == 198:
					if 'i2.2' in subst1 and CustomConstraint(cons_f367)(subst1):
						# State 9011
						if len(subjects2) >= 1:
							tmp873 = []
							tmp873.append(subjects2.popleft())
							while True:
								if len(tmp873) > 1:
									tmp874 = create_operation_expression(associative1, tmp873)
								elif len(tmp873) == 1:
									tmp874 = tmp873[0]
								else:
									assert False, "Unreachable"
								subst2 = Substitution(subst1)
								try:
									subst2.try_add_variable('i2.1', tmp874)
								except ValueError:
									pass
								else:
									# State 9012
									if len(subjects2) == 0:
										# State 9013
										if len(subjects) == 0:
											tmp_subst = Substitution()
											tmp_subst['x'] = subst2['i2.1']
											tmp_subst['m'] = subst2['i2.2']
											tmp_subst['u'] = subst2['i2.0']
											# 208: Integral(u*x**m, x) /; (cons_f367)
											yield 208, tmp_subst
								if len(subjects2) == 0:
									break
								tmp873.append(subjects2.popleft())
							subjects2.extendleft(reversed(tmp873))
				if pattern_index == 199:
					if 'i2' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2.1.2' in subst1 and CustomConstraint(cons_f148)(subst1):
								if 'i2.2.1.1' in subst1 and 'i2' in subst1 and 'i2.0' in subst1 and CustomConstraint(cons_f2035)(subst1):
									# State 9047
									if len(subjects2) >= 1:
										tmp876 = []
										tmp876.append(subjects2.popleft())
										while True:
											if len(tmp876) > 1:
												tmp877 = create_operation_expression(associative1, tmp876)
											elif len(tmp876) == 1:
												tmp877 = tmp876[0]
											else:
												assert False, "Unreachable"
											subst2 = Substitution(subst1)
											try:
												subst2.try_add_variable('i2', tmp877)
											except ValueError:
												pass
											else:
												if 'i2' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
													if 'i2' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
														if 'i2.2.1.1' in subst2 and 'i2' in subst2 and 'i2.0' in subst2 and CustomConstraint(cons_f2035)(subst2):
															# State 9048
															if len(subjects2) == 0:
																# State 9049
																if len(subjects) == 0:
																	tmp_subst = Substitution()
																	tmp_subst['u'] = subst2['i2.2.1.1']
																	tmp_subst['n'] = subst2['i2.2.1.2']
																	tmp_subst['b'] = subst2['i2.2.1.0']
																	tmp_subst['a'] = subst2['i2.2.0']
																	tmp_subst['v'] = subst2['i2.0']
																	tmp_subst['x'] = subst2['i2']
																	# 213: Integral(v/(a + b*u**n), x) /; (cons_f2) and (cons_f3) and (cons_f148) and (cons_f2035)
																	yield 213, tmp_subst
											if len(subjects2) == 0:
												break
											tmp876.append(subjects2.popleft())
										subjects2.extendleft(reversed(tmp876))
				if pattern_index == 200:
					if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
							if 'i2.2' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f5)(subst1):
								if 'i2.2.1.1' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f7)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f27)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f21)(subst1):
											if 'i2.2.1.1' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f4)(subst1):
												if 'i2.2.1.1' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f50)(subst1):
													if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2036)(subst1):
														if 'i2.2.1.0' in subst1 and 'i2.2.0_1' in subst1 and CustomConstraint(cons_f1676)(subst1):
															if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f1255)(subst1):
																if 'i2.2' in subst1 and 'i2.2_1' in subst1 and CustomConstraint(cons_f2037)(subst1):
																	# State 9093
																	if len(subjects2) >= 1:
																		tmp879 = []
																		tmp879.append(subjects2.popleft())
																		while True:
																			if len(tmp879) > 1:
																				tmp880 = create_operation_expression(associative1, tmp879)
																			elif len(tmp879) == 1:
																				tmp880 = tmp879[0]
																			else:
																				assert False, "Unreachable"
																			subst2 = Substitution(subst1)
																			try:
																				subst2.try_add_variable('i2.2.1.1', tmp880)
																			except ValueError:
																				pass
																			else:
																				if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																					if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																						if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f5)(subst2):
																							if 'i2.2.1.1' in subst2 and 'i2.2.0_1' in subst2 and CustomConstraint(cons_f7)(subst2):
																								if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f27)(subst2):
																									if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f21)(subst2):
																										if 'i2.2.1.1' in subst2 and 'i2.2.1.2_1' in subst2 and CustomConstraint(cons_f4)(subst2):
																											if 'i2.2.1.1' in subst2 and 'i2.2_1' in subst2 and CustomConstraint(cons_f50)(subst2):
																												# State 9094
																												if len(subjects2) == 0:
																													# State 9095
																													if len(subjects) == 0:
																														tmp_subst = Substitution()
																														tmp_subst['x'] = subst2['i2.2.1.1']
																														tmp_subst['m'] = subst2['i2.2.1.2']
																														tmp_subst['b'] = subst2['i2.2.1.0']
																														tmp_subst['a'] = subst2['i2.2.0']
																														tmp_subst['p'] = subst2['i2.2']
																														tmp_subst['n'] = subst2['i2.2.1.2_1']
																														tmp_subst['d'] = subst2['i2.2.1.0_1']
																														tmp_subst['c'] = subst2['i2.2.0_1']
																														tmp_subst['q'] = subst2['i2.2_1']
																														tmp_subst['u'] = subst2['i2.0']
																														# 216: Integral(u*(a + b*x**m)**p*(c + d*x**n)**q, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f27) and (cons_f21) and (cons_f4) and (cons_f5) and (cons_f50) and (cons_f2036) and (cons_f1676) and (cons_f1255) and (cons_f2037)
																														yield 216, tmp_subst
																			if len(subjects2) == 0:
																				break
																			tmp879.append(subjects2.popleft())
																		subjects2.extendleft(reversed(tmp879))
				if pattern_index == 201:
					if 'i2.2.1.2' in subst1 and 'i2.2.1.2_1' in subst1 and CustomConstraint(cons_f46)(subst1):
						if 'i2.2.1.1' in subst1 and 'i2.2.0' in subst1 and CustomConstraint(cons_f2)(subst1):
							if 'i2.2.1.1' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f3)(subst1):
								if 'i2.2' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f5)(subst1):
									if 'i2.2.1.0_1' in subst1 and 'i2.2.1.1' in subst1 and CustomConstraint(cons_f7)(subst1):
										if 'i2.2.1.1' in subst1 and 'i2.2.1.2' in subst1 and CustomConstraint(cons_f4)(subst1):
											if 'i2.2.1.0_1' in subst1 and 'i2.2.0' in subst1 and 'i2.2.1.0' in subst1 and CustomConstraint(cons_f45)(subst1):
												if 'i2.2' in subst1 and CustomConstraint(cons_f347)(subst1):
													# State 9099
													if len(subjects2) >= 1:
														tmp882 = []
														tmp882.append(subjects2.popleft())
														while True:
															if len(tmp882) > 1:
																tmp883 = create_operation_expression(associative1, tmp882)
															elif len(tmp882) == 1:
																tmp883 = tmp882[0]
															else:
																assert False, "Unreachable"
															subst2 = Substitution(subst1)
															try:
																subst2.try_add_variable('i2.2.1.1', tmp883)
															except ValueError:
																pass
															else:
																if 'i2.2.1.1' in subst2 and 'i2.2.0' in subst2 and CustomConstraint(cons_f2)(subst2):
																	if 'i2.2.1.1' in subst2 and 'i2.2.1.0' in subst2 and CustomConstraint(cons_f3)(subst2):
																		if 'i2.2' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f5)(subst2):
																			if 'i2.2.1.0_1' in subst2 and 'i2.2.1.1' in subst2 and CustomConstraint(cons_f7)(subst2):
																				if 'i2.2.1.1' in subst2 and 'i2.2.1.2' in subst2 and CustomConstraint(cons_f4)(subst2):
																					# State 9100
																					if len(subjects2) == 0:
																						# State 9101
																						if len(subjects) == 0:
																							tmp_subst = Substitution()
																							tmp_subst['x'] = subst2['i2.2.1.1']
																							tmp_subst['n'] = subst2['i2.2.1.2']
																							tmp_subst['b'] = subst2['i2.2.1.0']
																							tmp_subst['n2'] = subst2['i2.2.1.2_1']
																							tmp_subst['c'] = subst2['i2.2.1.0_1']
																							tmp_subst['a'] = subst2['i2.2.0']
																							tmp_subst['p'] = subst2['i2.2']
																							tmp_subst['u'] = subst2['i2.0']
																							# 217: Integral(u*(a + b*x**n + c*x**n2)**p, x) /; (cons_f2) and (cons_f3) and (cons_f7) and (cons_f4) and (cons_f5) and (cons_f46) and (cons_f45) and (cons_f347)
																							yield 217, tmp_subst
															if len(subjects2) == 0:
																break
															tmp882.append(subjects2.popleft())
														subjects2.extendleft(reversed(tmp882))
			subjects2.appendleft(tmp276)
		subjects.appendleft(tmp1)
	return
	yield
